FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 0C 88 LJMP  _PSoC_GPIO_ISR_C   (0145)     ljmp _PSoC_GPIO_ISR_C
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 05 C2 LJMP  _Counter16_ISR     (0153)     ljmp	_Counter16_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 05 C3 LJMP  _Counter16_1_ISR   (0161)     ljmp	_Counter16_1_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
0030: 7D 0C 99 LJMP  _DigBuf_ISR        (0165)     ljmp	_DigBuf_ISR
0033: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [BP_Interupt+189],0x0(0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [BP_Interupt+190],0x0(0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 03 90 LCALL 0x0390             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 02    MOV   A,0x2              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 89    MOV   X,0x89             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 1C    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 1C    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 1C    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 1B    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 1C    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 1C FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 1B    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 1B    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 1C    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 1C FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 1B    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 02 MOV   REG[0xE0],0x2      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 06 24 LCALL __UserModules_end|_main|__text_start|_main(0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
028B: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_lab3_2_Bank1
                                        (0019) export LoadConfigTBL_lab3_2_Bank0
                                        (0020) export LoadConfigTBL_lab3_2_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_lab3_2_Bank0:
                                        (0023) ;  Instance name Counter16, User Module Counter16
                                        (0024) ;       Instance name Counter16, Block Name CNTR16_LSB(DBB00)
                                        (0025) 	db		23h, 00h		;Counter16_CONTROL_LSB_REG(DBB00CR0)
                                        (0026) 	db		21h, 20h		;Counter16_PERIOD_LSB_REG(DBB00DR1)
                                        (0027) 	db		22h, 10h		;Counter16_COMPARE_LSB_REG(DBB00DR2)
                                        (0028) ;       Instance name Counter16, Block Name CNTR16_MSB(DBB01)
                                        (0029) 	db		27h, 00h		;Counter16_CONTROL_MSB_REG(DBB01CR0)
                                        (0030) 	db		25h, 00h		;Counter16_PERIOD_MSB_REG(DBB01DR1)
                                        (0031) 	db		26h, 00h		;Counter16_COMPARE_MSB_REG(DBB01DR2)
                                        (0032) ;  Instance name Counter16_1, User Module Counter16
                                        (0033) ;       Instance name Counter16_1, Block Name CNTR16_LSB(DCB02)
                                        (0034) 	db		2bh, 00h		;Counter16_1_CONTROL_LSB_REG(DCB02CR0)
                                        (0035) 	db		29h, 01h		;Counter16_1_PERIOD_LSB_REG(DCB02DR1)
                                        (0036) 	db		2ah, 00h		;Counter16_1_COMPARE_LSB_REG(DCB02DR2)
                                        (0037) ;       Instance name Counter16_1, Block Name CNTR16_MSB(DCB03)
                                        (0038) 	db		2fh, 00h		;Counter16_1_CONTROL_MSB_REG(DCB03CR0)
                                        (0039) 	db		2dh, 00h		;Counter16_1_PERIOD_MSB_REG(DCB03DR1)
                                        (0040) 	db		2eh, 00h		;Counter16_1_COMPARE_MSB_REG(DCB03DR2)
                                        (0041) ;  Instance name DigBuf, User Module DigBuf
                                        (0042) ;       Instance name DigBuf, Block Name DigBuf(DBB10)
                                        (0043) 	db		33h, 03h		;DigBuf_CONTROL_REG(DBB10CR0)
                                        (0044) 	db		31h, 00h		;DigBuf_DATA_1_REG(DBB10DR1)
                                        (0045) 	db		32h, 00h		;DigBuf_DATA_2_REG(DBB10DR2)
                                        (0046) ;  Instance name LCD, User Module LCD
                                        (0047) ;  Global Register values Bank 0
                                        (0048) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0049) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0050) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0051) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0052) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0053) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0054) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0055) 	db		b0h, 38h		; Row_0_InputMux register (RDI0RI)
                                        (0056) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0057) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0058) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0059) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0060) 	db		b5h, 14h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0061) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0062) 	db		b8h, 65h		; Row_1_InputMux register (RDI1RI)
                                        (0063) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0064) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0065) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0066) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0067) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0068) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0069) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0070) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0071) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0072) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0073) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0074) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0075) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0076) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0077) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0078) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0079) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0080) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0081) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0082) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0083) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0084) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0085) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0086) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0087) 	db		ffh
                                        (0088) LoadConfigTBL_lab3_2_Bank1:
                                        (0089) ;  Instance name Counter16, User Module Counter16
                                        (0090) ;       Instance name Counter16, Block Name CNTR16_LSB(DBB00)
                                        (0091) 	db		20h, 91h		;Counter16_FUNC_LSB_REG(DBB00FN)
                                        (0092) 	db		21h, d1h		;Counter16_INPUT_LSB_REG(DBB00IN)
                                        (0093) 	db		22h, 40h		;Counter16_OUTPUT_LSB_REG(DBB00OU)
                                        (0094) ;       Instance name Counter16, Block Name CNTR16_MSB(DBB01)
                                        (0095) 	db		24h, 31h		;Counter16_FUNC_MSB_REG(DBB01FN)
                                        (0096) 	db		25h, 31h		;Counter16_INPUT_MSB_REG(DBB01IN)
                                        (0097) 	db		26h, 44h		;Counter16_OUTPUT_MSB_REG(DBB01OU)
                                        (0098) ;  Instance name Counter16_1, User Module Counter16
                                        (0099) ;       Instance name Counter16_1, Block Name CNTR16_LSB(DCB02)
                                        (0100) 	db		28h, 11h		;Counter16_1_FUNC_LSB_REG(DCB02FN)
                                        (0101) 	db		29h, 15h		;Counter16_1_INPUT_LSB_REG(DCB02IN)
                                        (0102) 	db		2ah, c0h		;Counter16_1_OUTPUT_LSB_REG(DCB02OU)
                                        (0103) ;       Instance name Counter16_1, Block Name CNTR16_MSB(DCB03)
                                        (0104) 	db		2ch, 31h		;Counter16_1_FUNC_MSB_REG(DCB03FN)
                                        (0105) 	db		2dh, 35h		;Counter16_1_INPUT_MSB_REG(DCB03IN)
                                        (0106) 	db		2eh, c5h		;Counter16_1_OUTPUT_MSB_REG(DCB03OU)
                                        (0107) ;  Instance name DigBuf, User Module DigBuf
                                        (0108) ;       Instance name DigBuf, Block Name DigBuf(DBB10)
                                        (0109) 	db		30h, 22h		;DigBuf_FUNC_REG(DBB10FN)
                                        (0110) 	db		31h, e0h		;DigBuf_INPUT_REG(DBB10IN)
                                        (0111) 	db		32h, 40h		;DigBuf_OUTPUT_REG(DBB10OU)
                                        (0112) ;  Instance name LCD, User Module LCD
                                        (0113) ;  Global Register values Bank 1
                                        (0114) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0115) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0116) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0117) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0118) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0119) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0120) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0121) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0122) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0123) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0124) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0125) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0126) 	db		e1h, 01h		; OscillatorControl_1 register (OSC_CR1)
                                        (0127) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0128) 	db		dfh, 02h		; OscillatorControl_3 register (OSC_CR3)
                                        (0129) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0130) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0131) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0132) 	db		ffh
                                        (0133) AREA psoc_config(rom, rel)
                                        (0134) LoadConfigTBL_lab3_2_Ordered:
                                        (0135) ;  Ordered Global Register values
                                        (0136) 	M8C_SetBank0
028D: 62 00 00 MOV   REG[0x0],0x0       (0137) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0290: 71 10    OR    F,0x10             
                                        (0138) 	M8C_SetBank1
0292: 62 00 02 MOV   REG[0x0],0x2       (0139) 	mov	reg[00h], 02h		; Port_0_DriveMode_0 register (PRT0DM0)
0295: 62 01 FD MOV   REG[0x1],0xFD      (0140) 	mov	reg[01h], fdh		; Port_0_DriveMode_1 register (PRT0DM1)
0298: 70 EF    AND   F,0xEF             
                                        (0141) 	M8C_SetBank0
029A: 62 03 F5 MOV   REG[0x3],0xF5      (0142) 	mov	reg[03h], f5h		; Port_0_DriveMode_2 register (PRT0DM2)
029D: 62 02 0A MOV   REG[0x2],0xA       (0143) 	mov	reg[02h], 0ah		; Port_0_GlobalSelect register (PRT0GS)
02A0: 71 10    OR    F,0x10             
                                        (0144) 	M8C_SetBank1
02A2: 62 02 00 MOV   REG[0x2],0x0       (0145) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
02A5: 62 03 00 MOV   REG[0x3],0x0       (0146) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
02A8: 70 EF    AND   F,0xEF             
                                        (0147) 	M8C_SetBank0
02AA: 62 01 00 MOV   REG[0x1],0x0       (0148) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
02AD: 62 04 00 MOV   REG[0x4],0x0       (0149) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
02B0: 71 10    OR    F,0x10             
                                        (0150) 	M8C_SetBank1
02B2: 62 04 01 MOV   REG[0x4],0x1       (0151) 	mov	reg[04h], 01h		; Port_1_DriveMode_0 register (PRT1DM0)
02B5: 62 05 FE MOV   REG[0x5],0xFE      (0152) 	mov	reg[05h], feh		; Port_1_DriveMode_1 register (PRT1DM1)
02B8: 70 EF    AND   F,0xEF             
                                        (0153) 	M8C_SetBank0
02BA: 62 07 D0 MOV   REG[0x7],0xD0      (0154) 	mov	reg[07h], d0h		; Port_1_DriveMode_2 register (PRT1DM2)
02BD: 62 06 07 MOV   REG[0x6],0x7       (0155) 	mov	reg[06h], 07h		; Port_1_GlobalSelect register (PRT1GS)
02C0: 71 10    OR    F,0x10             
                                        (0156) 	M8C_SetBank1
02C2: 62 06 28 MOV   REG[0x6],0x28      (0157) 	mov	reg[06h], 28h		; Port_1_IntCtrl_0 register (PRT1IC0)
02C5: 62 07 28 MOV   REG[0x7],0x28      (0158) 	mov	reg[07h], 28h		; Port_1_IntCtrl_1 register (PRT1IC1)
02C8: 70 EF    AND   F,0xEF             
                                        (0159) 	M8C_SetBank0
02CA: 62 05 28 MOV   REG[0x5],0x28      (0160) 	mov	reg[05h], 28h		; Port_1_IntEn register (PRT1IE)
02CD: 62 08 00 MOV   REG[0x8],0x0       (0161) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
02D0: 71 10    OR    F,0x10             
                                        (0162) 	M8C_SetBank1
02D2: 62 08 7F MOV   REG[0x8],0x7F      (0163) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
02D5: 62 09 80 MOV   REG[0x9],0x80      (0164) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
02D8: 70 EF    AND   F,0xEF             
                                        (0165) 	M8C_SetBank0
02DA: 62 0B 80 MOV   REG[0xB],0x80      (0166) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
02DD: 62 0A 00 MOV   REG[0xA],0x0       (0167) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
02E0: 71 10    OR    F,0x10             
                                        (0168) 	M8C_SetBank1
02E2: 62 0A 00 MOV   REG[0xA],0x0       (0169) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
02E5: 62 0B 00 MOV   REG[0xB],0x0       (0170) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
02E8: 70 EF    AND   F,0xEF             
                                        (0171) 	M8C_SetBank0
02EA: 62 09 00 MOV   REG[0x9],0x0       (0172) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
02ED: 62 0C 00 MOV   REG[0xC],0x0       (0173) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
02F0: 71 10    OR    F,0x10             
                                        (0174) 	M8C_SetBank1
02F2: 62 0C 00 MOV   REG[0xC],0x0       (0175) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
02F5: 62 0D 00 MOV   REG[0xD],0x0       (0176) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
02F8: 70 EF    AND   F,0xEF             
                                        (0177) 	M8C_SetBank0
02FA: 62 0F 00 MOV   REG[0xF],0x0       (0178) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
02FD: 62 0E 00 MOV   REG[0xE],0x0       (0179) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0300: 71 10    OR    F,0x10             
                                        (0180) 	M8C_SetBank1
0302: 62 0E 00 MOV   REG[0xE],0x0       (0181) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0305: 62 0F 00 MOV   REG[0xF],0x0       (0182) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0308: 70 EF    AND   F,0xEF             
                                        (0183) 	M8C_SetBank0
030A: 62 0D 00 MOV   REG[0xD],0x0       (0184) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
030D: 62 10 00 MOV   REG[0x10],0x0      (0185) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0310: 71 10    OR    F,0x10             
                                        (0186) 	M8C_SetBank1
0312: 62 10 00 MOV   REG[0x10],0x0      (0187) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0315: 62 11 00 MOV   REG[0x11],0x0      (0188) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0318: 70 EF    AND   F,0xEF             
                                        (0189) 	M8C_SetBank0
031A: 62 13 00 MOV   REG[0x13],0x0      (0190) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
031D: 62 12 00 MOV   REG[0x12],0x0      (0191) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0320: 71 10    OR    F,0x10             
                                        (0192) 	M8C_SetBank1
0322: 62 12 00 MOV   REG[0x12],0x0      (0193) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0325: 62 13 00 MOV   REG[0x13],0x0      (0194) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0328: 70 EF    AND   F,0xEF             
                                        (0195) 	M8C_SetBank0
032A: 62 11 00 MOV   REG[0x11],0x0      (0196) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
032D: 62 14 00 MOV   REG[0x14],0x0      (0197) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0330: 71 10    OR    F,0x10             
                                        (0198) 	M8C_SetBank1
0332: 62 14 00 MOV   REG[0x14],0x0      (0199) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0335: 62 15 00 MOV   REG[0x15],0x0      (0200) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0338: 70 EF    AND   F,0xEF             
                                        (0201) 	M8C_SetBank0
033A: 62 17 00 MOV   REG[0x17],0x0      (0202) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
033D: 62 16 00 MOV   REG[0x16],0x0      (0203) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0340: 71 10    OR    F,0x10             
                                        (0204) 	M8C_SetBank1
0342: 62 16 00 MOV   REG[0x16],0x0      (0205) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0345: 62 17 00 MOV   REG[0x17],0x0      (0206) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0348: 70 EF    AND   F,0xEF             
                                        (0207) 	M8C_SetBank0
034A: 62 15 00 MOV   REG[0x15],0x0      (0208) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
034D: 62 18 00 MOV   REG[0x18],0x0      (0209) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
0350: 71 10    OR    F,0x10             
                                        (0210) 	M8C_SetBank1
0352: 62 18 00 MOV   REG[0x18],0x0      (0211) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0355: 62 19 00 MOV   REG[0x19],0x0      (0212) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0358: 70 EF    AND   F,0xEF             
                                        (0213) 	M8C_SetBank0
035A: 62 1B 00 MOV   REG[0x1B],0x0      (0214) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
035D: 62 1A 00 MOV   REG[0x1A],0x0      (0215) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0360: 71 10    OR    F,0x10             
                                        (0216) 	M8C_SetBank1
0362: 62 1A 00 MOV   REG[0x1A],0x0      (0217) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0365: 62 1B 00 MOV   REG[0x1B],0x0      (0218) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0368: 70 EF    AND   F,0xEF             
                                        (0219) 	M8C_SetBank0
036A: 62 19 00 MOV   REG[0x19],0x0      (0220) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
036D: 62 1C 00 MOV   REG[0x1C],0x0      (0221) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0370: 71 10    OR    F,0x10             
                                        (0222) 	M8C_SetBank1
0372: 62 1C 00 MOV   REG[0x1C],0x0      (0223) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0375: 62 1D 00 MOV   REG[0x1D],0x0      (0224) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0378: 70 EF    AND   F,0xEF             
                                        (0225) 	M8C_SetBank0
037A: 62 1F 00 MOV   REG[0x1F],0x0      (0226) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
037D: 62 1E 00 MOV   REG[0x1E],0x0      (0227) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0380: 71 10    OR    F,0x10             
                                        (0228) 	M8C_SetBank1
0382: 62 1E 00 MOV   REG[0x1E],0x0      (0229) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0385: 62 1F 00 MOV   REG[0x1F],0x0      (0230) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0388: 70 EF    AND   F,0xEF             
                                        (0231) 	M8C_SetBank0
038A: 62 1D 00 MOV   REG[0x1D],0x0      (0232) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
038D: 70 EF    AND   F,0xEF             
                                        (0233) 	M8C_SetBank0
038F: 7F       RET                      (0234) 	ret
                                        (0235) 
                                        (0236) 
                                        (0237) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_lab3_2
                                        (0026) export _LoadConfig_lab3_2
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
0390: 55 00 00 MOV   [0x0],0x0          (0065) 	mov		[Port_2_Data_SHADE], 0h
0393: 55 01 7F MOV   [0x1],0x7F         (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
0396: 55 02 80 MOV   [0x2],0x80         (0067) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0068) 
0399: 7C 03 A0 LCALL 0x03A0             (0069) 	lcall	LoadConfig_lab3_2
039C: 7C 02 8B LCALL 0x028B             (0070) 	lcall	LoadConfigTBL_lab3_2_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
039F: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration lab3_2
                                        (0078) ;
                                        (0079) ;    Load configuration registers for lab3_2.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_lab3_2:
                                        (0096)  LoadConfig_lab3_2:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
03A0: 10       PUSH  X                  (0099) 	push	x
03A1: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
03A3: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
03A5: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
03A6: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_lab3_2_Bank0
03A8: 57 D9    MOV   X,0xD9             (0105)     mov     X, <LoadConfigTBL_lab3_2_Bank0
03AA: 7C 03 BB LCALL 0x03BB             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
03AD: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
03AF: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
03B0: 50 02    MOV   A,0x2              (0111)     mov     A, >LoadConfigTBL_lab3_2_Bank1
03B2: 57 46    MOV   X,0x46             (0112)     mov     X, <LoadConfigTBL_lab3_2_Bank1
03B4: 7C 03 BB LCALL 0x03BB             (0113)     lcall   LoadConfig              ; Load the bank 1 values
03B7: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
03B9: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
03BA: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
03BB: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
03BD: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
03BE: 08       PUSH  A                  (0143)     push    A
03BF: 4F       MOV   X,SP               (0144)     mov     X, SP
03C0: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
03C3: D0 04    JNC   0x03C8             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
03C5: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
03C8: 18       POP   A                  (0149)     pop     A
03C9: 20       POP   X                  (0150)     pop     X
03CA: 70 EF    AND   F,0xEF             
03CC: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
03CF: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
03D0: 08       PUSH  A                  (0156)     push    A
03D1: 28       ROMX                     (0157)     romx                            ; Load register address from table
03D2: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
03D4: A0 1F    JZ    0x03F4             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
03D6: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
03D7: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
03DA: A0 03    JZ    0x03DE             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03DC: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
03DE: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
03E0: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
03E1: 20       POP   X                  (0167)     pop     X
03E2: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
03E3: 09 00    ADC   A,0x0              (0169)     adc     A, 0
03E5: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
03E6: 08       PUSH  A                  (0171)     push    A
03E7: 28       ROMX                     (0172)     romx                            ; load config data from the table
03E8: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
03E9: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
03EB: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
03ED: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
03EE: 20       POP   X                  (0177)     pop     X
03EF: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
03F0: 09 00    ADC   A,0x0              (0179)     adc     A, 0
03F2: 8F D7    JMP   0x03CA             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
03F4: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
03F6: 70 3F    AND   F,0x3F             
03F8: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
03FA: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
03FB: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
03FC: 10       PUSH  X                  (0209)     push  X
03FD: 28       ROMX                     (0210)     romx                               ; Get character from ROM
03FE: B0 04    JNZ   0x0403             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0400: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0401: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0402: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0403: 90 44    CALL  _LCD_WriteData|_LCD_Write_Data|LCD_WriteData|LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
0405: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0406: 18       POP   A                  (0220)     pop   A
0407: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0408: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
040A: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
040B: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
041D: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
041E: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
041F: 67       ASR   A                  (0262)     asr   A
0420: 67       ASR   A                  (0263)     asr   A
0421: 67       ASR   A                  (0264)     asr   A
0422: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0424: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
0426: 90 21    CALL  _LCD_WriteData|_LCD_Write_Data|LCD_WriteData|LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
0428: 18       POP   A                  (0268)     pop   A                            ; Restore value
0429: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
042B: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
042D: 90 1A    CALL  _LCD_WriteData|_LCD_Write_Data|LCD_WriteData|LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
042F: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0430: 4B       SWAP  A,X                (0305)     swap  A,X
0431: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
0433: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0434: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0436: 7F       RET                      (0310)     ret
0437: 70 BF    AND   F,0xBF             
0439: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
043B: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
043D: A0 06    JZ    0x0444             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
043F: 90 08    CALL  _LCD_WriteData|_LCD_Write_Data|LCD_WriteData|LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
0441: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0442: 8F F8    JMP   0x043B             (0351)     jmp   .Loop_PrString               ; Go get next character
0444: 70 3F    AND   F,0x3F             
0446: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0448: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0449: 90 65    CALL  0x04B0             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
044B: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
044C: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
044D: 67       ASR   A                  (0390)     asr   A
044E: 67       ASR   A                  (0391)     asr   A
044F: 67       ASR   A                  (0392)     asr   A
0450: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0452: 90 3B    CALL  0x048F             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0454: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0455: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0457: 40       NOP                      (0397)     nop
0458: 40       NOP                      (0398)     nop
0459: 40       NOP                      (0399)     nop
045A: 90 33    CALL  0x048F             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
045C: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
045D: 90 51    CALL  0x04B0             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
045F: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0460: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0461: 67       ASR   A                  (0436)     asr   A
0462: 67       ASR   A                  (0437)     asr   A
0463: 67       ASR   A                  (0438)     asr   A
0464: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0466: 90 09    CALL  0x0471             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0468: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0469: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
046B: 40       NOP                      (0443)     nop
046C: 40       NOP                      (0444)     nop
046D: 40       NOP                      (0445)     nop
046E: 90 01    CALL  0x0471             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0470: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0471: 08       PUSH  A                  (0477)     push  A
0472: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0475: 26 00 80 AND   [0x0],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0478: 51 00    MOV   A,[0x0]            (0480)     mov   A,[Port_2_Data_SHADE]
047A: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
047C: 18       POP   A                  (0483)     pop   A
047D: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
047F: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0481: 2A 00    OR    A,[0x0]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0483: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0485: 53 00    MOV   [0x0],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0487: 40       NOP                      (0489)     nop
0488: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
048A: 53 00    MOV   [0x0],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
048C: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
048E: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
048F: 08       PUSH  A                  (0523)     push  A
0490: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0493: 26 00 80 AND   [0x0],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0496: 2E 00 20 OR    [0x0],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0499: 51 00    MOV   A,[0x0]            (0527)     mov   A,[Port_2_Data_SHADE]
049B: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
049D: 18       POP   A                  (0530)     pop   A
049E: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
04A0: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
04A2: 2A 00    OR    A,[0x0]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
04A4: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
04A6: 53 00    MOV   [0x0],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
04A8: 40       NOP                      (0536)     NOP
04A9: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
04AB: 53 00    MOV   [0x0],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
04AD: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
04AF: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
04B0: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
04B1: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
04B4: 26 00 80 AND   [0x0],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
04B7: 51 00    MOV   A,[0x0]            (0574)     mov   A,[Port_2_Data_SHADE]
04B9: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
04BB: 26 01 F0 AND   [0x1],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
04BE: 51 01    MOV   A,[0x1]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
04C0: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
04C2: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
04C4: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
04C6: 2E 00 40 OR    [0x0],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
04C9: 51 00    MOV   A,[0x0]            (0584)     mov   A,[Port_2_Data_SHADE]
04CB: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
04CD: 40       NOP                      (0586)     NOP
                                        (0587) 
04CE: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
04CF: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
04D1: 2E 00 50 OR    [0x0],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
04D4: 51 00    MOV   A,[0x0]            (0593)     mov   A,[Port_2_Data_SHADE]
04D6: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
04D8: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
04D9: 40       NOP                      (0597)     nop
04DA: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
04DC: 08       PUSH  A                  (0610)     push  A
04DD: 26 00 C0 AND   [0x0],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
04E0: 51 00    MOV   A,[0x0]            (0612)     mov   A,[Port_2_Data_SHADE]
04E2: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
04E4: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
04E5: 40       NOP                      (0616)     nop                                    ; fastest PSoC
04E6: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
04E7: 2E 00 50 OR    [0x0],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
04EA: 51 00    MOV   A,[0x0]            (0620)     mov   A,[Port_2_Data_SHADE]
04EC: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
04EE: 40       NOP                      (0623)     nop
04EF: 40       NOP                      (0624)     nop
                                        (0625) 
04F0: 26 00 C0 AND   [0x0],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
04F3: 51 00    MOV   A,[0x0]            (0627)     mov   A,[Port_2_Data_SHADE]
04F5: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
04F7: 18       POP   A                  (0630)     pop   A
04F8: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
04FA: A0 04    JZ    0x04FF             (0633)     jz    .UNLOCK
04FC: 79       DEC   X                  (0634)     dec   X
04FD: BF D3    JNZ   0x04D1             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
04FF: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0500: 2E 01 7F OR    [0x1],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0503: 51 01    MOV   A,[0x1]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0505: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0507: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0509: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
050B: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
050C: 7F       RET                      (0646)     ret
050D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0510: 26 01 80 AND   [0x1],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0513: 2E 01 7F OR    [0x1],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0516: 26 02 80 AND   [0x2],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
0519: 51 01    MOV   A,[0x1]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
051B: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
051D: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
051F: 51 02    MOV   A,[0x2]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0521: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0523: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0525: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0527: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
0529: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
052B: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
052D: 50 03    MOV   A,0x3              (0701)     mov   A,03h
052F: 9F 40    CALL  0x0471             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0531: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0533: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0535: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0537: 9F 38    CALL  0x0471             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
0539: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
053B: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
053D: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
053F: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0541: 9F 2E    CALL  0x0471             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0543: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0545: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0547: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0549: 9F 26    CALL  0x0471             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
054B: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
054D: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
054F: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0551: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
0553: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0555: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0557: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0559: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
055B: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
055D: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
055F: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0561: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0563: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0565: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0567: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0569: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
056B: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
056D: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
056F: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0571: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0573: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0575: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0577: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0579: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
057B: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0580: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0582: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0583: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0585: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0586: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0588: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0589: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
058B: 70 3F    AND   F,0x3F             
058D: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
058F: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0590: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0592: 78       DEC   A                  (0828)     dec   A
0593: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0595: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
059E: 08       PUSH  A                  (0871)     push  A
059F: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
05A1: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
05A3: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
05A5: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
05A7: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
05A9: D0 06    JNC   0x05B0             (0877)     jnc   .Delay50u_End
05AB: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
05AD: 78       DEC   A                  (0880)     dec   A                              ; [4]
05AE: BF FE    JNZ   0x05AD             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
05B0: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
05B1: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\digbuf.asm                    (0001) ;;*****************************************************************************
05B2: 43 E1 10 OR    REG[0xE1],0x10     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DigBuf.asm
                                        (0004) ;;  Version: 1.3, Updated on 2013/5/19 at 10:43:26
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DigitalBuffers User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "DigBuf.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  DigBuf_EnableInt
                                        (0030) export _DigBuf_EnableInt
                                        (0031) export  DigBuf_DisableInt
                                        (0032) export _DigBuf_DisableInt
                                        (0033) export  DigBuf_Start
                                        (0034) export _DigBuf_Start
                                        (0035) export  DigBuf_Stop
                                        (0036) export _DigBuf_Stop
                                        (0037) 
                                        (0038) AREA bss (RAM,REL)
                                        (0039) 
                                        (0040) ;-----------------------------------------------
                                        (0041) ;  Constant Definitions
                                        (0042) ;-----------------------------------------------
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------
                                        (0046) ; Variable Allocation
                                        (0047) ;-----------------------------------------------
                                        (0048) 
                                        (0049) 
                                        (0050) AREA UserModules (ROM, REL)
                                        (0051) 
                                        (0052) .SECTION
                                        (0053) ;-----------------------------------------------------------------------------
                                        (0054) ;  FUNCTION NAME: DigBuf_EnableInt
                                        (0055) ;
                                        (0056) ;  DESCRIPTION:
                                        (0057) ;     Enables the DigBuf's interrupt by setting the interrupt enable mask bit
                                        (0058) ;     associated with this User Module. This function has no effect until and
                                        (0059) ;     unless the global interrupts are enabled (for example by using the
                                        (0060) ;     macro M8C_EnableGInt).
                                        (0061) ;-----------------------------------------------------------------------------
                                        (0062) ;
                                        (0063) ;  ARGUMENTS:    None.
                                        (0064) ;  RETURNS:      Nothing.
                                        (0065) ;  SIDE EFFECTS:
                                        (0066) ;    The A and X registers may be modified by this or future implementations
                                        (0067) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0068) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0069) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0070) ;    functions.
                                        (0071) ;
                                        (0072)  DigBuf_EnableInt:
                                        (0073) _DigBuf_EnableInt:
                                        (0074)    RAM_PROLOGUE RAM_USE_CLASS_1   
                                        (0075)    DigBuf_EnableInt_M
                                        (0076)    RAM_EPILOGUE RAM_USE_CLASS_1
05B5: 7F       RET                      (0077)    ret
05B6: 41 E1 EF AND   REG[0xE1],0xEF     
                                        (0078) 
                                        (0079) .ENDSECTION
                                        (0080) 
                                        (0081) .SECTION
                                        (0082) ;-----------------------------------------------------------------------------
                                        (0083) ;  FUNCTION NAME: DigBuf_DisableInt
                                        (0084) ;
                                        (0085) ;  DESCRIPTION:
                                        (0086) ;     Disables the DigBuf's interrupt by clearing the interrupt enable mask bit
                                        (0087) ;     associated with this User Module. 
                                        (0088) ;-----------------------------------------------------------------------------
                                        (0089) ;
                                        (0090) ;  ARGUMENTS:    None.
                                        (0091) ;  RETURNS:      Nothing.
                                        (0092) ;  SIDE EFFECTS:
                                        (0093) ;    The A and X registers may be modified by this or future implementations
                                        (0094) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0095) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0096) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0097) ;    functions.
                                        (0098) ;
                                        (0099)  DigBuf_DisableInt:
                                        (0100) _DigBuf_DisableInt:
                                        (0101)    RAM_PROLOGUE RAM_USE_CLASS_1   
                                        (0102)    DigBuf_DisableInt_M
                                        (0103)    RAM_EPILOGUE RAM_USE_CLASS_1
05B9: 7F       RET                      (0104)    ret
05BA: 43 33 01 OR    REG[0x33],0x1      
                                        (0105) 
                                        (0106) .ENDSECTION
                                        (0107) 
                                        (0108) .SECTION
                                        (0109) ;-----------------------------------------------------------------------------
                                        (0110) ;  FUNCTION NAME: DigBuf_Start
                                        (0111) ;
                                        (0112) ;  DESCRIPTION:
                                        (0113) ;     Starts the Digital Buffers within the block.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS:
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  DigBuf_Start:
                                        (0126) _DigBuf_Start:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    DigBuf_Start_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
05BD: 7F       RET                      (0130)    ret
05BE: 41 33 FE AND   REG[0x33],0xFE     
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) .SECTION
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;  FUNCTION NAME: DigBuf_Stop
                                        (0137) ;
                                        (0138) ;  DESCRIPTION:
                                        (0139) ;     Stops the Digital Buffers within the block. The outputs are driven low.
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141) ;
                                        (0142) ;  ARGUMENTS:    None
                                        (0143) ;  RETURNS:      Nothing
                                        (0144) ;  SIDE EFFECTS:
                                        (0145) ;    The A and X registers may be modified by this or future implementations
                                        (0146) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0147) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0148) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0149) ;    functions.
                                        (0150) ;
                                        (0151)  DigBuf_Stop:
                                        (0152) _DigBuf_Stop:
                                        (0153)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0154)    DigBuf_Stop_M
                                        (0155)    RAM_EPILOGUE RAM_USE_CLASS_1
05C1: 7F       RET                      (0156)    ret
                                        (0157) 
                                        (0158) .ENDSECTION
                                        (0159) 
                                        (0160) 
                                        (0161) ; End of File DigBuf.asm
                                        (0162) 
                                        (0163) 
FILE: lib\counter16int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter16INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:42:30
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Counter16.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Counter16_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Counter16_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Counter16_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
05C2: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file Counter16INT.asm
FILE: lib\counter16_1int.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter16_1INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:42:30
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Counter16_1.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Counter16_1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Counter16_1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Counter16_1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
05C3: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file Counter16_1INT.asm
FILE: lib\counter16.asm                 (0001) ;;*****************************************************************************
05C4: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter16.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:42:30
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Counter16.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Counter16_EnableInt
                                        (0030) export _Counter16_EnableInt
                                        (0031) export  Counter16_DisableInt
                                        (0032) export _Counter16_DisableInt
                                        (0033) export  Counter16_Start
                                        (0034) export _Counter16_Start
                                        (0035) export  Counter16_Stop
                                        (0036) export _Counter16_Stop
                                        (0037) export  Counter16_WritePeriod
                                        (0038) export _Counter16_WritePeriod
                                        (0039) export  Counter16_WriteCompareValue
                                        (0040) export _Counter16_WriteCompareValue
                                        (0041) export  Counter16_wReadCompareValue
                                        (0042) export _Counter16_wReadCompareValue
                                        (0043) export  Counter16_wReadCounter
                                        (0044) export _Counter16_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wCounter16_ReadCompareValue  ; deprecated
                                        (0049) export _wCounter16_ReadCompareValue  ; deprecated
                                        (0050) export  wCounter16_ReadCounter       ; deprecated
                                        (0051) export _wCounter16_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: Counter16_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  Counter16_EnableInt:
                                        (0082) _Counter16_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    Counter16_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
05C7: 7F       RET                      (0086)    ret
05C8: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: Counter16_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  Counter16_DisableInt:
                                        (0109) _Counter16_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    Counter16_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
05CB: 7F       RET                      (0113)    ret
05CC: 43 23 01 OR    REG[0x23],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: Counter16_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  Counter16_Start:
                                        (0138) _Counter16_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    Counter16_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
05CF: 7F       RET                      (0142)    ret
05D0: 41 23 FE AND   REG[0x23],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: Counter16_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register of the LSB block.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  Counter16_Stop:
                                        (0166) _Counter16_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    Counter16_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
05D3: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: Counter16_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count registers (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  Counter16_WritePeriod:
                                        (0196) _Counter16_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
05D4: 60 21    MOV   REG[0x21],A        (0198)    mov   reg[Counter16_PERIOD_LSB_REG], A
05D6: 5B       MOV   A,X                (0199)    mov   A, X
05D7: 60 25    MOV   REG[0x25],A        (0200)    mov   reg[Counter16_PERIOD_MSB_REG], A
                                        (0201)    RAM_EPILOGUE RAM_USE_CLASS_1
05D9: 7F       RET                      (0202)    ret
                                        (0203) 
                                        (0204) 
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: Counter16_WriteCompareValue
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Writes compare value into the Compare register (DR2).
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;
                                        (0215) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0216) ;  RETURNS:      Nothing
                                        (0217) ;  SIDE EFFECTS: 
                                        (0218) ;    The A and X registers may be modified by this or future implementations
                                        (0219) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0220) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0221) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0222) ;    functions.
                                        (0223) ;
                                        (0224)  Counter16_WriteCompareValue:
                                        (0225) _Counter16_WriteCompareValue:
                                        (0226)    RAM_PROLOGUE RAM_USE_CLASS_1
05DA: 60 22    MOV   REG[0x22],A        (0227)    mov   reg[Counter16_COMPARE_LSB_REG], A
05DC: 5B       MOV   A,X                (0228)    mov   A, X
05DD: 60 26    MOV   REG[0x26],A        (0229)    mov   reg[Counter16_COMPARE_MSB_REG], A
                                        (0230)    RAM_EPILOGUE RAM_USE_CLASS_1
05DF: 7F       RET                      (0231)    ret
                                        (0232) 
                                        (0233) 
                                        (0234) .ENDSECTION
                                        (0235) 
                                        (0236) .SECTION
                                        (0237) ;-----------------------------------------------------------------------------
                                        (0238) ;  FUNCTION NAME: Counter16_wReadCompareValue
                                        (0239) ;
                                        (0240) ;  DESCRIPTION:
                                        (0241) ;     Reads the Compare registers.
                                        (0242) ;-----------------------------------------------------------------------------
                                        (0243) ;
                                        (0244) ;  ARGUMENTS:    None
                                        (0245) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0246) ;  SIDE EFFECTS: 
                                        (0247) ;    The A and X registers may be modified by this or future implementations
                                        (0248) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0249) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0250) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0251) ;    functions.
                                        (0252) ;
                                        (0253)  Counter16_wReadCompareValue:
                                        (0254) _Counter16_wReadCompareValue:
                                        (0255)  wCounter16_ReadCompareValue:                    ; this name deprecated
                                        (0256) _wCounter16_ReadCompareValue:                    ; this name deprecated
                                        (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
05E0: 5D 26    MOV   A,REG[0x26]        (0258)    mov   A, reg[Counter16_COMPARE_MSB_REG]
05E2: 5C       MOV   X,A                (0259)    mov   X, A
05E3: 5D 22    MOV   A,REG[0x22]        (0260)    mov   A, reg[Counter16_COMPARE_LSB_REG]
                                        (0261)    RAM_EPILOGUE RAM_USE_CLASS_1
05E5: 7F       RET                      (0262)    ret
                                        (0263) 
                                        (0264) 
                                        (0265) .ENDSECTION
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME: Counter16_wReadCounter
                                        (0270) ;
                                        (0271) ;  DESCRIPTION:
                                        (0272) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0273) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0274) ;     from the Count to the Compare registers by holding the clock low in
                                        (0275) ;     the MSB PSoC block.
                                        (0276) ;-----------------------------------------------------------------------------
                                        (0277) ;
                                        (0278) ;  ARGUMENTS: None
                                        (0279) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0280) ;  SIDE EFFECTS:
                                        (0281) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0282) ;     2) The A and X registers may be modified by this or future implementations
                                        (0283) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0284) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0285) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0286) ;        functions.
                                        (0287) ;
                                        (0288)  Counter16_wReadCounter:
                                        (0289) _Counter16_wReadCounter:
                                        (0290)  wCounter16_ReadCounter:                         ; this name deprecated
                                        (0291) _wCounter16_ReadCounter:                         ; this name deprecated
                                        (0292) 
                                        (0293)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0294)    bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
                                        (0295)    bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
                                        (0296)    wCounter:               EQU   4                  ; Frame offset to temp Count   store
                                        (0297)    STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
                                        (0298) 
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_2
05E6: 4F       MOV   X,SP               (0300)    mov   X, SP                                      ; X <-  stack frame pointer
05E7: 5D 26    MOV   A,REG[0x26]        (0301)    mov   A, reg[Counter16_COMPARE_MSB_REG]       ; Save the Compare register on the stack
05E9: 08       PUSH  A                  (0302)    push  A                                          ;
05EA: 5D 22    MOV   A,REG[0x22]        (0303)    mov   A, reg[Counter16_COMPARE_LSB_REG]       ;
05EC: 08       PUSH  A                  (0304)    push  A                                          ;   -stack frame now 2 bytes-
05ED: 5D 23    MOV   A,REG[0x23]        (0305)    mov   A, reg[Counter16_CONTROL_LSB_REG]       ; Save CR0 (running or stopped state)
05EF: 08       PUSH  A                  (0306)    push  A                                          ;   -stack frame now 3 bytes-
05F0: 41 23 FE AND   REG[0x23],0xFE     
05F3: 71 10    OR    F,0x10             
                                        (0307)    Counter16_Stop_M                              ; Disable (stop) the Counter if running
                                        (0308)    M8C_SetBank1                                     ;
05F5: 5D 21    MOV   A,REG[0x21]        (0309)    mov   A, reg[Counter16_INPUT_LSB_REG]         ; save the LSB clock input setting
05F7: 08       PUSH  A                  (0310)    push  A                                          ;   on the stack (now 4 bytes) and ...
                                        (0311)                                                     ;   hold the clock low:
05F8: 62 21 00 MOV   REG[0x21],0x0      (0312)    mov   reg[Counter16_INPUT_LSB_REG], INPUT_REG_NULL
05FB: 70 EF    AND   F,0xEF             
                                        (0313)    M8C_SetBank0                                     ; Extract the Count via DR2 register
05FD: 5D 24    MOV   A,REG[0x24]        (0314)    mov   A, reg[Counter16_COUNTER_MSB_REG]       ; DR2 <- DR0 (in the MSB block)
05FF: 5D 26    MOV   A,REG[0x26]        (0315)    mov   A, reg[Counter16_COMPARE_MSB_REG]       ; Stash the Count MSB on the stack
0601: 08       PUSH  A                  (0316)    push  A                                          ;   -stack frame is now 5 bytes
0602: 5D 20    MOV   A,REG[0x20]        (0317)    mov   A, reg[Counter16_COUNTER_LSB_REG]       ; DR2 <- DR0 (in the LSB block)
0604: 5D 22    MOV   A,REG[0x22]        (0318)    mov   A, reg[Counter16_COMPARE_LSB_REG]       ; Stash the Count LSB on the stack
0606: 08       PUSH  A                  (0319)    push  A                                          ;   -stack frame is now 6 bytes-
0607: 52 00    MOV   A,[X+0]            (0320)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0609: 60 26    MOV   REG[0x26],A        (0321)    mov   reg[Counter16_COMPARE_MSB_REG], A       ;
060B: 52 01    MOV   A,[X+1]            (0322)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
060D: 60 22    MOV   REG[0x22],A        (0323)    mov   reg[Counter16_COMPARE_LSB_REG], A       ;
060F: 71 10    OR    F,0x10             
                                        (0324)    M8C_SetBank1                                     ; ---Restore the counter operation
0611: 52 03    MOV   A,[X+3]            (0325)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0613: 60 21    MOV   REG[0x21],A        (0326)    mov   reg[Counter16_INPUT_LSB_REG], A         ;   and restore it
0615: 70 EF    AND   F,0xEF             
                                        (0327)    M8C_SetBank0                                     ; Now re-enable (start) the counter
0617: 52 02    MOV   A,[X+2]            (0328)    mov   A, [X+bOrigControlReg]                     ;   if it was running when
0619: 60 23    MOV   REG[0x23],A        (0329)    mov   reg[Counter16_CONTROL_LSB_REG], A       ;   this function was first called
061B: 18       POP   A                  (0330)    pop   A                                          ; Setup the return value
061C: 20       POP   X                  (0331)    pop   X                                          ;
061D: 38 FC    ADD   SP,0xFC            (0332)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
061F: 70 3F    AND   F,0x3F             
0621: 71 C0    OR    F,0xC0             
                                        (0333)    RAM_EPILOGUE RAM_USE_CLASS_2
0623: 7F       RET                      (0334)    ret
                                        (0335) 
                                        (0336) .ENDSECTION
                                        (0337) 
                                        (0338) ; End of File Counter16.asm
FILE: C:\DOCUME~1\mtangy\Desktop\LAB4_P~1\LAB4_P~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) #include    "M8C.h"
(0005) 
(0006) #include <m8c.h>        // part specific constants and macros
(0007) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0008) #include <stdbool.h>
(0009) 
(0010) #include <stdio.h>
(0011) #include <stdlib.h>
(0012) #include <math.h> 
(0013) #include  "DigBuf.h"
(0014) 
(0015) //#include "SW2Buf.h"
(0016) 
(0017) #include <float.h>
(0018) #include "PSoCGPIOINT.h" 
(0019) #pragma interrupt_handler PSoC_GPIO_ISR_C
(0020) #pragma interrupt_handler DigBuf_ISR
(0021) 
(0022) #pragma interrupt_handler SW2Buf_ISR
(0023) 
(0024) int Ap =0; //Ap is the prior Encoder port A input 
(0025) int Bp =0;
(0026) int A =0;  //A is current Encoder port A input 
(0027) int B =0;
(0028) //int T_OUT;
(0029) 
(0030) BOOL interupt = FALSE;
(0031) int period;
(0032) int compare;
(0033) 
(0034) int periodLog;
(0035) int compareLog;
(0036) 
(0037) int integerFreq = 8; 
(0038) BOOL freqFlag = FALSE;
(0039) int frequencyDivider = 1; 
(0040) 
(0041) float OutputF;
(0042) float errorOffset = 1.0;
(0043) //float comparef = 2.5;  
(0044) 
(0045) BOOL BP_Interupt = FALSE;
(0046) 
(0047) 
(0048) void main(void){
__UserModules_end|_main|__text_start|_main:
  freq                 --> X+0
    0624: 10       PUSH  X
    0625: 4F       MOV   X,SP
    0626: 38 02    ADD   SP,0x2
(0049) 	
(0050) char *freq;	
(0051) period = 1999;
    0628: 62 D0 00 MOV   REG[0xD0],0x0
    062B: 55 26 CF MOV   [period+1],0xCF
    062E: 55 25 07 MOV   [period],0x7
(0052) compare = 1000;
    0631: 62 D0 00 MOV   REG[0xD0],0x0
    0634: 55 32 E8 MOV   [compare+1],0xE8
    0637: 55 31 03 MOV   [compare],0x3
(0053) 
(0054) DigBuf_EnableInt();	
    063A: 10       PUSH  X
    063B: 7C 05 B2 LCALL _DigBuf_EnableInt
(0055) DigBuf_Start();	
    063E: 7C 05 BA LCALL _DigBuf_Start
(0056) 
(0057) 	
(0058) Counter16_Start();
    0641: 7C 05 CC LCALL _Counter16_Start
(0059) //Counter16_1_Start();	
(0060) Counter16_WritePeriod(period);
    0644: 62 D0 00 MOV   REG[0xD0],0x0
    0647: 51 25    MOV   A,[period]
    0649: 08       PUSH  A
    064A: 51 26    MOV   A,[period+1]
    064C: 20       POP   X
    064D: 7C 05 D4 LCALL _Counter16_WritePeriod
(0061) Counter16_WriteCompareValue(compare); 
    0650: 62 D0 00 MOV   REG[0xD0],0x0
    0653: 51 31    MOV   A,[compare]
    0655: 08       PUSH  A
    0656: 51 32    MOV   A,[compare+1]
    0658: 20       POP   X
    0659: 7C 05 DA LCALL _Counter16_WriteCompareValue
(0062) 
(0063)   
(0064)      //T_OUT = (Counter16_PERIOD + 1)* T_CLK;
(0065) 	 //Counter16_WritePeriod(T_OUT);
(0066) 
(0067)      
(0068) 	//Counter16_Start();
(0069) 	//comparef = 2.5;
(0070) 
(0071) 	LCD_Start();
    065C: 7C 05 0D LCALL _LCD_Start|_LCD_Init|LCD_Init
(0072) 	LCD_Position(0, 0);
    065F: 50 00    MOV   A,0x0
    0661: 57 00    MOV   X,0x0
    0663: 7C 05 80 LCALL _LCD_Position
(0073) 	LCD_PrCString("Main            ");
    0666: 50 01    MOV   A,0x1
    0668: 08       PUSH  A
    0669: 50 C8    MOV   A,0xC8
    066B: 5C       MOV   X,A
    066C: 18       POP   A
    066D: 7C 03 FB LCALL _LCD_PrCString
(0074) 	LCD_Position(1, 0);
    0670: 57 00    MOV   X,0x0
    0672: 50 01    MOV   A,0x1
    0674: 7C 05 80 LCALL _LCD_Position
(0075) 	LCD_PrCString("                "); 	//should clear junk from LCD
    0677: 50 01    MOV   A,0x1
    0679: 08       PUSH  A
    067A: 50 B7    MOV   A,0xB7
    067C: 5C       MOV   X,A
    067D: 18       POP   A
    067E: 7C 03 FB LCALL _LCD_PrCString
(0076) 	
(0077) 	
(0078) 	
(0079) 	LCD_Position(1, 0);		
    0681: 57 00    MOV   X,0x0
    0683: 50 01    MOV   A,0x1
    0685: 7C 05 80 LCALL _LCD_Position
    0688: 20       POP   X
(0080) 	LCD_PrString(freq); //clears previous frequency
    0689: 10       PUSH  X
    068A: 52 00    MOV   A,[X+0]
    068C: 08       PUSH  A
    068D: 52 01    MOV   A,[X+1]
    068F: 5C       MOV   X,A
    0690: 18       POP   A
    0691: 7C 04 37 LCALL _LCD_PrString
    0694: 20       POP   X
(0081) 	
(0082) 	M8C_EnableIntMask(INT_MSK0,INT_MSK0_GPIO);
    0695: 43 E0 20 OR    REG[0xE0],0x20
(0083) 	//M8C_EnableIntMask(INT_MSK0,INT_MSK0_DBB10);
(0084) 	//DigBuf_EnableInt();
(0085) 
(0086)     M8C_EnableGInt;
    0698: 71 01    OR    F,0x1
(0087) 	DigBuf_EnableInt();
    069A: 10       PUSH  X
    069B: 7C 05 B2 LCALL _DigBuf_EnableInt
(0088)     DigBuf_Start();
    069E: 7C 05 BA LCALL _DigBuf_Start
    06A1: 20       POP   X
    06A2: 85 DE    JMP   0x0C81
(0089) 
(0090) 	while(1)
(0091) 	{
(0092) 	    
(0093) 		if(interupt)
    06A4: 62 D0 00 MOV   REG[0xD0],0x0
    06A7: 3C 39 00 CMP   [interupt],0x0
    06AA: A5 5C    JZ    0x0C07
(0094) 		{
(0095) 		    
(0096) 			interupt = FALSE;
    06AC: 55 39 00 MOV   [interupt],0x0
(0097) 			
(0098) 			A = OpEncA_MASK & OpEncA_Data_ADDR;
    06AF: 5D 04    MOV   A,REG[0x4]
    06B1: 21 08    AND   A,0x8
    06B3: 62 D0 00 MOV   REG[0xD0],0x0
    06B6: 53 2A    MOV   [A+1],A
    06B8: 50 00    MOV   A,0x0
    06BA: 21 00    AND   A,0x0
    06BC: 53 29    MOV   [A],A
(0099) 			B = OpEncB_MASK & OpEncB_Data_ADDR;
    06BE: 5D 04    MOV   A,REG[0x4]
    06C0: 21 20    AND   A,0x20
    06C2: 62 D0 00 MOV   REG[0xD0],0x0
    06C5: 53 34    MOV   [B+1],A
    06C7: 50 00    MOV   A,0x0
    06C9: 21 00    AND   A,0x0
    06CB: 53 33    MOV   [B],A
(0100) 			
(0101) 			B=B>>2;
    06CD: 68 33    ASR   [B]
    06CF: 6E 34    RRC   [B+1]
    06D1: 68 33    ASR   [B]
    06D3: 6E 34    RRC   [B+1]
(0102) 			
(0103) 		    if (Bp^A)//Clockwise turn 
    06D5: 62 D0 00 MOV   REG[0xD0],0x0
    06D8: 51 2E    MOV   A,[Bp+1]
    06DA: 62 D0 00 MOV   REG[0xD0],0x0
    06DD: 32 2A    XOR   A,[A+1]
    06DF: 62 D0 00 MOV   REG[0xD0],0x0
    06E2: 53 1B    MOV   [__r1],A
    06E4: 62 D0 00 MOV   REG[0xD0],0x0
    06E7: 51 2D    MOV   A,[Bp]
    06E9: 62 D0 00 MOV   REG[0xD0],0x0
    06EC: 32 29    XOR   A,[A]
    06EE: 62 D0 00 MOV   REG[0xD0],0x0
    06F1: 39 00    CMP   A,0x0
    06F3: B0 06    JNZ   0x06FA
    06F5: 3C 1B 00 CMP   [__r1],0x0
    06F8: A2 65    JZ    0x095E
(0104) 			{
(0105) 				if( OutputF >= (100/frequencyDivider)){
    06FA: 62 D0 00 MOV   REG[0xD0],0x0
    06FD: 51 37    MOV   A,[frequencyDivider]
    06FF: 08       PUSH  A
    0700: 51 38    MOV   A,[frequencyDivider+1]
    0702: 08       PUSH  A
    0703: 50 00    MOV   A,0x0
    0705: 08       PUSH  A
    0706: 50 64    MOV   A,0x64
    0708: 08       PUSH  A
    0709: 62 D0 00 MOV   REG[0xD0],0x0
    070C: 7C 0C AA LCALL 0x0CAA
    070F: 18       POP   A
    0710: 53 1B    MOV   [__r1],A
    0712: 18       POP   A
    0713: 53 1C    MOV   [__r0],A
    0715: 38 FE    ADD   SP,0xFE
    0717: 51 1B    MOV   A,[__r1]
    0719: 53 19    MOV   [__r3],A
    071B: 51 1C    MOV   A,[__r0]
    071D: 53 1A    MOV   [__r2],A
    071F: 47 1A 80 TST   [__r2],0x80
    0722: A0 09    JZ    0x072C
    0724: 55 1B FF MOV   [__r1],0xFF
    0727: 55 1C FF MOV   [__r0],0xFF
    072A: 80 0A    JMP   0x0735
    072C: 62 D0 00 MOV   REG[0xD0],0x0
    072F: 55 1B 00 MOV   [__r1],0x0
    0732: 55 1C 00 MOV   [__r0],0x0
    0735: 62 D0 00 MOV   REG[0xD0],0x0
    0738: 51 1C    MOV   A,[__r0]
    073A: 08       PUSH  A
    073B: 51 1B    MOV   A,[__r1]
    073D: 08       PUSH  A
    073E: 51 1A    MOV   A,[__r2]
    0740: 08       PUSH  A
    0741: 51 19    MOV   A,[__r3]
    0743: 08       PUSH  A
    0744: 7C 11 3A LCALL 0x113A
    0747: 18       POP   A
    0748: 53 19    MOV   [__r3],A
    074A: 18       POP   A
    074B: 53 1A    MOV   [__r2],A
    074D: 18       POP   A
    074E: 53 1B    MOV   [__r1],A
    0750: 18       POP   A
    0751: 08       PUSH  A
    0752: 51 1B    MOV   A,[__r1]
    0754: 08       PUSH  A
    0755: 51 1A    MOV   A,[__r2]
    0757: 08       PUSH  A
    0758: 51 19    MOV   A,[__r3]
    075A: 08       PUSH  A
    075B: 62 D0 00 MOV   REG[0xD0],0x0
    075E: 51 21    MOV   A,[OutputF]
    0760: 08       PUSH  A
    0761: 51 22    MOV   A,[OutputF+1]
    0763: 08       PUSH  A
    0764: 51 23    MOV   A,[OutputF+2]
    0766: 08       PUSH  A
    0767: 51 24    MOV   A,[OutputF+3]
    0769: 08       PUSH  A
    076A: 62 D0 00 MOV   REG[0xD0],0x0
    076D: 7C 0D FF LCALL 0x0DFF
    0770: 38 F8    ADD   SP,0xF8
    0772: 39 FF    CMP   A,0xFF
    0774: A1 E9    JZ    0x095E
(0106) 				
(0107) 				period += 200;
    0776: 62 D0 00 MOV   REG[0xD0],0x0
    0779: 06 26 C8 ADD   [period+1],0xC8
    077C: 0E 25 00 ADC   [period],0x0
(0108)                 compare = (period+1)/2;
    077F: 51 26    MOV   A,[period+1]
    0781: 01 01    ADD   A,0x1
    0783: 62 D0 00 MOV   REG[0xD0],0x0
    0786: 53 1B    MOV   [__r1],A
    0788: 62 D0 00 MOV   REG[0xD0],0x0
    078B: 51 25    MOV   A,[period]
    078D: 09 00    ADC   A,0x0
    078F: 62 D0 00 MOV   REG[0xD0],0x0
    0792: 53 1C    MOV   [__r0],A
    0794: 50 00    MOV   A,0x0
    0796: 08       PUSH  A
    0797: 50 02    MOV   A,0x2
    0799: 08       PUSH  A
    079A: 51 1C    MOV   A,[__r0]
    079C: 08       PUSH  A
    079D: 51 1B    MOV   A,[__r1]
    079F: 08       PUSH  A
    07A0: 7C 0C AA LCALL 0x0CAA
    07A3: 18       POP   A
    07A4: 62 D0 00 MOV   REG[0xD0],0x0
    07A7: 53 32    MOV   [compare+1],A
    07A9: 18       POP   A
    07AA: 53 31    MOV   [compare],A
    07AC: 38 FE    ADD   SP,0xFE
(0109) 				
(0110) 				//periodLog = log(period);
(0111) 				//compareLog =(periodLog+1)/2;
(0112) 				
(0113) 				Counter16_WritePeriod(period);
    07AE: 10       PUSH  X
    07AF: 62 D0 00 MOV   REG[0xD0],0x0
    07B2: 51 25    MOV   A,[period]
    07B4: 08       PUSH  A
    07B5: 51 26    MOV   A,[period+1]
    07B7: 20       POP   X
    07B8: 7C 05 D4 LCALL _Counter16_WritePeriod
(0114)                 Counter16_WriteCompareValue(compare); 
    07BB: 62 D0 00 MOV   REG[0xD0],0x0
    07BE: 51 31    MOV   A,[compare]
    07C0: 08       PUSH  A
    07C1: 51 32    MOV   A,[compare+1]
    07C3: 20       POP   X
    07C4: 7C 05 DA LCALL _Counter16_WriteCompareValue
    07C7: 20       POP   X
(0115) 				
(0116) 				
(0117) 				OutputF = ((100240/(1+period))*20)*errorOffset/frequencyDivider;
    07C8: 62 D0 00 MOV   REG[0xD0],0x0
FILE: C:\DOCUME~1\mtangy\Desktop\LAB4_P~1\LAB4_P~1\main.c
(0118) 				freq = ftoa(OutputF,&integerFreq);
    0905: 50 00    MOV   A,0x0
    0907: 08       PUSH  A
    0908: 50 27    MOV   A,0x27
    090A: 08       PUSH  A
    090B: 51 21    MOV   A,[OutputF]
    090D: 08       PUSH  A
    090E: 51 22    MOV   A,[OutputF+1]
    0910: 08       PUSH  A
    0911: 51 23    MOV   A,[OutputF+2]
    0913: 08       PUSH  A
    0914: 51 24    MOV   A,[OutputF+3]
    0916: 08       PUSH  A
    0917: 7C 14 A4 LCALL _ftoa
    091A: 38 FA    ADD   SP,0xFA
    091C: 62 D0 00 MOV   REG[0xD0],0x0
    091F: 51 1B    MOV   A,[__r1]
    0921: 54 01    MOV   [X+1],A
    0923: 51 1C    MOV   A,[__r0]
    0925: 54 00    MOV   [X+0],A
(0119) 			
(0120) 				
(0121) 				    LCD_Position(0, 0);	
    0927: 10       PUSH  X
    0928: 50 00    MOV   A,0x0
    092A: 57 00    MOV   X,0x0
    092C: 7C 05 80 LCALL _LCD_Position
(0122) 				    LCD_PrCString("Frequency(Hz):  "); //Initalizes frequency display 
    092F: 50 01    MOV   A,0x1
    0931: 08       PUSH  A
    0932: 50 A6    MOV   A,0xA6
    0934: 5C       MOV   X,A
    0935: 18       POP   A
    0936: 7C 03 FB LCALL _LCD_PrCString
(0123) 	
(0124) 					LCD_Position(1, 0);		
    0939: 57 00    MOV   X,0x0
    093B: 50 01    MOV   A,0x1
    093D: 7C 05 80 LCALL _LCD_Position
(0125) 					LCD_PrCString("                "); //clears previous frequency
    0940: 50 01    MOV   A,0x1
    0942: 08       PUSH  A
    0943: 50 B7    MOV   A,0xB7
    0945: 5C       MOV   X,A
    0946: 18       POP   A
    0947: 7C 03 FB LCALL _LCD_PrCString
(0126) 					
(0127) 				    LCD_Position(1, 0);		
    094A: 57 00    MOV   X,0x0
    094C: 50 01    MOV   A,0x1
    094E: 7C 05 80 LCALL _LCD_Position
    0951: 20       POP   X
(0128) 					LCD_PrString(freq); //displays new frequency 
    0952: 10       PUSH  X
    0953: 52 00    MOV   A,[X+0]
    0955: 08       PUSH  A
    0956: 52 01    MOV   A,[X+1]
    0958: 5C       MOV   X,A
    0959: 18       POP   A
    095A: 7C 04 37 LCALL _LCD_PrString
    095D: 20       POP   X
(0129) 					
(0130) 				
(0131) 				
(0132) 				//itoa(freq, integerFreq, 10);
(0133) 				}
(0134) 					
(0135) 			}
(0136) 			
(0137) 			 if(!(Bp^A)) //Counterclockwise Turn
    095E: 62 D0 00 MOV   REG[0xD0],0x0
    0961: 51 2E    MOV   A,[Bp+1]
    0963: 62 D0 00 MOV   REG[0xD0],0x0
    0966: 32 2A    XOR   A,[A+1]
    0968: 62 D0 00 MOV   REG[0xD0],0x0
    096B: 53 1B    MOV   [__r1],A
    096D: 62 D0 00 MOV   REG[0xD0],0x0
    0970: 51 2D    MOV   A,[Bp]
    0972: 62 D0 00 MOV   REG[0xD0],0x0
    0975: 32 29    XOR   A,[A]
    0977: 62 D0 00 MOV   REG[0xD0],0x0
    097A: 39 00    CMP   A,0x0
    097C: B2 6A    JNZ   0x0BE7
    097E: 3C 1B 00 CMP   [__r1],0x0
    0981: B2 65    JNZ   0x0BE7
(0138) 			{
(0139) 				if(OutputF <= (10000/frequencyDivider) ){
    0983: 62 D0 00 MOV   REG[0xD0],0x0
    0986: 51 37    MOV   A,[frequencyDivider]
    0988: 08       PUSH  A
    0989: 51 38    MOV   A,[frequencyDivider+1]
    098B: 08       PUSH  A
    098C: 50 27    MOV   A,0x27
    098E: 08       PUSH  A
    098F: 50 10    MOV   A,0x10
    0991: 08       PUSH  A
    0992: 62 D0 00 MOV   REG[0xD0],0x0
    0995: 7C 0C AA LCALL 0x0CAA
    0998: 18       POP   A
    0999: 53 1B    MOV   [__r1],A
    099B: 18       POP   A
    099C: 53 1C    MOV   [__r0],A
    099E: 38 FE    ADD   SP,0xFE
    09A0: 51 1B    MOV   A,[__r1]
    09A2: 53 19    MOV   [__r3],A
    09A4: 51 1C    MOV   A,[__r0]
    09A6: 53 1A    MOV   [__r2],A
    09A8: 47 1A 80 TST   [__r2],0x80
    09AB: A0 09    JZ    0x09B5
    09AD: 55 1B FF MOV   [__r1],0xFF
    09B0: 55 1C FF MOV   [__r0],0xFF
    09B3: 80 0A    JMP   0x09BE
    09B5: 62 D0 00 MOV   REG[0xD0],0x0
    09B8: 55 1B 00 MOV   [__r1],0x0
    09BB: 55 1C 00 MOV   [__r0],0x0
    09BE: 62 D0 00 MOV   REG[0xD0],0x0
    09C1: 51 1C    MOV   A,[__r0]
    09C3: 08       PUSH  A
    09C4: 51 1B    MOV   A,[__r1]
    09C6: 08       PUSH  A
    09C7: 51 1A    MOV   A,[__r2]
    09C9: 08       PUSH  A
    09CA: 51 19    MOV   A,[__r3]
    09CC: 08       PUSH  A
    09CD: 7C 11 3A LCALL 0x113A
    09D0: 18       POP   A
    09D1: 53 19    MOV   [__r3],A
    09D3: 18       POP   A
    09D4: 53 1A    MOV   [__r2],A
    09D6: 18       POP   A
    09D7: 53 1B    MOV   [__r1],A
    09D9: 18       POP   A
    09DA: 08       PUSH  A
    09DB: 51 1B    MOV   A,[__r1]
    09DD: 08       PUSH  A
    09DE: 51 1A    MOV   A,[__r2]
    09E0: 08       PUSH  A
    09E1: 51 19    MOV   A,[__r3]
    09E3: 08       PUSH  A
    09E4: 62 D0 00 MOV   REG[0xD0],0x0
    09E7: 51 21    MOV   A,[OutputF]
    09E9: 08       PUSH  A
    09EA: 51 22    MOV   A,[OutputF+1]
    09EC: 08       PUSH  A
    09ED: 51 23    MOV   A,[OutputF+2]
    09EF: 08       PUSH  A
    09F0: 51 24    MOV   A,[OutputF+3]
    09F2: 08       PUSH  A
    09F3: 62 D0 00 MOV   REG[0xD0],0x0
    09F6: 7C 0D FF LCALL 0x0DFF
    09F9: 38 F8    ADD   SP,0xF8
    09FB: 39 01    CMP   A,0x1
    09FD: A1 E9    JZ    0x0BE7
(0140) 				
(0141) 				
(0142) 				period -= 200;
    09FF: 62 D0 00 MOV   REG[0xD0],0x0
    0A02: 16 26 C8 SUB   [period+1],0xC8
    0A05: 1E 25 00 SBB   [period],0x0
(0143)                 compare = (period+1)/2;
    0A08: 51 26    MOV   A,[period+1]
    0A0A: 01 01    ADD   A,0x1
    0A0C: 62 D0 00 MOV   REG[0xD0],0x0
    0A0F: 53 1B    MOV   [__r1],A
    0A11: 62 D0 00 MOV   REG[0xD0],0x0
    0A14: 51 25    MOV   A,[period]
    0A16: 09 00    ADC   A,0x0
    0A18: 62 D0 00 MOV   REG[0xD0],0x0
    0A1B: 53 1C    MOV   [__r0],A
    0A1D: 50 00    MOV   A,0x0
    0A1F: 08       PUSH  A
    0A20: 50 02    MOV   A,0x2
    0A22: 08       PUSH  A
    0A23: 51 1C    MOV   A,[__r0]
    0A25: 08       PUSH  A
    0A26: 51 1B    MOV   A,[__r1]
    0A28: 08       PUSH  A
    0A29: 7C 0C AA LCALL 0x0CAA
    0A2C: 18       POP   A
    0A2D: 62 D0 00 MOV   REG[0xD0],0x0
    0A30: 53 32    MOV   [compare+1],A
    0A32: 18       POP   A
    0A33: 53 31    MOV   [compare],A
    0A35: 38 FE    ADD   SP,0xFE
(0144) 				
(0145) 				//periodLog = log(period);
(0146) 				//compareLog = log(compare);
(0147)                 Counter16_WritePeriod(period);
    0A37: 10       PUSH  X
    0A38: 62 D0 00 MOV   REG[0xD0],0x0
    0A3B: 51 25    MOV   A,[period]
    0A3D: 08       PUSH  A
    0A3E: 51 26    MOV   A,[period+1]
    0A40: 20       POP   X
    0A41: 7C 05 D4 LCALL _Counter16_WritePeriod
(0148)                 Counter16_WriteCompareValue(compare); 
    0A44: 62 D0 00 MOV   REG[0xD0],0x0
    0A47: 51 31    MOV   A,[compare]
    0A49: 08       PUSH  A
    0A4A: 51 32    MOV   A,[compare+1]
    0A4C: 20       POP   X
    0A4D: 7C 05 DA LCALL _Counter16_WriteCompareValue
    0A50: 20       POP   X
(0149) 				
(0150) 				    OutputF = ((100240/(1+period))*20)*errorOffset/frequencyDivider;
    0A51: 62 D0 00 MOV   REG[0xD0],0x0
FILE: C:\DOCUME~1\mtangy\Desktop\LAB4_P~1\LAB4_P~1\main.c
(0151) 					freq = ftoa(OutputF,&integerFreq);
    0B8E: 50 00    MOV   A,0x0
    0B90: 08       PUSH  A
    0B91: 50 27    MOV   A,0x27
    0B93: 08       PUSH  A
    0B94: 51 21    MOV   A,[OutputF]
    0B96: 08       PUSH  A
    0B97: 51 22    MOV   A,[OutputF+1]
    0B99: 08       PUSH  A
    0B9A: 51 23    MOV   A,[OutputF+2]
    0B9C: 08       PUSH  A
    0B9D: 51 24    MOV   A,[OutputF+3]
    0B9F: 08       PUSH  A
    0BA0: 7C 14 A4 LCALL _ftoa
    0BA3: 38 FA    ADD   SP,0xFA
    0BA5: 62 D0 00 MOV   REG[0xD0],0x0
    0BA8: 51 1B    MOV   A,[__r1]
    0BAA: 54 01    MOV   [X+1],A
    0BAC: 51 1C    MOV   A,[__r0]
    0BAE: 54 00    MOV   [X+0],A
(0152) 				
(0153) 				
(0154) 					//itoa(freq, integerFreq, 10);
(0155) 					LCD_Position(0, 0);	
    0BB0: 10       PUSH  X
    0BB1: 50 00    MOV   A,0x0
    0BB3: 57 00    MOV   X,0x0
    0BB5: 7C 05 80 LCALL _LCD_Position
(0156) 					LCD_PrCString("Frequency(Hz):  "); //Initalizes frequency display 
    0BB8: 50 01    MOV   A,0x1
    0BBA: 08       PUSH  A
    0BBB: 50 A6    MOV   A,0xA6
    0BBD: 5C       MOV   X,A
    0BBE: 18       POP   A
    0BBF: 7C 03 FB LCALL _LCD_PrCString
(0157) 	
(0158) 				
(0159) 				    LCD_Position(1, 0);		
    0BC2: 57 00    MOV   X,0x0
    0BC4: 50 01    MOV   A,0x1
    0BC6: 7C 05 80 LCALL _LCD_Position
(0160) 					LCD_PrCString("                "); //clears previous frequency 
    0BC9: 50 01    MOV   A,0x1
    0BCB: 08       PUSH  A
    0BCC: 50 B7    MOV   A,0xB7
    0BCE: 5C       MOV   X,A
    0BCF: 18       POP   A
    0BD0: 7C 03 FB LCALL _LCD_PrCString
(0161) 				    LCD_Position(1, 0);		
    0BD3: 57 00    MOV   X,0x0
    0BD5: 50 01    MOV   A,0x1
    0BD7: 7C 05 80 LCALL _LCD_Position
    0BDA: 20       POP   X
(0162) 					LCD_PrString(freq); //displays new frequency 
    0BDB: 10       PUSH  X
    0BDC: 52 00    MOV   A,[X+0]
    0BDE: 08       PUSH  A
    0BDF: 52 01    MOV   A,[X+1]
    0BE1: 5C       MOV   X,A
    0BE2: 18       POP   A
    0BE3: 7C 04 37 LCALL _LCD_PrString
    0BE6: 20       POP   X
(0163) 				}
(0164) 			}
(0165) 			Ap = A;  //Stores current data to Ap and Bp for next cycle
    0BE7: 62 D0 00 MOV   REG[0xD0],0x0
    0BEA: 51 2A    MOV   A,[A+1]
    0BEC: 08       PUSH  A
    0BED: 51 29    MOV   A,[A]
    0BEF: 62 D0 00 MOV   REG[0xD0],0x0
    0BF2: 53 2B    MOV   [Ap],A
    0BF4: 18       POP   A
    0BF5: 53 2C    MOV   [Ap+1],A
(0166) 			Bp = B; 
    0BF7: 62 D0 00 MOV   REG[0xD0],0x0
    0BFA: 51 34    MOV   A,[B+1]
    0BFC: 08       PUSH  A
    0BFD: 51 33    MOV   A,[B]
    0BFF: 62 D0 00 MOV   REG[0xD0],0x0
    0C02: 53 2D    MOV   [Bp],A
    0C04: 18       POP   A
    0C05: 53 2E    MOV   [Bp+1],A
(0167) 				
(0168) 		}
(0169) 		
(0170) 		if (BP_Interupt){
    0C07: 62 D0 00 MOV   REG[0xD0],0x0
    0C0A: 3C 3B 00 CMP   [BP_Interupt],0x0
    0C0D: A0 73    JZ    0x0C81
(0171) 			
(0172) 		BP_Interupt = FALSE;	
    0C0F: 55 3B 00 MOV   [BP_Interupt],0x0
(0173) 		LCD_Position(1, 0);		
    0C12: 10       PUSH  X
    0C13: 57 00    MOV   X,0x0
    0C15: 50 01    MOV   A,0x1
    0C17: 7C 05 80 LCALL _LCD_Position
(0174) 		LCD_PrCString("                "); 
    0C1A: 50 01    MOV   A,0x1
    0C1C: 08       PUSH  A
    0C1D: 50 B7    MOV   A,0xB7
    0C1F: 5C       MOV   X,A
    0C20: 18       POP   A
    0C21: 7C 03 FB LCALL _LCD_PrCString
    0C24: 20       POP   X
(0175) 		//LCD_Position(1, 0);		
(0176) 		//LCD_PrCString("BP Int active");
(0177) 		
(0178) 		if (!freqFlag){
    0C25: 62 D0 00 MOV   REG[0xD0],0x0
    0C28: 3C 3A 00 CMP   [freqFlag],0x0
    0C2B: B0 2C    JNZ   0x0C58
(0179) 			
(0180) 			frequencyDivider = 10;
    0C2D: 62 D0 00 MOV   REG[0xD0],0x0
    0C30: 55 38 0A MOV   [frequencyDivider+1],0xA
    0C33: 55 37 00 MOV   [frequencyDivider],0x0
(0181) 			OSC_CR3 = 0x1d;
    0C36: 71 10    OR    F,0x10
    0C38: 62 DF 1D MOV   REG[0xDF],0x1D
(0182) 			LCD_Position(1, 0);		
    0C3B: 10       PUSH  X
    0C3C: 57 00    MOV   X,0x0
    0C3E: 50 01    MOV   A,0x1
    0C40: 70 CF    AND   F,0xCF
    0C42: 7C 05 80 LCALL _LCD_Position
(0183) 		    LCD_PrCString("10"); 
    0C45: 50 01    MOV   A,0x1
    0C47: 08       PUSH  A
    0C48: 50 A3    MOV   A,0xA3
    0C4A: 5C       MOV   X,A
    0C4B: 18       POP   A
    0C4C: 7C 03 FB LCALL _LCD_PrCString
    0C4F: 20       POP   X
(0184) 			freqFlag = TRUE;
    0C50: 62 D0 00 MOV   REG[0xD0],0x0
    0C53: 55 3A 01 MOV   [freqFlag],0x1
(0185) 		}
    0C56: 80 2A    JMP   0x0C81
(0186) 		else {
(0187) 				
(0188) 			frequencyDivider = 1;
    0C58: 62 D0 00 MOV   REG[0xD0],0x0
    0C5B: 55 38 01 MOV   [frequencyDivider+1],0x1
    0C5E: 55 37 00 MOV   [frequencyDivider],0x0
(0189) 			OSC_CR3 = 0x02;
    0C61: 71 10    OR    F,0x10
    0C63: 62 DF 02 MOV   REG[0xDF],0x2
(0190) 			LCD_Position(1, 0);		
    0C66: 10       PUSH  X
    0C67: 57 00    MOV   X,0x0
    0C69: 50 01    MOV   A,0x1
    0C6B: 70 CF    AND   F,0xCF
    0C6D: 7C 05 80 LCALL _LCD_Position
(0191) 		    LCD_PrCString("11"); 
    0C70: 50 01    MOV   A,0x1
    0C72: 08       PUSH  A
    0C73: 50 A0    MOV   A,0xA0
    0C75: 5C       MOV   X,A
    0C76: 18       POP   A
    0C77: 7C 03 FB LCALL _LCD_PrCString
    0C7A: 20       POP   X
(0192) 		    freqFlag = FALSE;
    0C7B: 62 D0 00 MOV   REG[0xD0],0x0
    0C7E: 55 3A 00 MOV   [freqFlag],0x0
(0193) 		}
(0194) 			
(0195) //		if (OSC_CR3 = 0x02)
(0196) //		{
(0197) //		OSC_CR3 = 0x1d;	
(0198) //		}
(0199) //		else if (OSC_CR3 = 0x1d)
(0200) //		{OSC_CR3 = 0x02;}	
(0201) 			
(0202) 			
(0203) 		}
(0204) 		
(0205) 		
(0206) 		
(0207) 	}
    0C81: 8A 22    JMP   0x06A4
    0C83: 38 FE    ADD   SP,0xFE
    0C85: 20       POP   X
    0C86: 8F FF    JMP   0x0C86
(0208) 
(0209) }
(0210) void PSoC_GPIO_ISR_C(void){
_PSoC_GPIO_ISR_C:
    0C88: 71 C0    OR    F,0xC0
    0C8A: 08       PUSH  A
    0C8B: 5D D0    MOV   A,REG[0xD0]
    0C8D: 08       PUSH  A
(0211) 	
(0212) 	interupt = TRUE;
    0C8E: 62 D0 00 MOV   REG[0xD0],0x0
    0C91: 55 39 01 MOV   [interupt],0x1
    0C94: 18       POP   A
    0C95: 60 D0    MOV   REG[0xD0],A
    0C97: 18       POP   A
    0C98: 7E       RETI  
(0213) 	
(0214) 	
(0215) 	}
(0216) 
(0217) 
(0218) 
(0219) void DigBuf_ISR(void){
_DigBuf_ISR:
    0C99: 71 C0    OR    F,0xC0
    0C9B: 08       PUSH  A
    0C9C: 5D D0    MOV   A,REG[0xD0]
    0C9E: 08       PUSH  A
(0220) 	
(0221) 	BP_Interupt = TRUE;
    0C9F: 62 D0 00 MOV   REG[0xD0],0x0
(0222) 	
(0223) }
(0224)  
    0CA2: 55 3B 01 MOV   [BP_Interupt],0x1
    0CA5: 18       POP   A
    0CA6: 60 D0    MOV   REG[0xD0],A
    0CA8: 18       POP   A
    0CA9: 7E       RETI  
_ltoa:
    122B: 10       PUSH  X
    122C: 4F       MOV   X,SP
    122D: 38 0B    ADD   SP,0xB
    122F: 52 F7    MOV   A,[X-9]
    1231: 54 02    MOV   [X+2],A
    1233: 52 F8    MOV   A,[X-8]
    1235: 54 03    MOV   [X+3],A
    1237: 52 F9    MOV   A,[X-7]
    1239: 54 04    MOV   [X+4],A
    123B: 52 FA    MOV   A,[X-6]
    123D: 54 05    MOV   [X+5],A
    123F: 3D F7 00 CMP   [X-9],0x0
    1242: B0 39    JNZ   0x127C
    1244: 3D F8 00 CMP   [X-8],0x0
    1247: B0 34    JNZ   0x127C
    1249: 3D F9 00 CMP   [X-7],0x0
    124C: B0 2F    JNZ   0x127C
    124E: 3D FA 00 CMP   [X-6],0x0
    1251: B0 2A    JNZ   0x127C
    1253: 62 D0 00 MOV   REG[0xD0],0x0
    1256: 52 FC    MOV   A,[X-4]
    1258: 53 1B    MOV   [__r1],A
    125A: 52 FB    MOV   A,[X-5]
    125C: 60 D5    MOV   REG[0xD5],A
    125E: 50 30    MOV   A,0x30
    1260: 3F 1B    MVI   [__r1],A
    1262: 52 FC    MOV   A,[X-4]
    1264: 01 01    ADD   A,0x1
    1266: 53 1B    MOV   [__r1],A
    1268: 52 FB    MOV   A,[X-5]
    126A: 09 00    ADC   A,0x0
    126C: 60 D5    MOV   REG[0xD5],A
    126E: 50 00    MOV   A,0x0
    1270: 3F 1B    MVI   [__r1],A
    1272: 52 FC    MOV   A,[X-4]
    1274: 53 1B    MOV   [__r1],A
    1276: 52 FB    MOV   A,[X-5]
    1278: 53 1C    MOV   [__r0],A
    127A: 82 25    JMP   0x14A0
    127C: 52 FA    MOV   A,[X-6]
    127E: 11 00    SUB   A,0x0
    1280: 52 F9    MOV   A,[X-7]
    1282: 19 00    SBB   A,0x0
    1284: 52 F8    MOV   A,[X-8]
    1286: 19 00    SBB   A,0x0
    1288: 52 F7    MOV   A,[X-9]
    128A: 31 80    XOR   A,0x80
    128C: 19 80    SBB   A,0x80
    128E: D0 3B    JNC   0x12CA
    1290: 3D F5 00 CMP   [X-11],0x0
    1293: B0 36    JNZ   0x12CA
    1295: 3D F6 0A CMP   [X-10],0xA
    1298: B0 31    JNZ   0x12CA
    129A: 56 08 01 MOV   [X+8],0x1
    129D: 62 D0 00 MOV   REG[0xD0],0x0
    12A0: 52 02    MOV   A,[X+2]
    12A2: 73       CPL   A
    12A3: 53 1C    MOV   [__r0],A
    12A5: 52 03    MOV   A,[X+3]
    12A7: 73       CPL   A
    12A8: 53 1B    MOV   [__r1],A
    12AA: 52 04    MOV   A,[X+4]
    12AC: 73       CPL   A
    12AD: 53 1A    MOV   [__r2],A
    12AF: 52 05    MOV   A,[X+5]
    12B1: 73       CPL   A
    12B2: 01 01    ADD   A,0x1
    12B4: 54 05    MOV   [X+5],A
    12B6: 51 1A    MOV   A,[__r2]
    12B8: 09 00    ADC   A,0x0
    12BA: 54 04    MOV   [X+4],A
    12BC: 51 1B    MOV   A,[__r1]
    12BE: 09 00    ADC   A,0x0
    12C0: 54 03    MOV   [X+3],A
    12C2: 51 1C    MOV   A,[__r0]
    12C4: 09 00    ADC   A,0x0
    12C6: 54 02    MOV   [X+2],A
    12C8: 80 04    JMP   0x12CD
    12CA: 56 08 00 MOV   [X+8],0x0
    12CD: 52 FC    MOV   A,[X-4]
    12CF: 54 01    MOV   [X+1],A
    12D1: 52 FB    MOV   A,[X-5]
    12D3: 54 00    MOV   [X+0],A
    12D5: 62 D0 00 MOV   REG[0xD0],0x0
    12D8: 52 F6    MOV   A,[X-10]
    12DA: 53 19    MOV   [__r3],A
    12DC: 52 F5    MOV   A,[X-11]
    12DE: 53 1A    MOV   [__r2],A
    12E0: 47 1A 80 TST   [__r2],0x80
    12E3: A0 09    JZ    0x12ED
    12E5: 55 1B FF MOV   [__r1],0xFF
    12E8: 55 1C FF MOV   [__r0],0xFF
    12EB: 80 0A    JMP   0x12F6
    12ED: 62 D0 00 MOV   REG[0xD0],0x0
    12F0: 55 1B 00 MOV   [__r1],0x0
    12F3: 55 1C 00 MOV   [__r0],0x0
    12F6: 62 D0 00 MOV   REG[0xD0],0x0
    12F9: 51 1C    MOV   A,[__r0]
    12FB: 08       PUSH  A
    12FC: 51 1B    MOV   A,[__r1]
    12FE: 08       PUSH  A
    12FF: 51 1A    MOV   A,[__r2]
    1301: 08       PUSH  A
    1302: 51 19    MOV   A,[__r3]
    1304: 08       PUSH  A
    1305: 52 02    MOV   A,[X+2]
    1307: 08       PUSH  A
    1308: 52 03    MOV   A,[X+3]
    130A: 08       PUSH  A
    130B: 52 04    MOV   A,[X+4]
    130D: 08       PUSH  A
    130E: 52 05    MOV   A,[X+5]
    1310: 08       PUSH  A
    1311: 7C 0D 35 LCALL 0x0D35
    1314: 38 FC    ADD   SP,0xFC
    1316: 18       POP   A
    1317: 53 19    MOV   [__r3],A
    1319: 18       POP   A
    131A: 53 1A    MOV   [__r2],A
    131C: 18       POP   A
    131D: 18       POP   A
    131E: 51 19    MOV   A,[__r3]
    1320: 53 1B    MOV   [__r1],A
    1322: 51 1A    MOV   A,[__r2]
    1324: 53 1C    MOV   [__r0],A
    1326: 51 1B    MOV   A,[__r1]
    1328: 54 0A    MOV   [X+10],A
    132A: 51 1C    MOV   A,[__r0]
    132C: 54 09    MOV   [X+9],A
    132E: 50 09    MOV   A,0x9
    1330: 13 0A    SUB   A,[X+10]
    1332: 52 09    MOV   A,[X+9]
    1334: 31 80    XOR   A,0x80
    1336: 53 14    MOV   [__rX],A
    1338: 50 80    MOV   A,0x80
    133A: 1A 14    SBB   A,[__rX]
    133C: C0 28    JC    0x1365
    133E: 62 D0 00 MOV   REG[0xD0],0x0
    1341: 52 01    MOV   A,[X+1]
    1343: 53 1B    MOV   [__r1],A
    1345: 52 00    MOV   A,[X+0]
    1347: 53 1C    MOV   [__r0],A
    1349: 51 1B    MOV   A,[__r1]
    134B: 01 01    ADD   A,0x1
    134D: 54 01    MOV   [X+1],A
    134F: 51 1C    MOV   A,[__r0]
    1351: 09 00    ADC   A,0x0
    1353: 54 00    MOV   [X+0],A
    1355: 52 0A    MOV   A,[X+10]
    1357: 01 30    ADD   A,0x30
    1359: 53 1A    MOV   [__r2],A
    135B: 51 1C    MOV   A,[__r0]
    135D: 60 D5    MOV   REG[0xD5],A
    135F: 51 1A    MOV   A,[__r2]
    1361: 3F 1B    MVI   [__r1],A
    1363: 80 26    JMP   0x138A
    1365: 62 D0 00 MOV   REG[0xD0],0x0
    1368: 52 01    MOV   A,[X+1]
    136A: 53 1B    MOV   [__r1],A
    136C: 52 00    MOV   A,[X+0]
    136E: 53 1C    MOV   [__r0],A
    1370: 51 1B    MOV   A,[__r1]
    1372: 01 01    ADD   A,0x1
    1374: 54 01    MOV   [X+1],A
    1376: 51 1C    MOV   A,[__r0]
    1378: 09 00    ADC   A,0x0
    137A: 54 00    MOV   [X+0],A
    137C: 52 0A    MOV   A,[X+10]
    137E: 01 57    ADD   A,0x57
    1380: 53 1A    MOV   [__r2],A
    1382: 51 1C    MOV   A,[__r0]
    1384: 60 D5    MOV   REG[0xD5],A
    1386: 51 1A    MOV   A,[__r2]
    1388: 3F 1B    MVI   [__r1],A
    138A: 62 D0 00 MOV   REG[0xD0],0x0
    138D: 52 F6    MOV   A,[X-10]
    138F: 53 19    MOV   [__r3],A
    1391: 52 F5    MOV   A,[X-11]
    1393: 53 1A    MOV   [__r2],A
    1395: 47 1A 80 TST   [__r2],0x80
    1398: A0 09    JZ    0x13A2
    139A: 55 1B FF MOV   [__r1],0xFF
    139D: 55 1C FF MOV   [__r0],0xFF
    13A0: 80 0A    JMP   0x13AB
    13A2: 62 D0 00 MOV   REG[0xD0],0x0
    13A5: 55 1B 00 MOV   [__r1],0x0
    13A8: 55 1C 00 MOV   [__r0],0x0
    13AB: 62 D0 00 MOV   REG[0xD0],0x0
    13AE: 51 1C    MOV   A,[__r0]
    13B0: 08       PUSH  A
    13B1: 51 1B    MOV   A,[__r1]
    13B3: 08       PUSH  A
    13B4: 51 1A    MOV   A,[__r2]
    13B6: 08       PUSH  A
    13B7: 51 19    MOV   A,[__r3]
    13B9: 08       PUSH  A
    13BA: 52 02    MOV   A,[X+2]
    13BC: 08       PUSH  A
    13BD: 52 03    MOV   A,[X+3]
    13BF: 08       PUSH  A
    13C0: 52 04    MOV   A,[X+4]
    13C2: 08       PUSH  A
    13C3: 52 05    MOV   A,[X+5]
    13C5: 08       PUSH  A
    13C6: 7C 0D 35 LCALL 0x0D35
    13C9: 18       POP   A
    13CA: 54 05    MOV   [X+5],A
    13CC: 18       POP   A
    13CD: 54 04    MOV   [X+4],A
    13CF: 18       POP   A
    13D0: 54 03    MOV   [X+3],A
    13D2: 18       POP   A
    13D3: 54 02    MOV   [X+2],A
    13D5: 38 FC    ADD   SP,0xFC
    13D7: 3D 02 00 CMP   [X+2],0x0
    13DA: BE FA    JNZ   0x12D5
    13DC: 3D 03 00 CMP   [X+3],0x0
    13DF: BE F5    JNZ   0x12D5
    13E1: 3D 04 00 CMP   [X+4],0x0
    13E4: BE F0    JNZ   0x12D5
    13E6: 3D 05 00 CMP   [X+5],0x0
    13E9: BE EB    JNZ   0x12D5
    13EB: 3D 08 00 CMP   [X+8],0x0
    13EE: A0 20    JZ    0x140F
    13F0: 62 D0 00 MOV   REG[0xD0],0x0
    13F3: 52 01    MOV   A,[X+1]
    13F5: 53 1B    MOV   [__r1],A
    13F7: 52 00    MOV   A,[X+0]
    13F9: 53 1C    MOV   [__r0],A
    13FB: 51 1B    MOV   A,[__r1]
    13FD: 01 01    ADD   A,0x1
    13FF: 54 01    MOV   [X+1],A
    1401: 51 1C    MOV   A,[__r0]
    1403: 09 00    ADC   A,0x0
    1405: 54 00    MOV   [X+0],A
    1407: 51 1C    MOV   A,[__r0]
    1409: 60 D5    MOV   REG[0xD5],A
    140B: 50 2D    MOV   A,0x2D
    140D: 3F 1B    MVI   [__r1],A
    140F: 62 D0 00 MOV   REG[0xD0],0x0
    1412: 52 01    MOV   A,[X+1]
    1414: 53 1B    MOV   [__r1],A
    1416: 52 00    MOV   A,[X+0]
    1418: 53 1C    MOV   [__r0],A
    141A: 51 1B    MOV   A,[__r1]
    141C: 01 FF    ADD   A,0xFF
    141E: 54 01    MOV   [X+1],A
    1420: 51 1C    MOV   A,[__r0]
    1422: 09 FF    ADC   A,0xFF
    1424: 54 00    MOV   [X+0],A
    1426: 51 1C    MOV   A,[__r0]
    1428: 60 D5    MOV   REG[0xD5],A
    142A: 50 00    MOV   A,0x0
    142C: 3F 1B    MVI   [__r1],A
    142E: 52 FC    MOV   A,[X-4]
    1430: 54 07    MOV   [X+7],A
    1432: 52 FB    MOV   A,[X-5]
    1434: 54 06    MOV   [X+6],A
    1436: 80 54    JMP   0x148B
    1438: 62 D0 00 MOV   REG[0xD0],0x0
    143B: 52 07    MOV   A,[X+7]
    143D: 53 1B    MOV   [__r1],A
    143F: 52 06    MOV   A,[X+6]
    1441: 60 D4    MOV   REG[0xD4],A
    1443: 3E 1B    MVI   A,[__r1]
    1445: 54 08    MOV   [X+8],A
    1447: 52 07    MOV   A,[X+7]
    1449: 53 1B    MOV   [__r1],A
    144B: 52 06    MOV   A,[X+6]
    144D: 53 1C    MOV   [__r0],A
    144F: 51 1B    MOV   A,[__r1]
    1451: 01 01    ADD   A,0x1
    1453: 54 07    MOV   [X+7],A
    1455: 51 1C    MOV   A,[__r0]
    1457: 09 00    ADC   A,0x0
    1459: 54 06    MOV   [X+6],A
    145B: 52 01    MOV   A,[X+1]
    145D: 53 19    MOV   [__r3],A
    145F: 52 00    MOV   A,[X+0]
    1461: 60 D4    MOV   REG[0xD4],A
    1463: 3E 19    MVI   A,[__r3]
    1465: 53 1A    MOV   [__r2],A
    1467: 51 1C    MOV   A,[__r0]
    1469: 60 D5    MOV   REG[0xD5],A
    146B: 51 1A    MOV   A,[__r2]
    146D: 3F 1B    MVI   [__r1],A
    146F: 52 01    MOV   A,[X+1]
    1471: 53 1B    MOV   [__r1],A
    1473: 52 00    MOV   A,[X+0]
    1475: 53 1C    MOV   [__r0],A
    1477: 51 1B    MOV   A,[__r1]
    1479: 01 FF    ADD   A,0xFF
    147B: 54 01    MOV   [X+1],A
    147D: 51 1C    MOV   A,[__r0]
    147F: 09 FF    ADC   A,0xFF
    1481: 54 00    MOV   [X+0],A
    1483: 51 1C    MOV   A,[__r0]
    1485: 60 D5    MOV   REG[0xD5],A
    1487: 52 08    MOV   A,[X+8]
    1489: 3F 1B    MVI   [__r1],A
    148B: 52 07    MOV   A,[X+7]
    148D: 13 01    SUB   A,[X+1]
    148F: 52 06    MOV   A,[X+6]
    1491: 1B 00    SBB   A,[X+0]
    1493: CF A4    JC    0x1438
    1495: 62 D0 00 MOV   REG[0xD0],0x0
    1498: 52 FC    MOV   A,[X-4]
    149A: 53 1B    MOV   [__r1],A
    149C: 52 FB    MOV   A,[X-5]
    149E: 53 1C    MOV   [__r0],A
    14A0: 38 F5    ADD   SP,0xF5
    14A2: 20       POP   X
    14A3: 7F       RET   
_ftoa:
    14A4: 10       PUSH  X
    14A5: 4F       MOV   X,SP
    14A6: 38 16    ADD   SP,0x16
    14A8: 62 D0 00 MOV   REG[0xD0],0x0
    14AB: 52 F8    MOV   A,[X-8]
    14AD: 53 1B    MOV   [__r1],A
    14AF: 52 F7    MOV   A,[X-9]
    14B1: 60 D5    MOV   REG[0xD5],A
    14B3: 50 00    MOV   A,0x0
    14B5: 3F 1B    MVI   [__r1],A
    14B7: 3F 1B    MVI   [__r1],A
    14B9: 08       PUSH  A
    14BA: 08       PUSH  A
    14BB: 08       PUSH  A
    14BC: 08       PUSH  A
    14BD: 52 F9    MOV   A,[X-7]
    14BF: 08       PUSH  A
    14C0: 52 FA    MOV   A,[X-6]
    14C2: 08       PUSH  A
    14C3: 52 FB    MOV   A,[X-5]
    14C5: 08       PUSH  A
    14C6: 52 FC    MOV   A,[X-4]
    14C8: 08       PUSH  A
    14C9: 7C 0D FF LCALL 0x0DFF
    14CC: 38 F8    ADD   SP,0xF8
    14CE: 39 00    CMP   A,0x0
    14D0: B0 1B    JNZ   0x14EC
    14D2: 62 D0 00 MOV   REG[0xD0],0x0
    14D5: 55 03 30 MOV   [0x3],0x30
    14D8: 55 04 2E MOV   [0x4],0x2E
    14DB: 55 05 30 MOV   [0x5],0x30
    14DE: 55 06 00 MOV   [0x6],0x0
    14E1: 62 D0 00 MOV   REG[0xD0],0x0
    14E4: 55 1B 03 MOV   [__r1],0x3
    14E7: 55 1C 00 MOV   [__r0],0x0
    14EA: 84 04    JMP   0x18EF
    14EC: 52 F9    MOV   A,[X-7]
    14EE: 54 06    MOV   [X+6],A
    14F0: 52 FA    MOV   A,[X-6]
    14F2: 54 07    MOV   [X+7],A
    14F4: 52 FB    MOV   A,[X-5]
    14F6: 54 08    MOV   [X+8],A
    14F8: 52 FC    MOV   A,[X-4]
    14FA: 54 09    MOV   [X+9],A
    14FC: 62 D0 00 MOV   REG[0xD0],0x0
    14FF: 52 06    MOV   A,[X+6]
    1501: 53 1C    MOV   [__r0],A
    1503: 52 07    MOV   A,[X+7]
    1505: 53 1B    MOV   [__r1],A
    1507: 52 08    MOV   A,[X+8]
    1509: 53 1A    MOV   [__r2],A
    150B: 52 09    MOV   A,[X+9]
    150D: 53 19    MOV   [__r3],A
    150F: 50 17    MOV   A,0x17
    1511: 62 D0 00 MOV   REG[0xD0],0x0
    1514: 68 1C    ASR   [__r0]
    1516: 6E 1B    RRC   [__r1]
    1518: 6E 1A    RRC   [__r2]
    151A: 6E 19    RRC   [__r3]
    151C: 78       DEC   A
    151D: BF F3    JNZ   0x1511
    151F: 51 19    MOV   A,[__r3]
    1521: 11 7F    SUB   A,0x7F
    1523: 54 0B    MOV   [X+11],A
    1525: 50 00    MOV   A,0x0
    1527: 19 00    SBB   A,0x0
    1529: 54 0A    MOV   [X+10],A
    152B: 52 09    MOV   A,[X+9]
    152D: 53 19    MOV   [__r3],A
    152F: 52 08    MOV   A,[X+8]
    1531: 53 1A    MOV   [__r2],A
    1533: 52 07    MOV   A,[X+7]
    1535: 53 1B    MOV   [__r1],A
    1537: 52 06    MOV   A,[X+6]
    1539: 21 00    AND   A,0x0
    153B: 53 1C    MOV   [__r0],A
    153D: 51 19    MOV   A,[__r3]
    153F: 54 13    MOV   [X+19],A
    1541: 51 1A    MOV   A,[__r2]
    1543: 54 12    MOV   [X+18],A
    1545: 51 1B    MOV   A,[__r1]
    1547: 29 80    OR    A,0x80
    1549: 54 11    MOV   [X+17],A
    154B: 51 1C    MOV   A,[__r0]
    154D: 54 10    MOV   [X+16],A
    154F: 56 02 00 MOV   [X+2],0x0
    1552: 56 03 00 MOV   [X+3],0x0
    1555: 56 04 00 MOV   [X+4],0x0
    1558: 56 05 00 MOV   [X+5],0x0
    155B: 56 0C 00 MOV   [X+12],0x0
    155E: 56 0D 00 MOV   [X+13],0x0
    1561: 56 0E 00 MOV   [X+14],0x0
    1564: 56 0F 00 MOV   [X+15],0x0
    1567: 52 0B    MOV   A,[X+11]
    1569: 11 1F    SUB   A,0x1F
    156B: 52 0A    MOV   A,[X+10]
    156D: 31 80    XOR   A,0x80
    156F: 19 80    SBB   A,0x80
    1571: C0 1C    JC    0x158E
    1573: 62 D0 00 MOV   REG[0xD0],0x0
    1576: 52 F8    MOV   A,[X-8]
    1578: 53 1B    MOV   [__r1],A
    157A: 52 F7    MOV   A,[X-9]
    157C: 60 D5    MOV   REG[0xD5],A
    157E: 50 FF    MOV   A,0xFF
    1580: 3F 1B    MVI   [__r1],A
    1582: 50 FE    MOV   A,0xFE
    1584: 3F 1B    MVI   [__r1],A
    1586: 55 1B 00 MOV   [__r1],0x0
    1589: 55 1C 00 MOV   [__r0],0x0
    158C: 83 62    JMP   0x18EF
    158E: 52 0B    MOV   A,[X+11]
    1590: 11 E9    SUB   A,0xE9
    1592: 52 0A    MOV   A,[X+10]
    1594: 31 80    XOR   A,0x80
    1596: 19 7F    SBB   A,0x7F
    1598: D0 1A    JNC   0x15B3
    159A: 62 D0 00 MOV   REG[0xD0],0x0
    159D: 52 F8    MOV   A,[X-8]
    159F: 53 1B    MOV   [__r1],A
    15A1: 52 F7    MOV   A,[X-9]
    15A3: 60 D5    MOV   REG[0xD5],A
    15A5: 50 FF    MOV   A,0xFF
    15A7: 3F 1B    MVI   [__r1],A
    15A9: 3F 1B    MVI   [__r1],A
    15AB: 55 1B 00 MOV   [__r1],0x0
    15AE: 55 1C 00 MOV   [__r0],0x0
    15B1: 83 3D    JMP   0x18EF
    15B3: 52 0B    MOV   A,[X+11]
    15B5: 11 17    SUB   A,0x17
    15B7: 52 0A    MOV   A,[X+10]
    15B9: 31 80    XOR   A,0x80
    15BB: 19 80    SBB   A,0x80
    15BD: C0 43    JC    0x1601
    15BF: 62 D0 00 MOV   REG[0xD0],0x0
    15C2: 52 0B    MOV   A,[X+11]
    15C4: 11 17    SUB   A,0x17
    15C6: 53 1B    MOV   [__r1],A
    15C8: 52 10    MOV   A,[X+16]
    15CA: 53 18    MOV   [__r4],A
    15CC: 52 11    MOV   A,[X+17]
    15CE: 53 17    MOV   [__r5],A
    15D0: 52 12    MOV   A,[X+18]
    15D2: 53 16    MOV   [__r6],A
    15D4: 52 13    MOV   A,[X+19]
    15D6: 53 15    MOV   [__r7],A
    15D8: 51 1B    MOV   A,[__r1]
    15DA: 21 1F    AND   A,0x1F
    15DC: A0 0F    JZ    0x15EC
    15DE: 62 D0 00 MOV   REG[0xD0],0x0
    15E1: 65 15    ASL   [__r7]
    15E3: 6B 16    RLC   [__r6]
    15E5: 6B 17    RLC   [__r5]
    15E7: 6B 18    RLC   [__r4]
    15E9: 78       DEC   A
    15EA: BF F3    JNZ   0x15DE
    15EC: 62 D0 00 MOV   REG[0xD0],0x0
    15EF: 51 18    MOV   A,[__r4]
    15F1: 54 0C    MOV   [X+12],A
    15F3: 51 17    MOV   A,[__r5]
    15F5: 54 0D    MOV   [X+13],A
    15F7: 51 16    MOV   A,[__r6]
    15F9: 54 0E    MOV   [X+14],A
    15FB: 51 15    MOV   A,[__r7]
    15FD: 54 0F    MOV   [X+15],A
    15FF: 80 D0    JMP   0x16D0
    1601: 52 0B    MOV   A,[X+11]
    1603: 11 00    SUB   A,0x0
    1605: 52 0A    MOV   A,[X+10]
    1607: 31 80    XOR   A,0x80
    1609: 19 80    SBB   A,0x80
    160B: C0 7F    JC    0x168B
    160D: 62 D0 00 MOV   REG[0xD0],0x0
    1610: 50 17    MOV   A,0x17
    1612: 13 0B    SUB   A,[X+11]
    1614: 53 1B    MOV   [__r1],A
    1616: 52 10    MOV   A,[X+16]
    1618: 53 18    MOV   [__r4],A
    161A: 52 11    MOV   A,[X+17]
    161C: 53 17    MOV   [__r5],A
    161E: 52 12    MOV   A,[X+18]
    1620: 53 16    MOV   [__r6],A
    1622: 52 13    MOV   A,[X+19]
    1624: 53 15    MOV   [__r7],A
    1626: 51 1B    MOV   A,[__r1]
    1628: 21 1F    AND   A,0x1F
    162A: A0 0F    JZ    0x163A
    162C: 62 D0 00 MOV   REG[0xD0],0x0
    162F: 68 18    ASR   [__r4]
    1631: 6E 17    RRC   [__r5]
    1633: 6E 16    RRC   [__r6]
    1635: 6E 15    RRC   [__r7]
    1637: 78       DEC   A
    1638: BF F3    JNZ   0x162C
    163A: 62 D0 00 MOV   REG[0xD0],0x0
    163D: 51 18    MOV   A,[__r4]
    163F: 54 0C    MOV   [X+12],A
    1641: 51 17    MOV   A,[__r5]
    1643: 54 0D    MOV   [X+13],A
    1645: 51 16    MOV   A,[__r6]
    1647: 54 0E    MOV   [X+14],A
    1649: 51 15    MOV   A,[__r7]
    164B: 54 0F    MOV   [X+15],A
    164D: 52 0B    MOV   A,[X+11]
    164F: 01 01    ADD   A,0x1
    1651: 53 1B    MOV   [__r1],A
    1653: 52 10    MOV   A,[X+16]
    1655: 53 18    MOV   [__r4],A
    1657: 52 11    MOV   A,[X+17]
    1659: 53 17    MOV   [__r5],A
    165B: 52 12    MOV   A,[X+18]
    165D: 53 16    MOV   [__r6],A
    165F: 52 13    MOV   A,[X+19]
    1661: 53 15    MOV   [__r7],A
    1663: 51 1B    MOV   A,[__r1]
    1665: 21 1F    AND   A,0x1F
    1667: A0 0F    JZ    0x1677
    1669: 62 D0 00 MOV   REG[0xD0],0x0
    166C: 65 15    ASL   [__r7]
    166E: 6B 16    RLC   [__r6]
    1670: 6B 17    RLC   [__r5]
    1672: 6B 18    RLC   [__r4]
    1674: 78       DEC   A
    1675: BF F3    JNZ   0x1669
    1677: 62 D0 00 MOV   REG[0xD0],0x0
    167A: 51 15    MOV   A,[__r7]
    167C: 54 05    MOV   [X+5],A
    167E: 51 16    MOV   A,[__r6]
    1680: 54 04    MOV   [X+4],A
    1682: 51 17    MOV   A,[__r5]
    1684: 54 03    MOV   [X+3],A
    1686: 56 02 00 MOV   [X+2],0x0
    1689: 80 46    JMP   0x16D0
    168B: 62 D0 00 MOV   REG[0xD0],0x0
    168E: 52 0B    MOV   A,[X+11]
    1690: 01 01    ADD   A,0x1
    1692: 73       CPL   A
    1693: 11 FF    SUB   A,0xFF
    1695: 53 1B    MOV   [__r1],A
    1697: 52 13    MOV   A,[X+19]
    1699: 53 15    MOV   [__r7],A
    169B: 52 12    MOV   A,[X+18]
    169D: 53 16    MOV   [__r6],A
    169F: 52 11    MOV   A,[X+17]
    16A1: 53 17    MOV   [__r5],A
    16A3: 52 10    MOV   A,[X+16]
    16A5: 21 00    AND   A,0x0
    16A7: 53 18    MOV   [__r4],A
    16A9: 51 1B    MOV   A,[__r1]
    16AB: 21 1F    AND   A,0x1F
    16AD: A0 0F    JZ    0x16BD
    16AF: 62 D0 00 MOV   REG[0xD0],0x0
    16B2: 68 18    ASR   [__r4]
    16B4: 6E 17    RRC   [__r5]
    16B6: 6E 16    RRC   [__r6]
    16B8: 6E 15    RRC   [__r7]
    16BA: 78       DEC   A
    16BB: BF F3    JNZ   0x16AF
    16BD: 62 D0 00 MOV   REG[0xD0],0x0
    16C0: 51 18    MOV   A,[__r4]
    16C2: 54 02    MOV   [X+2],A
    16C4: 51 17    MOV   A,[__r5]
    16C6: 54 03    MOV   [X+3],A
    16C8: 51 16    MOV   A,[__r6]
    16CA: 54 04    MOV   [X+4],A
    16CC: 51 15    MOV   A,[__r7]
    16CE: 54 05    MOV   [X+5],A
    16D0: 56 01 03 MOV   [X+1],0x3
    16D3: 56 00 00 MOV   [X+0],0x0
    16D6: 52 09    MOV   A,[X+9]
    16D8: 11 00    SUB   A,0x0
    16DA: 52 08    MOV   A,[X+8]
    16DC: 19 00    SBB   A,0x0
    16DE: 52 07    MOV   A,[X+7]
    16E0: 19 00    SBB   A,0x0
    16E2: 52 06    MOV   A,[X+6]
    16E4: 31 80    XOR   A,0x80
    16E6: 19 80    SBB   A,0x80
    16E8: D0 20    JNC   0x1709
    16EA: 62 D0 00 MOV   REG[0xD0],0x0
    16ED: 52 01    MOV   A,[X+1]
    16EF: 53 1B    MOV   [__r1],A
    16F1: 52 00    MOV   A,[X+0]
    16F3: 53 1C    MOV   [__r0],A
    16F5: 51 1B    MOV   A,[__r1]
    16F7: 01 01    ADD   A,0x1
    16F9: 54 01    MOV   [X+1],A
    16FB: 51 1C    MOV   A,[__r0]
    16FD: 09 00    ADC   A,0x0
    16FF: 54 00    MOV   [X+0],A
    1701: 51 1C    MOV   A,[__r0]
    1703: 60 D5    MOV   REG[0xD5],A
    1705: 50 2D    MOV   A,0x2D
    1707: 3F 1B    MVI   [__r1],A
    1709: 3D 0C 00 CMP   [X+12],0x0
    170C: B0 31    JNZ   0x173E
    170E: 3D 0D 00 CMP   [X+13],0x0
    1711: B0 2C    JNZ   0x173E
    1713: 3D 0E 00 CMP   [X+14],0x0
    1716: B0 27    JNZ   0x173E
    1718: 3D 0F 00 CMP   [X+15],0x0
    171B: B0 22    JNZ   0x173E
    171D: 62 D0 00 MOV   REG[0xD0],0x0
    1720: 52 01    MOV   A,[X+1]
    1722: 53 1B    MOV   [__r1],A
    1724: 52 00    MOV   A,[X+0]
    1726: 53 1C    MOV   [__r0],A
    1728: 51 1B    MOV   A,[__r1]
    172A: 01 01    ADD   A,0x1
    172C: 54 01    MOV   [X+1],A
    172E: 51 1C    MOV   A,[__r0]
    1730: 09 00    ADC   A,0x0
    1732: 54 00    MOV   [X+0],A
    1734: 51 1C    MOV   A,[__r0]
    1736: 60 D5    MOV   REG[0xD5],A
    1738: 50 30    MOV   A,0x30
    173A: 3F 1B    MVI   [__r1],A
    173C: 80 36    JMP   0x1773
    173E: 50 00    MOV   A,0x0
    1740: 08       PUSH  A
    1741: 50 0A    MOV   A,0xA
    1743: 08       PUSH  A
    1744: 52 0C    MOV   A,[X+12]
    1746: 08       PUSH  A
    1747: 52 0D    MOV   A,[X+13]
    1749: 08       PUSH  A
    174A: 52 0E    MOV   A,[X+14]
    174C: 08       PUSH  A
    174D: 52 0F    MOV   A,[X+15]
    174F: 08       PUSH  A
    1750: 52 00    MOV   A,[X+0]
    1752: 08       PUSH  A
    1753: 52 01    MOV   A,[X+1]
    1755: 08       PUSH  A
    1756: 7C 12 2B LCALL _ltoa
    1759: 38 F8    ADD   SP,0xF8
    175B: 80 06    JMP   0x1762
    175D: 77 01    INC   [X+1]
    175F: 0F 00 00 ADC   [X+0],0x0
    1762: 62 D0 00 MOV   REG[0xD0],0x0
    1765: 52 01    MOV   A,[X+1]
    1767: 53 1B    MOV   [__r1],A
    1769: 52 00    MOV   A,[X+0]
    176B: 60 D4    MOV   REG[0xD4],A
    176D: 3E 1B    MVI   A,[__r1]
    176F: 39 00    CMP   A,0x0
    1771: BF EB    JNZ   0x175D
    1773: 62 D0 00 MOV   REG[0xD0],0x0
    1776: 52 01    MOV   A,[X+1]
    1778: 53 1B    MOV   [__r1],A
    177A: 52 00    MOV   A,[X+0]
    177C: 53 1C    MOV   [__r0],A
    177E: 51 1B    MOV   A,[__r1]
    1780: 01 01    ADD   A,0x1
    1782: 54 01    MOV   [X+1],A
    1784: 51 1C    MOV   A,[__r0]
    1786: 09 00    ADC   A,0x0
    1788: 54 00    MOV   [X+0],A
    178A: 51 1C    MOV   A,[__r0]
    178C: 60 D5    MOV   REG[0xD5],A
    178E: 50 2E    MOV   A,0x2E
    1790: 3F 1B    MVI   [__r1],A
    1792: 3D 02 00 CMP   [X+2],0x0
    1795: B0 31    JNZ   0x17C7
    1797: 3D 03 00 CMP   [X+3],0x0
    179A: B0 2C    JNZ   0x17C7
    179C: 3D 04 00 CMP   [X+4],0x0
    179F: B0 27    JNZ   0x17C7
    17A1: 3D 05 00 CMP   [X+5],0x0
    17A4: B0 22    JNZ   0x17C7
    17A6: 62 D0 00 MOV   REG[0xD0],0x0
    17A9: 52 01    MOV   A,[X+1]
    17AB: 53 1B    MOV   [__r1],A
    17AD: 52 00    MOV   A,[X+0]
    17AF: 53 1C    MOV   [__r0],A
    17B1: 51 1B    MOV   A,[__r1]
    17B3: 01 01    ADD   A,0x1
    17B5: 54 01    MOV   [X+1],A
    17B7: 51 1C    MOV   A,[__r0]
    17B9: 09 00    ADC   A,0x0
    17BB: 54 00    MOV   [X+0],A
    17BD: 51 1C    MOV   A,[__r0]
    17BF: 60 D5    MOV   REG[0xD5],A
    17C1: 50 30    MOV   A,0x30
    17C3: 3F 1B    MVI   [__r1],A
    17C5: 81 14    JMP   0x18DA
    17C7: 62 D0 00 MOV   REG[0xD0],0x0
    17CA: 52 01    MOV   A,[X+1]
    17CC: 11 03    SUB   A,0x3
    17CE: 53 1B    MOV   [__r1],A
    17D0: 52 00    MOV   A,[X+0]
    17D2: 19 00    SBB   A,0x0
    17D4: 53 1C    MOV   [__r0],A
    17D6: 50 0F    MOV   A,0xF
    17D8: 12 1B    SUB   A,[__r1]
    17DA: 53 1B    MOV   [__r1],A
    17DC: 50 00    MOV   A,0x0
    17DE: 1A 1C    SBB   A,[__r0]
    17E0: 53 1C    MOV   [__r0],A
    17E2: 16 1B 01 SUB   [__r1],0x1
    17E5: 1E 1C 00 SBB   [__r0],0x0
    17E8: 51 1B    MOV   A,[__r1]
    17EA: 54 15    MOV   [X+21],A
    17EC: 50 07    MOV   A,0x7
    17EE: 3B 15    CMP   A,[X+21]
    17F0: D0 04    JNC   0x17F5
    17F2: 56 15 07 MOV   [X+21],0x7
    17F5: 56 14 00 MOV   [X+20],0x0
    17F8: 80 A5    JMP   0x189E
    17FA: 62 D0 00 MOV   REG[0xD0],0x0
    17FD: 52 02    MOV   A,[X+2]
    17FF: 53 1C    MOV   [__r0],A
    1801: 52 03    MOV   A,[X+3]
    1803: 53 1B    MOV   [__r1],A
    1805: 52 04    MOV   A,[X+4]
    1807: 53 1A    MOV   [__r2],A
    1809: 52 05    MOV   A,[X+5]
    180B: 53 19    MOV   [__r3],A
    180D: 65 19    ASL   [__r3]
    180F: 6B 1A    RLC   [__r2]
    1811: 6B 1B    RLC   [__r1]
    1813: 6B 1C    RLC   [__r0]
    1815: 52 02    MOV   A,[X+2]
    1817: 53 18    MOV   [__r4],A
    1819: 52 03    MOV   A,[X+3]
    181B: 53 17    MOV   [__r5],A
    181D: 52 04    MOV   A,[X+4]
    181F: 53 16    MOV   [__r6],A
    1821: 52 05    MOV   A,[X+5]
    1823: 53 15    MOV   [__r7],A
    1825: 50 03    MOV   A,0x3
    1827: 62 D0 00 MOV   REG[0xD0],0x0
    182A: 65 15    ASL   [__r7]
    182C: 6B 16    RLC   [__r6]
    182E: 6B 17    RLC   [__r5]
    1830: 6B 18    RLC   [__r4]
    1832: 78       DEC   A
    1833: BF F3    JNZ   0x1827
    1835: 51 15    MOV   A,[__r7]
    1837: 02 19    ADD   A,[__r3]
    1839: 54 05    MOV   [X+5],A
    183B: 51 16    MOV   A,[__r6]
    183D: 0A 1A    ADC   A,[__r2]
    183F: 54 04    MOV   [X+4],A
    1841: 51 17    MOV   A,[__r5]
    1843: 0A 1B    ADC   A,[__r1]
    1845: 54 03    MOV   [X+3],A
    1847: 51 18    MOV   A,[__r4]
    1849: 0A 1C    ADC   A,[__r0]
    184B: 54 02    MOV   [X+2],A
    184D: 52 01    MOV   A,[X+1]
    184F: 53 1B    MOV   [__r1],A
    1851: 52 00    MOV   A,[X+0]
    1853: 53 1C    MOV   [__r0],A
    1855: 51 1B    MOV   A,[__r1]
    1857: 01 01    ADD   A,0x1
    1859: 54 01    MOV   [X+1],A
    185B: 51 1C    MOV   A,[__r0]
    185D: 09 00    ADC   A,0x0
    185F: 54 00    MOV   [X+0],A
    1861: 52 02    MOV   A,[X+2]
    1863: 53 18    MOV   [__r4],A
    1865: 52 03    MOV   A,[X+3]
    1867: 53 17    MOV   [__r5],A
    1869: 52 04    MOV   A,[X+4]
    186B: 53 16    MOV   [__r6],A
    186D: 52 05    MOV   A,[X+5]
    186F: 53 15    MOV   [__r7],A
    1871: 50 18    MOV   A,0x18
    1873: 62 D0 00 MOV   REG[0xD0],0x0
    1876: 68 18    ASR   [__r4]
    1878: 6E 17    RRC   [__r5]
    187A: 6E 16    RRC   [__r6]
    187C: 6E 15    RRC   [__r7]
    187E: 78       DEC   A
    187F: BF F3    JNZ   0x1873
    1881: 06 15 30 ADD   [__r7],0x30
    1884: 0E 16 00 ADC   [__r6],0x0
    1887: 0E 17 00 ADC   [__r5],0x0
    188A: 0E 18 00 ADC   [__r4],0x0
    188D: 51 15    MOV   A,[__r7]
    188F: 53 1A    MOV   [__r2],A
    1891: 51 1C    MOV   A,[__r0]
    1893: 60 D5    MOV   REG[0xD5],A
    1895: 51 1A    MOV   A,[__r2]
    1897: 3F 1B    MVI   [__r1],A
    1899: 27 02 00 AND   [X+2],0x0
    189C: 77 14    INC   [X+20]
    189E: 52 14    MOV   A,[X+20]
    18A0: 3B 15    CMP   A,[X+21]
    18A2: CF 57    JC    0x17FA
    18A4: 07 01 FF ADD   [X+1],0xFF
    18A7: 0F 00 FF ADC   [X+0],0xFF
    18AA: 80 07    JMP   0x18B2
    18AC: 07 01 FF ADD   [X+1],0xFF
    18AF: 0F 00 FF ADC   [X+0],0xFF
    18B2: 62 D0 00 MOV   REG[0xD0],0x0
    18B5: 52 01    MOV   A,[X+1]
    18B7: 53 1B    MOV   [__r1],A
    18B9: 52 00    MOV   A,[X+0]
    18BB: 60 D4    MOV   REG[0xD4],A
    18BD: 3E 1B    MVI   A,[__r1]
    18BF: 39 30    CMP   A,0x30
    18C1: B0 13    JNZ   0x18D5
    18C3: 52 01    MOV   A,[X+1]
    18C5: 01 FF    ADD   A,0xFF
    18C7: 53 1B    MOV   [__r1],A
    18C9: 52 00    MOV   A,[X+0]
    18CB: 09 FF    ADC   A,0xFF
    18CD: 60 D4    MOV   REG[0xD4],A
    18CF: 3E 1B    MVI   A,[__r1]
    18D1: 39 2E    CMP   A,0x2E
    18D3: BF D8    JNZ   0x18AC
    18D5: 77 01    INC   [X+1]
    18D7: 0F 00 00 ADC   [X+0],0x0
    18DA: 62 D0 00 MOV   REG[0xD0],0x0
    18DD: 52 01    MOV   A,[X+1]
    18DF: 53 1B    MOV   [__r1],A
    18E1: 52 00    MOV   A,[X+0]
    18E3: 60 D5    MOV   REG[0xD5],A
    18E5: 50 00    MOV   A,0x0
    18E7: 3F 1B    MVI   [__r1],A
    18E9: 55 1B 03 MOV   [__r1],0x3
    18EC: 55 1C 00 MOV   [__r0],0x0
    18EF: 38 EA    ADD   SP,0xEA
    18F1: 20       POP   X
    18F2: 7F       RET   
--------------------------------------------------------------------------------


PSoC Designer Version: 5.0.1127.0

Copyright (C) 1994 - 2011 ImageCraft Creations Inc.
ImageCraft, 2625 Middlefield Rd #685, Palo Alto, CA 94306
info@imagecraft.com, phone (650) 493-9326 FAX (866) 889-4834
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission
Version 7.05.00.
