FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 0A C0 LJMP  _DelSig_ADConversion_ISR(0149)     ljmp	_DelSig_ADConversion_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 10 F3 LJMP  _DACUpdate_ISR     (0153)     ljmp	_DACUpdate_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 0A D6 LJMP  _DelSigClock_ISR   (0161)     ljmp	_DelSigClock_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
004C: 7D 08 8E LJMP  _SPIM_ISR          (0193)     ljmp	_SPIM_ISR
004F: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
0058: 7D 07 3C LJMP  _UART_TX_ISR       (0205)     ljmp	_UART_TX_ISR
005B: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
005C: 7D 07 3D LJMP  _UART_RX_ISR       (0209)     ljmp	_UART_RX_ISR
005F: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
0064: 7D 08 A9 LJMP  _SleepTimer_ISR    (0217)     ljmp	_SleepTimer_ISR
0067: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [charIn+113],0x0   (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [charIn+114],0x0   (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 12 MOV   REG[0xE0],0x12     (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 06 D1 LCALL 0x06D1             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 05    MOV   A,0x5              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 CA    MOV   X,0xCA             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 61    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 61    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 61    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 60    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 61    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 61 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 60    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 60    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 61    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 61 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 60    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0133: 62 E0 13 MOV   REG[0xE0],0x13     (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013E: 7C 0D 4A LCALL __UserModules_end|__text_start|_main|_main(0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0141: 8F FF    JMP   0x0141             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0143: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0145: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
05CC: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_DataAcqSystem_Bank1
                                        (0019) export LoadConfigTBL_DataAcqSystem_Bank0
                                        (0020) export LoadConfigTBL_DataAcqSystem_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_DataAcqSystem_Bank0:
                                        (0023) ;  Instance name AMUX4, User Module AMUX4
                                        (0024) ;  Instance name DAC8A, User Module DAC8
                                        (0025) ;       Instance name DAC8A, Block Name LSB(ASD11)
                                        (0026) 	db		84h, 80h		;DAC8A_LSB_CR0(ASD11CR0)
                                        (0027) 	db		85h, 80h		;DAC8A_LSB_CR1(ASD11CR1)
                                        (0028) 	db		86h, 20h		;DAC8A_LSB_CR2(ASD11CR2)
                                        (0029) 	db		87h, 30h		;DAC8A_LSB_CR3(ASD11CR3)
                                        (0030) ;       Instance name DAC8A, Block Name MSB(ASC21)
                                        (0031) 	db		94h, a0h		;DAC8A_MSB_CR0(ASC21CR0)
                                        (0032) 	db		95h, 41h		;DAC8A_MSB_CR1(ASC21CR1)
                                        (0033) 	db		96h, a0h		;DAC8A_MSB_CR2(ASC21CR2)
                                        (0034) 	db		97h, 30h		;DAC8A_MSB_CR3(ASC21CR3)
                                        (0035) ;  Instance name DAC8B, User Module DAC8
                                        (0036) ;       Instance name DAC8B, Block Name LSB(ASD22)
                                        (0037) 	db		98h, 80h		;DAC8B_LSB_CR0(ASD22CR0)
                                        (0038) 	db		99h, 80h		;DAC8B_LSB_CR1(ASD22CR1)
                                        (0039) 	db		9ah, 20h		;DAC8B_LSB_CR2(ASD22CR2)
                                        (0040) 	db		9bh, 30h		;DAC8B_LSB_CR3(ASD22CR3)
                                        (0041) ;       Instance name DAC8B, Block Name MSB(ASC12)
                                        (0042) 	db		88h, a0h		;DAC8B_MSB_CR0(ASC12CR0)
                                        (0043) 	db		89h, 41h		;DAC8B_MSB_CR1(ASC12CR1)
                                        (0044) 	db		8ah, a0h		;DAC8B_MSB_CR2(ASC12CR2)
                                        (0045) 	db		8bh, 3ch		;DAC8B_MSB_CR3(ASC12CR3)
                                        (0046) ;  Instance name DACUpdate, User Module Counter8
                                        (0047) ;       Instance name DACUpdate, Block Name CNTR8(DBB01)
                                        (0048) 	db		27h, 00h		;DACUpdate_CONTROL_REG(DBB01CR0)
                                        (0049) 	db		25h, 7fh		;DACUpdate_PERIOD_REG(DBB01DR1)
                                        (0050) 	db		26h, 04h		;DACUpdate_COMPARE_REG(DBB01DR2)
                                        (0051) ;  Instance name DelSig, User Module DelSig
                                        (0052) ;       Instance name DelSig, Block Name ADC1(ASC10)
                                        (0053) 	db		80h, 88h		;DelSig_AtoD1cr0(ASC10CR0)
                                        (0054) 	db		81h, 00h		;DelSig_AtoD1cr1(ASC10CR1)
                                        (0055) 	db		82h, 00h		;DelSig_AtoD1cr2(ASC10CR2)
                                        (0056) 	db		83h, e0h		;DelSig_AtoD1cr3(ASC10CR3)
                                        (0057) ;       Instance name DelSig, Block Name ADC2(ASD20)
                                        (0058) 	db		90h, 90h		;DelSig_AtoD2cr0(ASD20CR0)
                                        (0059) 	db		91h, 00h		;DelSig_AtoD2cr1(ASD20CR1)
                                        (0060) 	db		92h, 40h		;DelSig_AtoD2cr2(ASD20CR2)
                                        (0061) 	db		93h, e0h		;DelSig_AtoD2cr3(ASD20CR3)
                                        (0062) ;       Instance name DelSig, Block Name PWM(DBB00)
                                        (0063) 	db		23h, 00h		;DelSig_PWM_CR0(DBB00CR0)
                                        (0064) 	db		21h, 7fh		;DelSig_PWM_DR1(DBB00DR1)
                                        (0065) 	db		22h, 01h		;DelSig_PWM_DR2(DBB00DR2)
                                        (0066) ;  Instance name DelSigClock, User Module Counter8
                                        (0067) ;       Instance name DelSigClock, Block Name CNTR8(DCB03)
                                        (0068) 	db		2fh, 00h		;DelSigClock_CONTROL_REG(DCB03CR0)
                                        (0069) 	db		2dh, 4ah		;DelSigClock_PERIOD_REG(DCB03DR1)
                                        (0070) 	db		2eh, 25h		;DelSigClock_COMPARE_REG(DCB03DR2)
                                        (0071) ;  Instance name LCD, User Module LCD
                                        (0072) ;  Instance name LCD_1, User Module LCD
                                        (0073) ;  Instance name PGA, User Module PGA
                                        (0074) ;       Instance name PGA, Block Name GAIN(ACB00)
                                        (0075) 	db		71h, fdh		;PGA_GAIN_CR0(ACB00CR0)
                                        (0076) 	db		72h, a1h		;PGA_GAIN_CR1(ACB00CR1)
                                        (0077) 	db		73h, 20h		;PGA_GAIN_CR2(ACB00CR2)
                                        (0078) 	db		70h, 00h		;PGA_GAIN_CR3(ACB00CR3)
                                        (0079) ;  Instance name SPIM, User Module SPIM
                                        (0080) ;       Instance name SPIM, Block Name SPIM(DCB23)
                                        (0081) 	db		4fh, 00h		;SPIM_CONTROL_REG  (DCB23CR0)
                                        (0082) 	db		4dh, 00h		;SPIM_TX_BUFFER_REG(DCB23DR1)
                                        (0083) 	db		4eh, 00h		;SPIM_RX_BUFFER_REG(DCB23DR2)
                                        (0084) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0085) ;  Instance name UART, User Module UART
                                        (0086) ;       Instance name UART, Block Name RX(DCB33)
                                        (0087) 	db		5fh, 00h		;UART_RX_CONTROL_REG(DCB33CR0)
                                        (0088) 	db		5dh, 00h		;UART_(DCB33DR1)
                                        (0089) 	db		5eh, 00h		;UART_RX_BUFFER_REG (DCB33DR2)
                                        (0090) ;       Instance name UART, Block Name TX(DCB32)
                                        (0091) 	db		5bh, 00h		;UART_TX_CONTROL_REG(DCB32CR0)
                                        (0092) 	db		59h, 00h		;UART_TX_BUFFER_REG (DCB32DR1)
                                        (0093) 	db		5ah, 00h		;UART_(DCB32DR2)
                                        (0094) ;  Global Register values Bank 0
                                        (0095) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0096) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0097) 	db		63h, 57h		; AnalogReferenceControl register (ARF_CR)
                                        (0098) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0099) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0100) 	db		e7h, 42h		; DecimatorControl_1 register (DEC_CR1)
                                        (0101) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0102) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0103) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0104) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0105) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0106) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0107) 	db		b5h, 04h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0108) 	db		b6h, 80h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0109) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0110) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0111) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0112) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0113) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0114) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0115) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0116) 	db		c0h, 0ch		; Row_2_InputMux register (RDI2RI)
                                        (0117) 	db		c1h, 02h		; Row_2_InputSync register (RDI2SYN)
                                        (0118) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0119) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0120) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0121) 	db		c5h, 08h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0122) 	db		c6h, 40h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0123) 	db		c8h, 75h		; Row_3_InputMux register (RDI3RI)
                                        (0124) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0125) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0126) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0127) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0128) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0129) 	db		ceh, 20h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0130) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0131) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0132) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0133) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0134) 	db		ffh
                                        (0135) LoadConfigTBL_DataAcqSystem_Bank1:
                                        (0136) ;  Instance name AMUX4, User Module AMUX4
                                        (0137) ;  Instance name DAC8A, User Module DAC8
                                        (0138) ;       Instance name DAC8A, Block Name LSB(ASD11)
                                        (0139) ;       Instance name DAC8A, Block Name MSB(ASC21)
                                        (0140) ;  Instance name DAC8B, User Module DAC8
                                        (0141) ;       Instance name DAC8B, Block Name LSB(ASD22)
                                        (0142) ;       Instance name DAC8B, Block Name MSB(ASC12)
                                        (0143) ;  Instance name DACUpdate, User Module Counter8
                                        (0144) ;       Instance name DACUpdate, Block Name CNTR8(DBB01)
                                        (0145) 	db		24h, 21h		;DACUpdate_FUNC_REG(DBB01FN)
                                        (0146) 	db		25h, 12h		;DACUpdate_INPUT_REG(DBB01IN)
                                        (0147) 	db		26h, 47h		;DACUpdate_OUTPUT_REG(DBB01OU)
                                        (0148) ;  Instance name DelSig, User Module DelSig
                                        (0149) ;       Instance name DelSig, Block Name ADC1(ASC10)
                                        (0150) ;       Instance name DelSig, Block Name ADC2(ASD20)
                                        (0151) ;       Instance name DelSig, Block Name PWM(DBB00)
                                        (0152) 	db		20h, 31h		;DelSig_PWM_FN(DBB00FN)
                                        (0153) 	db		21h, 12h		;DelSig_PWM_SL(DBB00IN)
                                        (0154) 	db		22h, 44h		;DelSig_PWM_OS(DBB00OU)
                                        (0155) ;  Instance name DelSigClock, User Module Counter8
                                        (0156) ;       Instance name DelSigClock, Block Name CNTR8(DCB03)
                                        (0157) 	db		2ch, 61h		;DelSigClock_FUNC_REG(DCB03FN)
                                        (0158) 	db		2dh, 10h		;DelSigClock_INPUT_REG(DCB03IN)
                                        (0159) 	db		2eh, c0h		;DelSigClock_OUTPUT_REG(DCB03OU)
                                        (0160) ;  Instance name LCD, User Module LCD
                                        (0161) ;  Instance name LCD_1, User Module LCD
                                        (0162) ;  Instance name PGA, User Module PGA
                                        (0163) ;       Instance name PGA, Block Name GAIN(ACB00)
                                        (0164) ;  Instance name SPIM, User Module SPIM
                                        (0165) ;       Instance name SPIM, Block Name SPIM(DCB23)
                                        (0166) 	db		4ch, 06h		;SPIM_FUNCTION_REG (DCB23FN)
                                        (0167) 	db		4dh, d5h		;SPIM_INPUT_REG    (DCB23IN)
                                        (0168) 	db		4eh, 7ch		;SPIM_OUTPUT_REG   (DCB23OU)
                                        (0169) ;  Instance name SleepTimer, User Module SleepTimer
                                        (0170) ;  Instance name UART, User Module UART
                                        (0171) ;       Instance name UART, Block Name RX(DCB33)
                                        (0172) 	db		5ch, 05h		;UART_RX_FUNC_REG   (DCB33FN)
                                        (0173) 	db		5dh, e1h		;UART_RX_INPUT_REG  (DCB33IN)
                                        (0174) 	db		5eh, 40h		;UART_RX_OUTPUT_REG (DCB33OU)
                                        (0175) ;       Instance name UART, Block Name TX(DCB32)
                                        (0176) 	db		58h, 0dh		;UART_TX_FUNC_REG   (DCB32FN)
                                        (0177) 	db		59h, 01h		;UART_TX_INPUT_REG  (DCB32IN)
                                        (0178) 	db		5ah, 47h		;UART_TX_OUTPUT_REG (DCB32OU)
                                        (0179) ;  Global Register values Bank 1
                                        (0180) 	db		61h, 03h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0181) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0182) 	db		60h, 16h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0183) 	db		62h, 39h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0184) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0185) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0186) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0187) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0188) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0189) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0190) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0191) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0192) 	db		e1h, 31h		; OscillatorControl_1 register (OSC_CR1)
                                        (0193) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0194) 	db		dfh, 33h		; OscillatorControl_3 register (OSC_CR3)
                                        (0195) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0196) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0197) 	db		e7h, a8h		; Type2Decimator_Control register (DEC_CR2)
                                        (0198) 	db		ffh
                                        (0199) AREA psoc_config(rom, rel)
                                        (0200) LoadConfigTBL_DataAcqSystem_Ordered:
                                        (0201) ;  Ordered Global Register values
                                        (0202) 	M8C_SetBank0
05CE: 62 00 00 MOV   REG[0x0],0x0       (0203) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
05D1: 71 10    OR    F,0x10             
                                        (0204) 	M8C_SetBank1
05D3: 62 00 00 MOV   REG[0x0],0x0       (0205) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
05D6: 62 01 FF MOV   REG[0x1],0xFF      (0206) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
05D9: 70 EF    AND   F,0xEF             
                                        (0207) 	M8C_SetBank0
05DB: 62 03 FF MOV   REG[0x3],0xFF      (0208) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
05DE: 62 02 00 MOV   REG[0x2],0x0       (0209) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
05E1: 71 10    OR    F,0x10             
                                        (0210) 	M8C_SetBank1
05E3: 62 02 00 MOV   REG[0x2],0x0       (0211) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
05E6: 62 03 00 MOV   REG[0x3],0x0       (0212) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
05E9: 70 EF    AND   F,0xEF             
                                        (0213) 	M8C_SetBank0
05EB: 62 01 00 MOV   REG[0x1],0x0       (0214) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
05EE: 62 04 1C MOV   REG[0x4],0x1C      (0215) 	mov	reg[04h], 1ch		; Port_1_Data register (PRT1DR)
05F1: 71 10    OR    F,0x10             
                                        (0216) 	M8C_SetBank1
05F3: 62 04 9F MOV   REG[0x4],0x9F      (0217) 	mov	reg[04h], 9fh		; Port_1_DriveMode_0 register (PRT1DM0)
05F6: 62 05 7C MOV   REG[0x5],0x7C      (0218) 	mov	reg[05h], 7ch		; Port_1_DriveMode_1 register (PRT1DM1)
05F9: 70 EF    AND   F,0xEF             
                                        (0219) 	M8C_SetBank0
05FB: 62 07 1C MOV   REG[0x7],0x1C      (0220) 	mov	reg[07h], 1ch		; Port_1_DriveMode_2 register (PRT1DM2)
05FE: 62 06 F9 MOV   REG[0x6],0xF9      (0221) 	mov	reg[06h], f9h		; Port_1_GlobalSelect register (PRT1GS)
0601: 71 10    OR    F,0x10             
                                        (0222) 	M8C_SetBank1
0603: 62 06 00 MOV   REG[0x6],0x0       (0223) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0606: 62 07 00 MOV   REG[0x7],0x0       (0224) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0609: 70 EF    AND   F,0xEF             
                                        (0225) 	M8C_SetBank0
060B: 62 05 00 MOV   REG[0x5],0x0       (0226) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
060E: 62 08 00 MOV   REG[0x8],0x0       (0227) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0611: 71 10    OR    F,0x10             
                                        (0228) 	M8C_SetBank1
0613: 62 08 FF MOV   REG[0x8],0xFF      (0229) 	mov	reg[08h], ffh		; Port_2_DriveMode_0 register (PRT2DM0)
0616: 62 09 00 MOV   REG[0x9],0x0       (0230) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
0619: 70 EF    AND   F,0xEF             
                                        (0231) 	M8C_SetBank0
061B: 62 0B 00 MOV   REG[0xB],0x0       (0232) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
061E: 62 0A 80 MOV   REG[0xA],0x80      (0233) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
0621: 71 10    OR    F,0x10             
                                        (0234) 	M8C_SetBank1
0623: 62 0A 00 MOV   REG[0xA],0x0       (0235) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0626: 62 0B 00 MOV   REG[0xB],0x0       (0236) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0629: 70 EF    AND   F,0xEF             
                                        (0237) 	M8C_SetBank0
062B: 62 09 00 MOV   REG[0x9],0x0       (0238) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
062E: 62 0C 00 MOV   REG[0xC],0x0       (0239) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0631: 71 10    OR    F,0x10             
                                        (0240) 	M8C_SetBank1
0633: 62 0C 00 MOV   REG[0xC],0x0       (0241) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0636: 62 0D 00 MOV   REG[0xD],0x0       (0242) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0639: 70 EF    AND   F,0xEF             
                                        (0243) 	M8C_SetBank0
063B: 62 0F 00 MOV   REG[0xF],0x0       (0244) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
063E: 62 0E 00 MOV   REG[0xE],0x0       (0245) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0641: 71 10    OR    F,0x10             
                                        (0246) 	M8C_SetBank1
0643: 62 0E 00 MOV   REG[0xE],0x0       (0247) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0646: 62 0F 00 MOV   REG[0xF],0x0       (0248) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0649: 70 EF    AND   F,0xEF             
                                        (0249) 	M8C_SetBank0
064B: 62 0D 00 MOV   REG[0xD],0x0       (0250) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
064E: 62 10 00 MOV   REG[0x10],0x0      (0251) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0651: 71 10    OR    F,0x10             
                                        (0252) 	M8C_SetBank1
0653: 62 10 00 MOV   REG[0x10],0x0      (0253) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0656: 62 11 00 MOV   REG[0x11],0x0      (0254) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0659: 70 EF    AND   F,0xEF             
                                        (0255) 	M8C_SetBank0
065B: 62 13 00 MOV   REG[0x13],0x0      (0256) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
065E: 62 12 00 MOV   REG[0x12],0x0      (0257) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0661: 71 10    OR    F,0x10             
                                        (0258) 	M8C_SetBank1
0663: 62 12 00 MOV   REG[0x12],0x0      (0259) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0666: 62 13 00 MOV   REG[0x13],0x0      (0260) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0669: 70 EF    AND   F,0xEF             
                                        (0261) 	M8C_SetBank0
066B: 62 11 00 MOV   REG[0x11],0x0      (0262) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
066E: 62 14 00 MOV   REG[0x14],0x0      (0263) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0671: 71 10    OR    F,0x10             
                                        (0264) 	M8C_SetBank1
0673: 62 14 00 MOV   REG[0x14],0x0      (0265) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0676: 62 15 00 MOV   REG[0x15],0x0      (0266) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0679: 70 EF    AND   F,0xEF             
                                        (0267) 	M8C_SetBank0
067B: 62 17 00 MOV   REG[0x17],0x0      (0268) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
067E: 62 16 00 MOV   REG[0x16],0x0      (0269) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0681: 71 10    OR    F,0x10             
                                        (0270) 	M8C_SetBank1
0683: 62 16 00 MOV   REG[0x16],0x0      (0271) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0686: 62 17 00 MOV   REG[0x17],0x0      (0272) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0689: 70 EF    AND   F,0xEF             
                                        (0273) 	M8C_SetBank0
068B: 62 15 00 MOV   REG[0x15],0x0      (0274) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
068E: 62 18 00 MOV   REG[0x18],0x0      (0275) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
0691: 71 10    OR    F,0x10             
                                        (0276) 	M8C_SetBank1
0693: 62 18 00 MOV   REG[0x18],0x0      (0277) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0696: 62 19 00 MOV   REG[0x19],0x0      (0278) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0699: 70 EF    AND   F,0xEF             
                                        (0279) 	M8C_SetBank0
069B: 62 1B 00 MOV   REG[0x1B],0x0      (0280) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
069E: 62 1A 00 MOV   REG[0x1A],0x0      (0281) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
06A1: 71 10    OR    F,0x10             
                                        (0282) 	M8C_SetBank1
06A3: 62 1A 00 MOV   REG[0x1A],0x0      (0283) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
06A6: 62 1B 00 MOV   REG[0x1B],0x0      (0284) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
06A9: 70 EF    AND   F,0xEF             
                                        (0285) 	M8C_SetBank0
06AB: 62 19 00 MOV   REG[0x19],0x0      (0286) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
06AE: 62 1C 00 MOV   REG[0x1C],0x0      (0287) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
06B1: 71 10    OR    F,0x10             
                                        (0288) 	M8C_SetBank1
06B3: 62 1C 00 MOV   REG[0x1C],0x0      (0289) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
06B6: 62 1D 00 MOV   REG[0x1D],0x0      (0290) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
06B9: 70 EF    AND   F,0xEF             
                                        (0291) 	M8C_SetBank0
06BB: 62 1F 00 MOV   REG[0x1F],0x0      (0292) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
06BE: 62 1E 00 MOV   REG[0x1E],0x0      (0293) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
06C1: 71 10    OR    F,0x10             
                                        (0294) 	M8C_SetBank1
06C3: 62 1E 00 MOV   REG[0x1E],0x0      (0295) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
06C6: 62 1F 00 MOV   REG[0x1F],0x0      (0296) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
06C9: 70 EF    AND   F,0xEF             
                                        (0297) 	M8C_SetBank0
06CB: 62 1D 00 MOV   REG[0x1D],0x0      (0298) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
06CE: 70 EF    AND   F,0xEF             
                                        (0299) 	M8C_SetBank0
06D0: 7F       RET                      (0300) 	ret
                                        (0301) 
                                        (0302) 
                                        (0303) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_DataAcqSystem
                                        (0026) export _LoadConfig_DataAcqSystem
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
06D1: 55 07 00 MOV   [0x7],0x0          (0065) 	mov		[Port_2_Data_SHADE], 0h
06D4: 55 08 FF MOV   [0x8],0xFF         (0066) 	mov		[Port_2_DriveMode_0_SHADE], ffh
06D7: 55 09 00 MOV   [0x9],0x0          (0067) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0068) 
06DA: 7C 06 E1 LCALL 0x06E1             (0069) 	lcall	LoadConfig_DataAcqSystem
06DD: 7C 05 CC LCALL 0x05CC             (0070) 	lcall	LoadConfigTBL_DataAcqSystem_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
06E0: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration DataAcqSystem
                                        (0078) ;
                                        (0079) ;    Load configuration registers for DataAcqSystem.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_DataAcqSystem:
                                        (0096)  LoadConfig_DataAcqSystem:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
06E1: 10       PUSH  X                  (0099) 	push	x
06E2: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
06E4: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
06E6: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
06E7: 50 04    MOV   A,0x4              (0104)     mov     A, >LoadConfigTBL_DataAcqSystem_Bank0
06E9: 57 D6    MOV   X,0xD6             (0105)     mov     X, <LoadConfigTBL_DataAcqSystem_Bank0
06EB: 7C 06 FC LCALL 0x06FC             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
06EE: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
06F0: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
06F1: 50 05    MOV   A,0x5              (0111)     mov     A, >LoadConfigTBL_DataAcqSystem_Bank1
06F3: 57 81    MOV   X,0x81             (0112)     mov     X, <LoadConfigTBL_DataAcqSystem_Bank1
06F5: 7C 06 FC LCALL 0x06FC             (0113)     lcall   LoadConfig              ; Load the bank 1 values
06F8: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
06FA: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
06FB: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
06FC: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
06FE: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
06FF: 08       PUSH  A                  (0143)     push    A
0700: 4F       MOV   X,SP               (0144)     mov     X, SP
0701: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
0704: D0 04    JNC   0x0709             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0706: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
0709: 18       POP   A                  (0149)     pop     A
070A: 20       POP   X                  (0150)     pop     X
070B: 70 EF    AND   F,0xEF             
070D: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0710: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
0711: 08       PUSH  A                  (0156)     push    A
0712: 28       ROMX                     (0157)     romx                            ; Load register address from table
0713: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
0715: A0 1F    JZ    0x0735             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
0717: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
0718: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
071B: A0 03    JZ    0x071F             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
071D: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
071F: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
0721: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
0722: 20       POP   X                  (0167)     pop     X
0723: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
0724: 09 00    ADC   A,0x0              (0169)     adc     A, 0
0726: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
0727: 08       PUSH  A                  (0171)     push    A
0728: 28       ROMX                     (0172)     romx                            ; load config data from the table
0729: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
072A: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
072C: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
072E: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
072F: 20       POP   X                  (0177)     pop     X
0730: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
0731: 09 00    ADC   A,0x0              (0179)     adc     A, 0
0733: 8F D7    JMP   0x070B             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
0735: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
0737: 70 3F    AND   F,0x3F             
0739: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
073B: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
073C: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
073D: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
073E: 43 DF 40 OR    REG[0xDF],0x40     (0002) ;;*****************************************************************************
0741: 43 DF 80 OR    REG[0xDF],0x80     
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0744: 7F       RET                      (0182)    ret
0745: 41 DF BF AND   REG[0xDF],0xBF     
0748: 41 DF 7F AND   REG[0xDF],0x7F     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
074B: 7F       RET                      (0214)    ret
074C: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
074E: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
0750: A0 07    JZ    0x0758             (0249)    jz    .SetModeRegEmpty
0752: 43 58 10 OR    REG[0x58],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
0755: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
0757: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
0758: 41 58 EF AND   REG[0x58],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
075B: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
075D: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
075E: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
0760: 60 5B    MOV   REG[0x5B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
0762: 60 5F    MOV   REG[0x5F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0764: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0765: 41 5B FE AND   REG[0x5B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
0768: 41 5F FE AND   REG[0x5F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
076B: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
076C: 60 59    MOV   REG[0x59],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
076E: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
076F: 5D 5B    MOV   A,REG[0x5B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0771: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0772: 5D 5E    MOV   A,REG[0x5E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0774: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0775: 5D 5F    MOV   A,REG[0x5F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
0777: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
0778: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
077A: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
077C: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
077E: A0 06    JZ    0x0785             (0492)    jz   .SetTxCmpMode
                                        (0493) 
0780: 41 58 EF AND   REG[0x58],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
0783: 80 04    JMP   0x0788             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0785: 43 58 10 OR    REG[0x58],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
0788: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
078A: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
078B: 08       PUSH  A                  (0536)    push A
078C: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
078E: A0 06    JZ    0x0795             (0538)    jz   .DisRxInt
0790: 43 DF 80 OR    REG[0xDF],0x80     
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
0793: 80 04    JMP   0x0798             (0541)    jmp  .CheckTxInt
0795: 41 DF 7F AND   REG[0xDF],0x7F     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
0798: 18       POP   A                  (0547)    pop  A
0799: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
079B: A0 06    JZ    0x07A2             (0549)    jz   .DisTxInt
079D: 43 DF 40 OR    REG[0xDF],0x40     
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
07A0: 80 04    JMP   0x07A5             (0552)    jmp  .End_IntCntl
07A2: 41 DF BF AND   REG[0xDF],0xBF     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
07A5: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
07B6: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
07B7: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
07B8: 67       ASR   A                  (0603)    asr   A
07B9: 67       ASR   A                  (0604)    asr   A
07BA: 67       ASR   A                  (0605)    asr   A
07BB: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
07BD: FF E7    INDEX 0x07A6             (0607)    index UART_HEX_STR                  ; Get Hex value
07BF: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
07C1: 18       POP   A                  (0609)    pop   A                             ; Restore value
07C2: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
07C4: FF E0    INDEX 0x07A6             (0611)    index UART_HEX_STR                  ; Get Hex value
07C6: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
07C8: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
07C9: 4B       SWAP  A,X                (0645)    swap  A,X
07CA: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
07CC: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
07CD: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
07CF: 7F       RET                      (0650)    ret
07D0: 49 5B 10 TST   REG[0x5B],0x10     
07D3: AF FC    JZ    _UART_PutChar      
07D5: 60 59    MOV   REG[0x59],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
07D7: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
07D8: 49 5F 08 TST   REG[0x5F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
07DB: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
07DD: 5D 5E    MOV   A,REG[0x5E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
07DF: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
07E0: 5D 5F    MOV   A,REG[0x5F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
07E2: 08       PUSH  A                  (0756)    push A
07E3: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
07E5: B0 04    JNZ   0x07EA             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
07E7: 18       POP   A                  (0759)    pop  A
07E8: 80 0B    JMP   0x07F4             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
07EA: 5D 5E    MOV   A,REG[0x5E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
07EC: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
07ED: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
07EE: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
07F0: B0 03    JNZ   0x07F4             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
07F2: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
07F3: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
07F4: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
07F6: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
07F7: 5D 5F    MOV   A,REG[0x5F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
07F9: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
07FB: 08       PUSH  A                  (0819)    push A
07FC: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
07FE: B0 07    JNZ   0x0806             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0800: 18       POP   A                  (0822)    pop  A
0801: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
0803: 4B       SWAP  A,X                (0824)    swap A,X
0804: 80 07    JMP   0x080C             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0806: 18       POP   A                  (0828)    pop  A
0807: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
0809: 4B       SWAP  A,X                (0830)    swap A,X
080A: 5D 5E    MOV   A,REG[0x5E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
080C: 7F       RET                      (0836)    ret
080D: 70 BF    AND   F,0xBF             
080F: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0811: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0813: A0 06    JZ    0x081A             (0872)    jz    End_PutString                           ; Check for end of string
0815: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
0817: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
0818: 8F F8    JMP   0x0811             (0875)    jmp   .PutStringLoop                          ; Get next character
081A: 70 3F    AND   F,0x3F             
081C: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
081E: 7F       RET                      (0879)    ret
081F: 70 BF    AND   F,0xBF             
0821: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0824: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0825: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0827: A0 1A    JZ    0x0842             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0829: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
082B: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
082D: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
082F: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0831: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0833: 49 5B 10 TST   REG[0x5B],0x10     
0836: AF FC    JZ    0x0833             
0838: 60 59    MOV   REG[0x59],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
083A: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
083B: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
083E: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0840: 8F E4    JMP   0x0825             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
0842: 70 3F    AND   F,0x3F             
0844: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0846: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
0847: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
0848: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
084B: B0 06    JNZ   0x0852             (0980)    jnz   .CW_WRITEIT
084D: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
0850: A0 1D    JZ    0x086E             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
0852: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
0853: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
0855: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
0857: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
0858: 49 5B 10 TST   REG[0x5B],0x10     
085B: AF FC    JZ    0x0858             
085D: 60 59    MOV   REG[0x59],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
085F: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
0860: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0863: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
0866: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
0869: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
086C: 8F DB    JMP   0x0848             (0995)    jmp   .CW_Loop
086E: 70 3F    AND   F,0x3F             
0870: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
0872: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
0873: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0874: 10       PUSH  X                  (1030)    push  X
0875: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
0876: A0 0B    JZ    0x0882             (1032)    jz    .End_CPutString
0878: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
087A: 20       POP   X                  (1034)    pop   X
087B: 18       POP   A                  (1035)    pop   A
087C: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
087D: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
087F: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
0880: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
0882: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0884: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0885: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
0887: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
0889: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
088B: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
088D: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\spimint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIMINT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:
                                        (0008) ;;    Interrupt handler routine for SPIM user module instance: SPIM.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "SPIM.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) export  _SPIM_ISR
                                        (0023) 
                                        (0024) 
                                        (0025) AREA InterruptRAM (RAM,REL,CON)
                                        (0026) 
                                        (0027) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0028) ;---------------------------------------------------
                                        (0029) ; Insert your custom declarations below this banner
                                        (0030) ;---------------------------------------------------
                                        (0031) 
                                        (0032) ;------------------------
                                        (0033) ; Includes
                                        (0034) ;------------------------
                                        (0035) 
                                        (0036) 	
                                        (0037) ;------------------------
                                        (0038) ;  Constant Definitions
                                        (0039) ;------------------------
                                        (0040) 
                                        (0041) 
                                        (0042) ;------------------------
                                        (0043) ; Variable Allocation
                                        (0044) ;------------------------
                                        (0045) 
                                        (0046) 
                                        (0047) ;---------------------------------------------------
                                        (0048) ; Insert your custom declarations above this banner
                                        (0049) ;---------------------------------------------------
                                        (0050) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0051) 
                                        (0052) 
                                        (0053) AREA UserModules (ROM, REL)
                                        (0054) 
                                        (0055) ;-----------------------------------------------------------------------------
                                        (0056) ;  FUNCTION NAME: _SPIM_ISR
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0059) ;
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;
                                        (0062) 
                                        (0063) _SPIM_ISR:
                                        (0064) 
                                        (0065)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0066)    ;---------------------------------------------------
                                        (0067)    ; Insert your custom assembly code below this banner
                                        (0068)    ;---------------------------------------------------
                                        (0069)    ;   NOTE: interrupt service routines must preserve
                                        (0070)    ;   the values of the A and X CPU registers.
                                        (0071)    
                                        (0072)    ;---------------------------------------------------
                                        (0073)    ; Insert your custom assembly code above this banner
                                        (0074)    ;---------------------------------------------------
                                        (0075)    
                                        (0076)    ;---------------------------------------------------
                                        (0077)    ; Insert a lcall to a C function below this banner
                                        (0078)    ; and un-comment the lines between these banners
                                        (0079)    ;---------------------------------------------------
                                        (0080)    
                                        (0081)    ;PRESERVE_CPU_CONTEXT
                                        (0082)    ;lcall _My_C_Function
                                        (0083)    ;RESTORE_CPU_CONTEXT
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function above this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0090) 
088E: 7E       RETI                     (0091)    reti
                                        (0092) 
                                        (0093) 
                                        (0094) ; end of file SPIMINT.asm
FILE: lib\spim.asm                      (0001) ;;*****************************************************************************
088F: 43 DF 08 OR    REG[0xDF],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIM.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SPIM User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "SPIM.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export   SPIM_EnableInt
                                        (0030) export  _SPIM_EnableInt
                                        (0031) export   SPIM_DisableInt
                                        (0032) export  _SPIM_DisableInt
                                        (0033) export   SPIM_Start
                                        (0034) export  _SPIM_Start
                                        (0035) export   SPIM_Stop
                                        (0036) export  _SPIM_Stop
                                        (0037) export   SPIM_SendTxData
                                        (0038) export  _SPIM_SendTxData
                                        (0039) export   SPIM_bReadRxData
                                        (0040) export  _SPIM_bReadRxData
                                        (0041) export   SPIM_bReadStatus
                                        (0042) export  _SPIM_bReadStatus
                                        (0043) 
                                        (0044) // These globals will be removed in a future release
                                        (0045) // Do not use
                                        (0046) export   bSPIM_ReadRxData
                                        (0047) export  _bSPIM_ReadRxData
                                        (0048) export   bSPIM_ReadStatus
                                        (0049) export  _bSPIM_ReadStatus
                                        (0050) 
                                        (0051) ;-----------------------------------------------
                                        (0052) ;  Constant Definitions
                                        (0053) ;-----------------------------------------------
                                        (0054) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0055) 
                                        (0056) 
                                        (0057) area UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: SPIM_EnableInt
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Enables the SPIM interrupt by setting the interrupt enable mask
                                        (0065) ;     bit associated with this User Module.
                                        (0066) ;
                                        (0067) ;     NOTE:  Remember to enable the global interrupt by calling the
                                        (0068) ;           M8C global macro: M8C_EnableGInt
                                        (0069) ;
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:  none
                                        (0073) ;
                                        (0074) ;  RETURNS:  none
                                        (0075) ;
                                        (0076) ;  SIDE EFFECTS: 
                                        (0077) ;    The A and X registers may be modified by this or future implementations
                                        (0078) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0079) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0080) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0081) ;    functions.
                                        (0082) ;
                                        (0083) ;  THEORY of OPERATION or PROCEDURE:
                                        (0084) ;     Sets the specific user module interrupt enable mask bit.
                                        (0085) ;
                                        (0086)  SPIM_EnableInt:
                                        (0087) _SPIM_EnableInt:
                                        (0088)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0089)    M8C_EnableIntMask SPIM_INT_REG, SPIM_bINT_MASK
                                        (0090)    RAM_EPILOGUE RAM_USE_CLASS_1
0892: 7F       RET                      (0091)    ret
0893: 41 DF F7 AND   REG[0xDF],0xF7     
                                        (0092) 
                                        (0093) .ENDSECTION
                                        (0094) 
                                        (0095) .SECTION
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;  FUNCTION NAME: SPIM_DisableInt
                                        (0098) ;
                                        (0099) ;  DESCRIPTION:
                                        (0100) ;     Disables this SPIM's interrupt by clearing the interrupt enable mask bit
                                        (0101) ;     associated with this User Module.
                                        (0102) ;
                                        (0103) ;-----------------------------------------------------------------------------
                                        (0104) ;
                                        (0105) ;  ARGUMENTS:  none
                                        (0106) ;
                                        (0107) ;  RETURNS:  none
                                        (0108) ;
                                        (0109) ;  SIDE EFFECTS: 
                                        (0110) ;    The A and X registers may be modified by this or future implementations
                                        (0111) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0112) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0113) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0114) ;    functions.
                                        (0115) ;
                                        (0116) ;  THEORY of OPERATION or PROCEDURE:
                                        (0117) ;     Clears the specific user module interrupt enable mask bit.
                                        (0118) ;
                                        (0119)  SPIM_DisableInt:
                                        (0120) _SPIM_DisableInt:
                                        (0121)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0122)    M8C_DisableIntMask SPIM_INT_REG, SPIM_bINT_MASK
                                        (0123)    RAM_EPILOGUE RAM_USE_CLASS_1
0896: 7F       RET                      (0124)    ret
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: SPIM_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit, SPI mode, and LSB/MSB first configuration of the SPIM
                                        (0134) ;     user module.
                                        (0135) ;
                                        (0136) ;     Transmission will begin transmitting when a byte is written into the TX buffer
                                        (0137) ;     using the SPIM_SendTxData function.
                                        (0138) ;
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140) ;
                                        (0141) ;  ARGUMENTS:
                                        (0142) ;     BYTE bConfiguration - Consists of SPI Mode and LSB/MSB first bit.
                                        (0143) ;           Use defined masks - masks can be OR'd together.
                                        (0144) ;     PASSED in Accumulator.
                                        (0145) ;
                                        (0146) ;  RETURNS:  none
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS: 
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155) ;  THEORY of OPERATION or PROCEDURE:
                                        (0156) ;     1) Set all Slave Select outputs high
                                        (0157) ;     2) Set the specified SPI configuration bits in the Control register.
                                        (0158) ;
                                        (0159)  SPIM_Start:
                                        (0160) _SPIM_Start:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    ; setup the SPIM configuration setting
0897: 29 01    OR    A,0x1              (0163)    or    A, bfCONTROL_REG_START_BIT
0899: 60 4F    MOV   REG[0x4F],A        (0164)    mov   REG[SPIM_CONTROL_REG], A
                                        (0165)    RAM_EPILOGUE RAM_USE_CLASS_1
089B: 7F       RET                      (0166)    ret
                                        (0167) 
                                        (0168) .ENDSECTION
                                        (0169) 
                                        (0170) .SECTION
                                        (0171) ;-----------------------------------------------------------------------------
                                        (0172) ;  FUNCTION NAME: SPIM_Stop
                                        (0173) ;
                                        (0174) ;  DESCRIPTION:
                                        (0175) ;     Disables SPIM operation.
                                        (0176) ;
                                        (0177) ;-----------------------------------------------------------------------------
                                        (0178) ;
                                        (0179) ;  ARGUMENTS:  none
                                        (0180) ;
                                        (0181) ;  RETURNS:  none
                                        (0182) ;
                                        (0183) ;  SIDE EFFECTS: 
                                        (0184) ;    The A and X registers may be modified by this or future implementations
                                        (0185) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0186) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0187) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0188) ;    functions.
                                        (0189) ;
                                        (0190) ;  THEORY of OPERATION or PROCEDURE:
                                        (0191) ;     Clear the start bit in the Control register.
                                        (0192) ;
                                        (0193)  SPIM_Stop:
                                        (0194) _SPIM_Stop:
                                        (0195)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0196)    ; clear the SPIM stop bits
089C: 41 4F FE AND   REG[0x4F],0xFE     (0197)    and   REG[SPIM_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0198)    RAM_EPILOGUE RAM_USE_CLASS_1
089F: 7F       RET                      (0199)    ret
                                        (0200) 
                                        (0201) .ENDSECTION
                                        (0202) 
                                        (0203) .SECTION
                                        (0204) ;-----------------------------------------------------------------------------
                                        (0205) ;  FUNCTION NAME: SPIM_SendTxData
                                        (0206) ;
                                        (0207) ;  DESCRIPTION:
                                        (0208) ;     Initiates an SPI data transfer.
                                        (0209) ;
                                        (0210) ;-----------------------------------------------------------------------------
                                        (0211) ;
                                        (0212) ;  ARGUMENTS:
                                        (0213) ;     BYTE  bTxData - data to transmit.
                                        (0214) ;        Passed in Accumulator.
                                        (0215) ;
                                        (0216) ;  RETURNS:  none
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS: 
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;
                                        (0225) ;  THEORY of OPERATION or PROCEDURE:
                                        (0226) ;     Writes data to the TX buffer register.
                                        (0227) ;
                                        (0228)  SPIM_SendTxData:
                                        (0229) _SPIM_SendTxData:
                                        (0230)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0231)    ; Transmit the data!
08A0: 60 4D    MOV   REG[0x4D],A        (0232)    mov REG[SPIM_TX_BUFFER_REG], A
                                        (0233)    RAM_EPILOGUE RAM_USE_CLASS_1
08A2: 7F       RET                      (0234)    ret
                                        (0235) 
                                        (0236) .ENDSECTION
                                        (0237) 
                                        (0238) .SECTION
                                        (0239) ;-----------------------------------------------------------------------------
                                        (0240) ;  FUNCTION NAME: SPIM_bReadRxData
                                        (0241) ;
                                        (0242) ;  DESCRIPTION:
                                        (0243) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0244) ;     sure data is valid.
                                        (0245) ;
                                        (0246) ;-----------------------------------------------------------------------------
                                        (0247) ;
                                        (0248) ;  ARGUMENTS:  none
                                        (0249) ;
                                        (0250) ;  RETURNS:
                                        (0251) ;     bRxData - returned in A.
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS: 
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260) ;  THEORY of OPERATION or PROCEDURE:
                                        (0261) ;
                                        (0262)  SPIM_bReadRxData:
                                        (0263) _SPIM_bReadRxData:
                                        (0264)  bSPIM_ReadRxData:
                                        (0265) _bSPIM_ReadRxData:
                                        (0266)    RAM_PROLOGUE RAM_USE_CLASS_1
08A3: 5D 4E    MOV   A,REG[0x4E]        (0267)    mov A, REG[SPIM_RX_BUFFER_REG]
                                        (0268)    RAM_EPILOGUE RAM_USE_CLASS_1   
08A5: 7F       RET                      (0269)    ret
                                        (0270) 
                                        (0271) 
                                        (0272) .ENDSECTION
                                        (0273) 
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME: SPIM_ReadStatus
                                        (0277) ;
                                        (0278) ;  DESCRIPTION:
                                        (0279) ;     Reads the SPIM Status bits in the Control/Status register.
                                        (0280) ;
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;
                                        (0283) ;  ARGUMENTS:  none
                                        (0284) ;
                                        (0285) ;  RETURNS:
                                        (0286) ;     BYTE  bStatus - transmit status data.  Use the defined bit masks.
                                        (0287) ;        Returned in Accumulator.
                                        (0288) ;
                                        (0289) ;  SIDE EFFECTS: 
                                        (0290) ;    The A and X registers may be modified by this or future implementations
                                        (0291) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0292) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0293) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0294) ;    functions.
                                        (0295) ;
                                        (0296) ;  THEORY of OPERATION or PROCEDURE:
                                        (0297) ;     Read the status and control register.
                                        (0298) ;
                                        (0299)  SPIM_bReadStatus:
                                        (0300) _SPIM_bReadStatus:
                                        (0301)  bSPIM_ReadStatus:
                                        (0302) _bSPIM_ReadStatus:
                                        (0303)    RAM_PROLOGUE RAM_USE_CLASS_1
08A6: 5D 4F    MOV   A,REG[0x4F]        (0304)    mov A,  REG[SPIM_CONTROL_REG]
                                        (0305)    RAM_EPILOGUE RAM_USE_CLASS_1   
08A8: 7F       RET                      (0306)    ret
                                        (0307) 
                                        (0308) .ENDSECTION
                                        (0309) 
                                        (0310) ; End of File SPIM.asm
FILE: lib\sleeptimerint.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   SleepTimerINT.asm
                                        (0004) ;;  Version: 1.0, Updated on 2015/3/4 at 22:26:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  SleepTimer Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "SleepTimer.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "m8c.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export  _SleepTimer_ISR
                                        (0021) 
                                        (0022) 
                                        (0023) export  SleepTimer_fTick
                                        (0024) export _SleepTimer_fTick
                                        (0025) export  SleepTimer_bTimerValue
                                        (0026) export _SleepTimer_bTimerValue
                                        (0027) export  SleepTimer_bCountDown
                                        (0028) export _SleepTimer_bCountDown
                                        (0029) export  SleepTimer_TickCount
                                        (0030) export _SleepTimer_TickCount
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ; Variable Allocation
                                        (0034) ;-----------------------------------------------
                                        (0035) AREA InterruptRAM (RAM, REL, CON)
                                        (0036) 
                                        (0037)  SleepTimer_fTick:
                                        (0038) _SleepTimer_fTick:        BLK  1
                                        (0039) 
                                        (0040)  SleepTimer_bTimerValue:
                                        (0041) _SleepTimer_bTimerValue:  BLK  1
                                        (0042) 
                                        (0043)  SleepTimer_bCountDown:
                                        (0044) _SleepTimer_bCountDown:   BLK  1
                                        (0045) 
                                        (0046)  SleepTimer_TickCount:
                                        (0047) _SleepTimer_TickCount:    BLK  SleepTimer_TICK_CNTR_SIZE
                                        (0048) 
                                        (0049) 
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _SleepTimer_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;      interrupt handler for instance SleepTimer.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _SleepTimer_ISR:
                                        (0090) 
08A9: 2E 00 01 OR    [0x0],0x1          (0091)    or   [SleepTimer_fTick],0x01           ; Set tick flag
                                        (0092)  
                                        (0093)                                                 ; Decrement CountDown (Sync counter)
08AC: 47 02 FF TST   [0x2],0xFF         (0094)    tst  [SleepTimer_bCountDown],0xFF
08AF: A0 03    JZ    0x08B3             (0095)    jz   .DoTimer
08B1: 7A 02    DEC   [0x2]              (0096)    dec  [SleepTimer_bCountDown]
                                        (0097) 
                                        (0098) .DoTimer:                                       ; Decrement TimerValue, if required
08B3: 47 01 FF TST   [0x1],0xFF         (0099)    tst  [SleepTimer_bTimerValue],0xFF
08B6: A0 03    JZ    0x08BA             (0100)    jz   .IncBigCounter
08B8: 7A 01    DEC   [0x1]              (0101)    dec  [SleepTimer_bTimerValue]
                                        (0102) 
                                        (0103) .IncBigCounter:                                 ; Increment big tick counter
                                        (0104) IF (SleepTimer_TICK_CNTR_SIZE & 0x04)
08BA: 76 06    INC   [0x6]              (0105)    inc  [SleepTimer_TickCount+3]
08BC: D0 0B    JNC   0x08C8             (0106)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0107) 
08BE: 76 05    INC   [0x5]              (0108)    inc  [SleepTimer_TickCount+2]
08C0: D0 07    JNC   0x08C8             (0109)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0110) ENDIF
                                        (0111) 
                                        (0112) IF (SleepTimer_TICK_CNTR_SIZE & (0x04|0x02))
08C2: 76 04    INC   [0x4]              (0113)    inc  [SleepTimer_TickCount+1]
08C4: D0 03    JNC   0x08C8             (0114)    jnc  SleepTimer_SLEEP_ISR_END
                                        (0115) ENDIF
                                        (0116) 
08C6: 76 03    INC   [0x3]              (0117)    inc  [SleepTimer_TickCount+0]
                                        (0118) 
                                        (0119) SleepTimer_SLEEP_ISR_END:
                                        (0120) 
                                        (0121)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ; Insert your custom assembly code below this banner
                                        (0124)    ;---------------------------------------------------
                                        (0125)    ;   NOTE: interrupt service routines must preserve
                                        (0126)    ;   the values of the A and X CPU registers.
                                        (0127)    
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ; Insert your custom assembly code above this banner
                                        (0130)    ;---------------------------------------------------
                                        (0131)    
                                        (0132)    ;---------------------------------------------------
                                        (0133)    ; Insert a lcall to a C function below this banner
                                        (0134)    ; and un-comment the lines between these banners
                                        (0135)    ;---------------------------------------------------
                                        (0136)    
                                        (0137)    ;PRESERVE_CPU_CONTEXT
                                        (0138)    ;lcall _My_C_Function
                                        (0139)    ;RESTORE_CPU_CONTEXT
                                        (0140)    
                                        (0141)    ;---------------------------------------------------
                                        (0142)    ; Insert a lcall to a C function above this banner
                                        (0143)    ; and un-comment the lines between these banners
                                        (0144)    ;---------------------------------------------------
                                        (0145)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0146) 
08C8: 7E       RETI                     (0147)    reti
                                        (0148) 
                                        (0149) ; end of file SleepTimerINT.asm
                                        (0150) 
FILE: lib\pga.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2015/3/4 at 22:26:46
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_Start
                                        (0060) export _PGA_Start
                                        (0061) export  PGA_SetPower
                                        (0062) export _PGA_SetPower
                                        (0063) 
                                        (0064) export  PGA_SetGain
                                        (0065) export _PGA_SetGain
                                        (0066) 
                                        (0067) export  PGA_Stop
                                        (0068) export _PGA_Stop
                                        (0069) 
                                        (0070) IF (PGA_AGNDBUFAPI)
                                        (0071) export  PGA_EnableAGNDBuffer
                                        (0072) export _PGA_EnableAGNDBuffer
                                        (0073) export  PGA_DisableAGNDBuffer
                                        (0074) export _PGA_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_Start
                                        (0092) ;  FUNCTION NAME: PGA_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_Start:
                                        (0111) _PGA_Start:
                                        (0112)  PGA_SetPower:
                                        (0113) _PGA_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
08C9: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
08CB: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
08CC: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
08CD: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_GAIN_CR2]                               ; read power value
08CF: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
08D1: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
08D3: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_GAIN_CR2], A                          ; move complete value back to register
08D5: 18       POP   A                  (0124)    pop  A
08D6: 70 3F    AND   F,0x3F             
08D8: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
08DA: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_SetGain:
                                        (0154) _PGA_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
08DB: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
08DD: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
08DE: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
08DF: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_GAIN_CR0]                               ; read mux settings
08E1: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
08E3: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
08E6: B0 0E    JNZ   0x08F5             (0164)    jnz  .SETHIGHGAIN
08E8: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_GAIN_CR3],~EXGAIN                          ; Clear High Gain bit.
08EB: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
08ED: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
08EF: 18       POP   A                  (0168)    pop  A
08F0: 70 3F    AND   F,0x3F             
08F2: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
08F4: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
08F5: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
08F8: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
08FA: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
08FC: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_GAIN_CR3], EXGAIN                          ; Set High Gain bit.
08FF: 18       POP   A                  (0177)    pop  A
0900: 70 3F    AND   F,0x3F             
0902: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
0904: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_Stop:
                                        (0203) _PGA_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0905: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0908: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_EnableAGNDBuffer:
                                        (0233) _PGA_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_DisableAGNDBuffer:
                                        (0261) _PGA_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0909: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
090A: 10       PUSH  X                  (0209)     push  X
090B: 28       ROMX                     (0210)     romx                               ; Get character from ROM
090C: B0 04    JNZ   0x0911             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
090E: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
090F: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0910: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0911: 90 44    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
0913: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0914: 18       POP   A                  (0220)     pop   A
0915: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0916: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0918: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0919: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
092B: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
092C: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
092D: 67       ASR   A                  (0262)     asr   A
092E: 67       ASR   A                  (0263)     asr   A
092F: 67       ASR   A                  (0264)     asr   A
0930: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0932: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
0934: 90 21    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
0936: 18       POP   A                  (0268)     pop   A                            ; Restore value
0937: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0939: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
093B: 90 1A    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
093D: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
093E: 4B       SWAP  A,X                (0305)     swap  A,X
093F: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
0941: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0942: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0944: 7F       RET                      (0310)     ret
0945: 70 BF    AND   F,0xBF             
0947: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0949: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
094B: A0 06    JZ    0x0952             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
094D: 90 08    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
094F: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0950: 8F F8    JMP   0x0949             (0351)     jmp   .Loop_PrString               ; Go get next character
0952: 70 3F    AND   F,0x3F             
0954: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0956: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0957: 90 65    CALL  0x09BE             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0959: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
095A: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
095B: 67       ASR   A                  (0390)     asr   A
095C: 67       ASR   A                  (0391)     asr   A
095D: 67       ASR   A                  (0392)     asr   A
095E: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0960: 90 3B    CALL  0x099D             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0962: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0963: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0965: 40       NOP                      (0397)     nop
0966: 40       NOP                      (0398)     nop
0967: 40       NOP                      (0399)     nop
0968: 90 33    CALL  0x099D             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
096A: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
096B: 90 51    CALL  0x09BE             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
096D: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
096E: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
096F: 67       ASR   A                  (0436)     asr   A
0970: 67       ASR   A                  (0437)     asr   A
0971: 67       ASR   A                  (0438)     asr   A
0972: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0974: 90 09    CALL  0x097F             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0976: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0977: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0979: 40       NOP                      (0443)     nop
097A: 40       NOP                      (0444)     nop
097B: 40       NOP                      (0445)     nop
097C: 90 01    CALL  0x097F             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
097E: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
097F: 08       PUSH  A                  (0477)     push  A
0980: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0983: 26 07 80 AND   [0x7],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0986: 51 07    MOV   A,[0x7]            (0480)     mov   A,[Port_2_Data_SHADE]
0988: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
098A: 18       POP   A                  (0483)     pop   A
098B: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
098D: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
098F: 2A 07    OR    A,[0x7]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0991: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0993: 53 07    MOV   [0x7],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0995: 40       NOP                      (0489)     nop
0996: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0998: 53 07    MOV   [0x7],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
099A: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
099C: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
099D: 08       PUSH  A                  (0523)     push  A
099E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
09A1: 26 07 80 AND   [0x7],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
09A4: 2E 07 20 OR    [0x7],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
09A7: 51 07    MOV   A,[0x7]            (0527)     mov   A,[Port_2_Data_SHADE]
09A9: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
09AB: 18       POP   A                  (0530)     pop   A
09AC: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
09AE: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
09B0: 2A 07    OR    A,[0x7]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
09B2: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
09B4: 53 07    MOV   [0x7],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
09B6: 40       NOP                      (0536)     NOP
09B7: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
09B9: 53 07    MOV   [0x7],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
09BB: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
09BD: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
09BE: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
09BF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
09C2: 26 07 80 AND   [0x7],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
09C5: 51 07    MOV   A,[0x7]            (0574)     mov   A,[Port_2_Data_SHADE]
09C7: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
09C9: 26 08 F0 AND   [0x8],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
09CC: 51 08    MOV   A,[0x8]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
09CE: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
09D0: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
09D2: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
09D4: 2E 07 40 OR    [0x7],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
09D7: 51 07    MOV   A,[0x7]            (0584)     mov   A,[Port_2_Data_SHADE]
09D9: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
09DB: 40       NOP                      (0586)     NOP
                                        (0587) 
09DC: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
09DD: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
09DF: 2E 07 50 OR    [0x7],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
09E2: 51 07    MOV   A,[0x7]            (0593)     mov   A,[Port_2_Data_SHADE]
09E4: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
09E6: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
09E7: 40       NOP                      (0597)     nop
09E8: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
09EA: 08       PUSH  A                  (0610)     push  A
09EB: 26 07 C0 AND   [0x7],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
09EE: 51 07    MOV   A,[0x7]            (0612)     mov   A,[Port_2_Data_SHADE]
09F0: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
09F2: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
09F3: 40       NOP                      (0616)     nop                                    ; fastest PSoC
09F4: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
09F5: 2E 07 50 OR    [0x7],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
09F8: 51 07    MOV   A,[0x7]            (0620)     mov   A,[Port_2_Data_SHADE]
09FA: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
09FC: 40       NOP                      (0623)     nop
09FD: 40       NOP                      (0624)     nop
                                        (0625) 
09FE: 26 07 C0 AND   [0x7],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0A01: 51 07    MOV   A,[0x7]            (0627)     mov   A,[Port_2_Data_SHADE]
0A03: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0A05: 18       POP   A                  (0630)     pop   A
0A06: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0A08: A0 04    JZ    0x0A0D             (0633)     jz    .UNLOCK
0A0A: 79       DEC   X                  (0634)     dec   X
0A0B: BF D3    JNZ   0x09DF             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0A0D: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0A0E: 2E 08 7F OR    [0x8],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0A11: 51 08    MOV   A,[0x8]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0A13: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0A15: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0A17: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0A19: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0A1A: 7F       RET                      (0646)     ret
0A1B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0A1E: 26 08 80 AND   [0x8],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0A21: 2E 08 7F OR    [0x8],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0A24: 26 09 80 AND   [0x9],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
0A27: 51 08    MOV   A,[0x8]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0A29: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0A2B: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0A2D: 51 09    MOV   A,[0x9]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0A2F: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0A31: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0A33: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0A35: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
0A37: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0A39: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0A3B: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0A3D: 9F 40    CALL  0x097F             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0A3F: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0A41: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0A43: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0A45: 9F 38    CALL  0x097F             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
0A47: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0A49: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0A4B: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0A4D: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0A4F: 9F 2E    CALL  0x097F             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0A51: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A53: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0A55: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0A57: 9F 26    CALL  0x097F             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0A59: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A5B: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0A5D: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0A5F: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
0A61: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A63: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0A65: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0A67: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
0A69: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A6B: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0A6D: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0A6F: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0A71: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0A73: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0A75: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0A77: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0A79: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0A7B: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0A7D: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0A7F: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0A81: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0A83: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0A85: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A87: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0A89: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0A8E: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0A90: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0A91: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0A93: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0A94: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0A96: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0A97: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
0A99: 70 3F    AND   F,0x3F             
0A9B: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0A9D: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0A9E: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0AA0: 78       DEC   A                  (0828)     dec   A
0AA1: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0AA3: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0AAC: 08       PUSH  A                  (0871)     push  A
0AAD: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0AAF: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0AB1: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0AB3: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0AB5: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0AB7: D0 06    JNC   0x0ABE             (0877)     jnc   .Delay50u_End
0AB9: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0ABB: 78       DEC   A                  (0880)     dec   A                              ; [4]
0ABC: BF FE    JNZ   0x0ABB             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0ABE: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0ABF: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\delsigint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DelSigINT.asm
                                        (0004) ;;   Version: 1.50, Updated on 2015/3/4 at 22:25:16
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler interrupt service routine for the Delta-Sigma ADC
                                        (0008) ;;               User Module based on the Type 2 Decimator. This code works for
                                        (0009) ;;               both the first and second-order modulator topologies where
                                        (0010) ;;               the decimation rate requires no extra shift of 8-bit data
                                        (0011) ;;               (or narrower) in software.
                                        (0012) ;;-----------------------------------------------------------------------------
                                        (0013) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0014) ;;*****************************************************************************
                                        (0015) ;;*****************************************************************************
                                        (0016) 
                                        (0017) include "m8c.inc"
                                        (0018) include "memory.inc"
                                        (0019) include "DelSig.inc"
                                        (0020) 
                                        (0021) 
                                        (0022) ;-----------------------------------------------
                                        (0023) ;  Global Symbols
                                        (0024) ;-----------------------------------------------
                                        (0025) 
                                        (0026) export _DelSig_ADConversion_ISR
                                        (0027) export _DelSig_cResult
                                        (0028) export  DelSig_cResult
                                        (0029) export _DelSig_bfStatus
                                        (0030) export  DelSig_bfStatus
                                        (0031) 
                                        (0032) 
                                        (0033) ;-----------------------------------------------
                                        (0034) ; Variable Allocation
                                        (0035) ;-----------------------------------------------
                                        (0036) AREA InterruptRAM (RAM, REL, CON)
                                        (0037) 
                                        (0038) _DelSig_cResult:
                                        (0039)  DelSig_cResult:                   blk 1             ;ADC output value
                                        (0040) _DelSig_bfStatus:
                                        (0041)  DelSig_bfStatus:                  blk 1             ;Data Valid Flag
                                        (0042) 
                                        (0043) 
                                        (0044) ;-----------------------------------------------
                                        (0045) ;  Private Symbols
                                        (0046) ;-----------------------------------------------
                                        (0047) MSB:                               equ 0
                                        (0048) LSB:                               equ 1
                                        (0049) RES:                               equ 8
                                        (0050) UMAX:                              equ (1<<RES) - 1  ; 2^RES - 1
                                        (0051) 
                                        (0052) 
                                        (0053) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0054) ;---------------------------------------------------
                                        (0055) ; Insert your custom declarations below this banner
                                        (0056) ;---------------------------------------------------
                                        (0057) 
                                        (0058) ;------------------------
                                        (0059) ; Includes
                                        (0060) ;------------------------
                                        (0061) 
                                        (0062) ;------------------------
                                        (0063) ; Exports
                                        (0064) ;------------------------
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Constant Definitions
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) ;------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;------------------------
                                        (0073) 
                                        (0074) ;---------------------------------------------------
                                        (0075) ; Insert your custom declarations above this banner
                                        (0076) ;---------------------------------------------------
                                        (0077) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0078) 
                                        (0079) 
                                        (0080) AREA UserModules (ROM, REL, CON)
                                        (0081) 
                                        (0082) ;;=============================================================================
                                        (0083) ;;  FUNCTION NAME: _DelSig_ADConversion_ISR:
                                        (0084) ;;=============================================================================
                                        (0085) ;;
                                        (0086) _DelSig_ADConversion_ISR:
0AC0: 08       PUSH  A                  (0087)    push  A
0AC1: 5D E4    MOV   A,REG[0xE4]        (0088)    mov   A, reg[DEC_DH]               ; Is value == 2^RES?
0AC3: A0 07    JZ    0x0ACB             (0089)    jz    .NoOverflow                  ;    No, data is in normal range
0AC5: 5D E5    MOV   A,REG[0xE5]        (0090)    mov   A, reg[DEC_DL]
0AC7: 50 FF    MOV   A,0xFF             (0091)    mov   A, UMAX                      ;   Yes, limit to 2^RES - 1
0AC9: 80 03    JMP   0x0ACD             (0092)    jmp   .ConversionReady
                                        (0093) 
                                        (0094) .NoOverflow:
0ACB: 5D E5    MOV   A,REG[0xE5]        (0095)    mov   A, reg[DEC_DL]
                                        (0096) 
                                        (0097) .ConversionReady:
                                        (0098) IF DelSig_2S_COMPLEMENT
                                        (0099)    ; Internal hardware format is unsigned; convert so zero is half scale
0ACD: 11 80    SUB   A,0x80             (0100)    sub   A, (UMAX+1)>>1
                                        (0101) ENDIF
0ACF: 53 0A    MOV   [0xA],A            (0102)    mov [DelSig_cResult],  A
0AD1: 55 0B 10 MOV   [0xB],0x10         (0103)    mov [DelSig_bfStatus], DelSig_DATA_READY_BIT                ; Set valid data flag
                                        (0104) 
                                        (0105) 
                                        (0106)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0107)    ;---------------------------------------------------
                                        (0108)    ; Insert your custom code below this banner
                                        (0109)    ;---------------------------------------------------
                                        (0110) 
                                        (0111) 
                                        (0112)    ;---------------------------------------------------
                                        (0113)    ; Insert your custom code above this banner
                                        (0114)    ;---------------------------------------------------
                                        (0115)    ;@PSoC_UserCode_END@ (Do not change this line.)
0AD4: 18       POP   A                  (0116)    pop   A
0AD5: 7E       RETI                     (0117)    reti
                                        (0118) 
                                        (0119) ; end of file DelSigINT.asm
FILE: lib\delsigclockint.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DelSigClockINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:23:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "DelSigClock.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _DelSigClock_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _DelSigClock_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _DelSigClock_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0AD6: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file DelSigClockINT.asm
FILE: lib\delsigclock.asm               (0001) ;;*****************************************************************************
0AD7: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DelSigClock.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:23:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "DelSigClock.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  DelSigClock_EnableInt
                                        (0030) export _DelSigClock_EnableInt
                                        (0031) export  DelSigClock_DisableInt
                                        (0032) export _DelSigClock_DisableInt
                                        (0033) export  DelSigClock_Start
                                        (0034) export _DelSigClock_Start
                                        (0035) export  DelSigClock_Stop
                                        (0036) export _DelSigClock_Stop
                                        (0037) export  DelSigClock_WritePeriod
                                        (0038) export _DelSigClock_WritePeriod
                                        (0039) export  DelSigClock_WriteCompareValue
                                        (0040) export _DelSigClock_WriteCompareValue
                                        (0041) export  DelSigClock_bReadCompareValue
                                        (0042) export _DelSigClock_bReadCompareValue
                                        (0043) export  DelSigClock_bReadCounter
                                        (0044) export _DelSigClock_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bDelSigClock_ReadCompareValue  ; deprecated
                                        (0049) export _bDelSigClock_ReadCompareValue  ; deprecated
                                        (0050) export  bDelSigClock_ReadCounter       ; deprecated
                                        (0051) export _bDelSigClock_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: DelSigClock_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  DelSigClock_EnableInt:
                                        (0082) _DelSigClock_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    DelSigClock_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
0ADA: 7F       RET                      (0086)    ret
0ADB: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: DelSigClock_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  DelSigClock_DisableInt:
                                        (0109) _DelSigClock_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    DelSigClock_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
0ADE: 7F       RET                      (0113)    ret
0ADF: 43 2F 01 OR    REG[0x2F],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: DelSigClock_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  DelSigClock_Start:
                                        (0138) _DelSigClock_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    DelSigClock_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0AE2: 7F       RET                      (0142)    ret
0AE3: 41 2F FE AND   REG[0x2F],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: DelSigClock_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  DelSigClock_Stop:
                                        (0166) _DelSigClock_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    DelSigClock_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
0AE6: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: DelSigClock_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count register (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  DelSigClock_WritePeriod:
                                        (0196) _DelSigClock_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
0AE7: 60 2D    MOV   REG[0x2D],A        (0198)    mov   reg[DelSigClock_PERIOD_REG], A
                                        (0199)    RAM_EPILOGUE RAM_USE_CLASS_1
0AE9: 7F       RET                      (0200)    ret
                                        (0201) 
                                        (0202) 
                                        (0203) .ENDSECTION
                                        (0204) 
                                        (0205) .SECTION
                                        (0206) ;-----------------------------------------------------------------------------
                                        (0207) ;  FUNCTION NAME: DelSigClock_WriteCompareValue
                                        (0208) ;
                                        (0209) ;  DESCRIPTION:
                                        (0210) ;     Writes compare value into the Compare register (DR2).
                                        (0211) ;-----------------------------------------------------------------------------
                                        (0212) ;
                                        (0213) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0214) ;  RETURNS:      Nothing
                                        (0215) ;  SIDE EFFECTS: 
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;
                                        (0222)  DelSigClock_WriteCompareValue:
                                        (0223) _DelSigClock_WriteCompareValue:
                                        (0224)    RAM_PROLOGUE RAM_USE_CLASS_1
0AEA: 60 2E    MOV   REG[0x2E],A        (0225)    mov   reg[DelSigClock_COMPARE_REG], A
                                        (0226)    RAM_EPILOGUE RAM_USE_CLASS_1
0AEC: 7F       RET                      (0227)    ret
                                        (0228) 
                                        (0229) 
                                        (0230) .ENDSECTION
                                        (0231) 
                                        (0232) .SECTION
                                        (0233) ;-----------------------------------------------------------------------------
                                        (0234) ;  FUNCTION NAME: DelSigClock_bReadCompareValue
                                        (0235) ;
                                        (0236) ;  DESCRIPTION:
                                        (0237) ;     Reads the Compare register.
                                        (0238) ;-----------------------------------------------------------------------------
                                        (0239) ;
                                        (0240) ;  ARGUMENTS:    None
                                        (0241) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0242) ;  SIDE EFFECTS: 
                                        (0243) ;    The A and X registers may be modified by this or future implementations
                                        (0244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0247) ;    functions.
                                        (0248) ;
                                        (0249)  DelSigClock_bReadCompareValue:
                                        (0250) _DelSigClock_bReadCompareValue:
                                        (0251)  bDelSigClock_ReadCompareValue:                  ; this name deprecated
                                        (0252) _bDelSigClock_ReadCompareValue:                  ; this name deprecated
                                        (0253)    RAM_PROLOGUE RAM_USE_CLASS_1
0AED: 5D 2E    MOV   A,REG[0x2E]        (0254)    mov   A, reg[DelSigClock_COMPARE_REG]
                                        (0255)    RAM_EPILOGUE RAM_USE_CLASS_1
0AEF: 7F       RET                      (0256)    ret
                                        (0257) 
                                        (0258) 
                                        (0259) .ENDSECTION
                                        (0260) 
                                        (0261) .SECTION
                                        (0262) ;-----------------------------------------------------------------------------
                                        (0263) ;  FUNCTION NAME: DelSigClock_bReadCounter
                                        (0264) ;
                                        (0265) ;  DESCRIPTION:
                                        (0266) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0267) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0268) ;     from the Count to the Compare registers by holding the clock low in
                                        (0269) ;     the PSoC block.
                                        (0270) ;-----------------------------------------------------------------------------
                                        (0271) ;
                                        (0272) ;  ARGUMENTS: None
                                        (0273) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0274) ;  SIDE EFFECTS:
                                        (0275) ;     1) If running, the user module is stopped momentarily and one or more
                                        (0276) ;        counts may be missed.
                                        (0277) ;     2) The A and X registers may be modified by this or future implementations
                                        (0278) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0279) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0280) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0281) ;        functions.
                                        (0282) ;
                                        (0283)  DelSigClock_bReadCounter:
                                        (0284) _DelSigClock_bReadCounter:
                                        (0285)  bDelSigClock_ReadCounter:                       ; this name deprecated
                                        (0286) _bDelSigClock_ReadCounter:                       ; this name deprecated
                                        (0287) 
                                        (0288)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0289)    bOrigControlReg:        EQU   1               ; Frame offset to temp CR0     store
                                        (0290)    bOrigClockSetting:      EQU   2               ; Frame offset to temp Input   store
                                        (0291)    wCounter:               EQU   3               ; Frame offset to temp Count   store
                                        (0292)    STACK_FRAME_SIZE:       EQU   4               ; max stack frame size is 4 bytes
                                        (0293) 
                                        (0294)    RAM_PROLOGUE RAM_USE_CLASS_2
0AF0: 4F       MOV   X,SP               (0295)    mov   X, SP                                   ; X <- stack frame pointer
0AF1: 5D 2E    MOV   A,REG[0x2E]        (0296)    mov   A, reg[DelSigClock_COMPARE_REG]         ; Save the Compare register on the stack
0AF3: 08       PUSH  A                  (0297)    push  A                                       ;
0AF4: 5D 2F    MOV   A,REG[0x2F]        (0298)    mov   A, reg[DelSigClock_CONTROL_REG]         ; Save CR0 (running or stopped state)
0AF6: 08       PUSH  A                  (0299)    push  A                                       ;
0AF7: 41 2F FE AND   REG[0x2F],0xFE     
0AFA: 71 10    OR    F,0x10             
                                        (0300)    DelSigClock_Stop_M                            ; Disable (stop) the Counter if running
                                        (0301)    M8C_SetBank1                                  ;
0AFC: 5D 2D    MOV   A,REG[0x2D]        (0302)    mov   A, reg[DelSigClock_INPUT_REG]           ; save the clock input setting
0AFE: 08       PUSH  A                  (0303)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0304)                                                  ;   hold the clock low:
0AFF: 62 2D 00 MOV   REG[0x2D],0x0      (0305)    mov   reg[DelSigClock_INPUT_REG], INPUT_REG_NULL
0B02: 70 EF    AND   F,0xEF             
                                        (0306)    M8C_SetBank0
                                        (0307)                                                  ; Extract the Count via DR2 register
0B04: 5D 2C    MOV   A,REG[0x2C]        (0308)    mov   A, reg[DelSigClock_COUNTER_REG]         ; DR2 <- DR0
0B06: 5D 2E    MOV   A,REG[0x2E]        (0309)    mov   A, reg[DelSigClock_COMPARE_REG]         ; Stash the Count on the stack
0B08: 08       PUSH  A                  (0310)    push  A                                       ;  -stack frame is now 3 bytes
0B09: 52 00    MOV   A,[X+0]            (0311)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0B0B: 60 2E    MOV   REG[0x2E],A        (0312)    mov   reg[DelSigClock_COMPARE_REG], A
0B0D: 71 10    OR    F,0x10             
                                        (0313)    M8C_SetBank1                                  ; Restore the counter operation:
0B0F: 52 02    MOV   A,[X+2]            (0314)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0B11: 60 2D    MOV   REG[0x2D],A        (0315)    mov   reg[DelSigClock_INPUT_REG], A           ;
0B13: 70 EF    AND   F,0xEF             
                                        (0316)    M8C_SetBank0                                  ;   then re-enable (start) the counter
0B15: 52 01    MOV   A,[X+1]            (0317)    mov   A, [X+bOrigControlReg]                  ;     if it was running when
0B17: 60 2F    MOV   REG[0x2F],A        (0318)    mov   reg[DelSigClock_CONTROL_REG], A         ;     this function was first called
0B19: 18       POP   A                  (0319)    pop   A                                       ; Setup the return value
0B1A: 38 FD    ADD   SP,0xFD            (0320)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0B1C: 70 3F    AND   F,0x3F             
0B1E: 71 C0    OR    F,0xC0             
                                        (0321)    RAM_EPILOGUE RAM_USE_CLASS_2
0B20: 7F       RET                      (0322)    ret
                                        (0323) 
                                        (0324) .ENDSECTION
                                        (0325) 
                                        (0326) ; End of File DelSigClock.asm
FILE: lib\delsig.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DelSig.asm
                                        (0004) ;;   Version: 1.50, Updated on 2015/3/4 at 22:25:16
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler source for the Delta-Sigma A/D Converter User
                                        (0008) ;;               Module with 2nd-order modulator based on the Type 2 Decimator.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API
                                        (0014) ;;        functions returns. For Large Memory Model devices it is also the
                                        (0015) ;;        caller's responsibility to perserve any value in the CUR_PP, IDX_PP,
                                        (0016) ;;        MVR_PP and MVW_PP registers. Even though some of these registers may
                                        (0017) ;;        not be modified now, there is no guarantee that will remain the case
                                        (0018) ;;        in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) include "m8c.inc"
                                        (0025) include "memory.inc"
                                        (0026) include "DelSig.inc"
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) export  DelSig_Start
                                        (0033) export _DelSig_Start
                                        (0034) export  DelSig_SetPower
                                        (0035) export _DelSig_SetPower
                                        (0036) export  DelSig_Stop
                                        (0037) export _DelSig_Stop
                                        (0038) export  DelSig_StartAD
                                        (0039) export _DelSig_StartAD
                                        (0040) export  DelSig_StopAD
                                        (0041) export _DelSig_StopAD
                                        (0042) export  DelSig_fIsDataAvailable
                                        (0043) export _DelSig_fIsDataAvailable
                                        (0044) export  DelSig_cGetDataClearFlag
                                        (0045) export _DelSig_cGetDataClearFlag
                                        (0046) export  DelSig_bGetDataClearFlag
                                        (0047) export _DelSig_bGetDataClearFlag
                                        (0048) export  DelSig_cGetData
                                        (0049) export _DelSig_cGetData
                                        (0050) export  DelSig_bGetData
                                        (0051) export _DelSig_bGetData
                                        (0052) export  DelSig_ClearFlag
                                        (0053) export _DelSig_ClearFlag
                                        (0054) export  DelSig_WritePulseWidth
                                        (0055) export _DelSig_WritePulseWidth
                                        (0056) 
                                        (0057) 
                                        (0058) ;-----------------------------------------------
                                        (0059) ;  Constant Definitions
                                        (0060) ;-----------------------------------------------
                                        (0061) 
                                        (0062) CONTROL_REG_ENABLE_BIT:                    equ  01h     ; Control register start bit
                                        (0063) POWERMASK:                                 equ  03h     ; Analog PSoC Block Power bits
                                        (0064) 
                                        (0065) 
                                        (0066) AREA UserModules (ROM, REL)
                                        (0067) 
                                        (0068) .SECTION
                                        (0069) ;-----------------------------------------------------------------------------
                                        (0070) ;  FUNCTION NAME: DelSig_Start
                                        (0071) ;  FUNCTION NAME: DelSig_SetPower
                                        (0072) ;
                                        (0073) ;  DESCRIPTION: Applies power setting to the module's analog PSoc blocks.
                                        (0074) ;-----------------------------------------------------------------------------
                                        (0075) ;
                                        (0076) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0077) ;  RETURNS:      Nothing.
                                        (0078) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0079) ;                RAM use class 2: page pointer registers are not modified.
                                        (0080) ;
                                        (0081)  DelSig_Start:
                                        (0082) _DelSig_Start:
                                        (0083)  DelSig_SetPower:
                                        (0084) _DelSig_SetPower:
                                        (0085)    RAM_PROLOGUE RAM_USE_CLASS_2
0B21: 4F       MOV   X,SP               (0086)    mov  X, SP                                    ; Set up Stack frame
0B22: 21 03    AND   A,0x3              (0087)    and  A, POWERMASK                             ; Ensure value is legal
0B24: 08       PUSH  A                  (0088)    push A
0B25: 5D 83    MOV   A,REG[0x83]        (0089)    mov  A, reg[DelSig_AtoD1cr3]                  ; First SC block:
0B27: 21 FC    AND   A,0xFC             (0090)    and  A, ~POWERMASK                            ;   clear power bits to zero
0B29: 2B 00    OR    A,[X+0]            (0091)    or   A, [ X ]                                 ;   establish new value
0B2B: 60 83    MOV   REG[0x83],A        (0092)    mov  reg[DelSig_AtoD1cr3], A                  ;   change the actual setting
0B2D: 5D 93    MOV   A,REG[0x93]        (0093)    mov  A, reg[DelSig_AtoD2cr3]                  ; Second SC block: as previous
0B2F: 21 FC    AND   A,0xFC             (0094)    and  A, ~POWERMASK
0B31: 2B 00    OR    A,[X+0]            (0095)    or   A, [ X ]
0B33: 60 93    MOV   REG[0x93],A        (0096)    mov  reg[DelSig_AtoD2cr3], A
0B35: 18       POP   A                  (0097)    pop  A
0B36: 70 3F    AND   F,0x3F             
0B38: 71 C0    OR    F,0xC0             
                                        (0098)    RAM_EPILOGUE RAM_USE_CLASS_2
0B3A: 7F       RET                      (0099)    ret
                                        (0100) .ENDSECTION
                                        (0101) 
                                        (0102) 
                                        (0103) .SECTION
                                        (0104) ;-----------------------------------------------------------------------------
                                        (0105) ;  FUNCTION NAME: DelSig_Stop
                                        (0106) ;
                                        (0107) ;  DESCRIPTION:   Removes power from the module's analog PSoc blocks.
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;
                                        (0110) ;  ARGUMENTS:    None.
                                        (0111) ;  RETURNS:      Nothing.
                                        (0112) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0113) ;                RAM use class 1: page pointer registers are not modified.
                                        (0114) ;
                                        (0115)  DelSig_Stop:
                                        (0116) _DelSig_Stop:
                                        (0117)    RAM_PROLOGUE RAM_USE_CLASS_1
0B3B: 41 83 FC AND   REG[0x83],0xFC     (0118)    and  reg[DelSig_AtoD1cr3], ~POWERMASK
0B3E: 41 93 FC AND   REG[0x93],0xFC     (0119)    and  reg[DelSig_AtoD2cr3], ~POWERMASK
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_1
0B41: 7F       RET                      (0121)    ret
0B42: 43 E1 01 OR    REG[0xE1],0x1      
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) .SECTION
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;  FUNCTION NAME: DelSig_StartAD
                                        (0128) ;
                                        (0129) ;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;
                                        (0132) ;  ARGUMENTS:    None.
                                        (0133) ;  RETURNS:      Nothing.
                                        (0134) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0135) ;                RAM use class 1: page pointer registers may be modified.
                                        (0136) ;
                                        (0137)  DelSig_StartAD:
                                        (0138) _DelSig_StartAD:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    M8C_EnableIntMask DelSig_INT_REG, DelSig_INT_MASK
0B45: 62 23 01 MOV   REG[0x23],0x1      (0141)    mov  reg[DelSig_PWM_CR0], CONTROL_REG_ENABLE_BIT
                                        (0142)    RAM_EPILOGUE RAM_USE_CLASS_1
0B48: 7F       RET                      (0143)    ret
                                        (0144) .ENDSECTION
                                        (0145) 
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: DelSig_StopAD
                                        (0150) ;
                                        (0151) ;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The PWM stops
                                        (0152) ;               operating and it's interrupt is disabled. Analog power is
                                        (0153) ;               still supplied to the analog blocks, however.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None.
                                        (0157) ;  RETURNS:      Nothing.
                                        (0158) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0159) ;                RAM use class 1: page pointer registers are not modified.
                                        (0160) ;
                                        (0161)  DelSig_StopAD:
                                        (0162) _DelSig_StopAD:
                                        (0163)    RAM_PROLOGUE RAM_USE_CLASS_1
0B49: 62 23 00 MOV   REG[0x23],0x0      (0164)    mov  reg[DelSig_PWM_CR0], 00h                     ; Disable the PWM
0B4C: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0165)    M8C_DisableIntMask DelSig_INT_REG, DelSig_INT_MASK   ; Disable its interrupt
                                        (0166)    RAM_EPILOGUE RAM_USE_CLASS_1
0B4F: 7F       RET                      (0167)    ret
0B50: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0168) .ENDSECTION
                                        (0169) 
                                        (0170) 
                                        (0171) .SECTION
                                        (0172) ;-----------------------------------------------------------------------------
                                        (0173) ;  FUNCTION NAME: DelSig_fIsDataAvailable
                                        (0174) ;
                                        (0175) ;  DESCRIPTION: Returns the status of the A/D Data
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  ARGUMENTS:    None.
                                        (0178) ;  RETURNS:      fastcall16 BOOL DataAvailable returned in the A register
                                        (0179) ;  SIDE EFFECTS:
                                        (0180) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0181) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER
                                        (0182) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE
                                        (0183) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER
                                        (0184) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0185) ;
                                        (0186) ;    Page Pointer Registers Modified:
                                        (0187) ;          CUR_PP
                                        (0188) ;
                                        (0189)  DelSig_fIsDataAvailable:
                                        (0190) _DelSig_fIsDataAvailable:
                                        (0191)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0192)    RAM_SETPAGE_CUR >DelSig_bfStatus
0B53: 51 0B    MOV   A,[0xB]            (0193)    mov  A, [DelSig_bfStatus]
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0B55: 7F       RET                      (0195)    ret
0B56: 62 D0 00 MOV   REG[0xD0],0x0      
0B59: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0196) .ENDSECTION
                                        (0197) 
                                        (0198) 
                                        (0199) .SECTION
                                        (0200) ;-----------------------------------------------------------------------------
                                        (0201) ;  FUNCTION NAME:  DelSig_cGetDataClearFlag
                                        (0202) ;
                                        (0203) ;  DESCRIPTION:    Returns the data from the A/D.  Does not check if data is
                                        (0204) ;                  available. Also clears the DATA_READY flag.
                                        (0205) ;-----------------------------------------------------------------------------
                                        (0206) ;  ARGUMENTS:    None.
                                        (0207) ;  RETURNS:      fastcall16 INT iData (LSB in A, MSB in X)
                                        (0208) ;  SIDE EFFECTS:
                                        (0209) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0210) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER
                                        (0211) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE
                                        (0212) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER
                                        (0213) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0214) ;
                                        (0215) ;    Page Pointer Registers Modified:
                                        (0216) ;          CUR_PP
                                        (0217) ;
                                        (0218) ;    PWM interrupts are momentarily halted and restarted to
                                        (0219) ;    ensure data is not lost.
                                        (0220) ;
                                        (0221)  DelSig_cGetDataClearFlag:
                                        (0222) _DelSig_cGetDataClearFlag:
                                        (0223)  DelSig_bGetDataClearFlag:
                                        (0224) _DelSig_bGetDataClearFlag:
                                        (0225)    ; Note, data format is determined by the ISR.
                                        (0226)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0227)    RAM_SETPAGE_CUR >DelSig_bfStatus
                                        (0228)    M8C_DisableIntMask DelSig_INT_REG, DelSig_INT_MASK
0B5C: 26 0B EF AND   [0xB],0xEF         (0229)    and  [DelSig_bfStatus], ~DelSig_DATA_READY_BIT
0B5F: 51 0A    MOV   A,[0xA]            (0230)    mov  A, [DelSig_cResult]
0B61: 43 E1 01 OR    REG[0xE1],0x1      
                                        (0231)    M8C_EnableIntMask DelSig_INT_REG, DelSig_INT_MASK
                                        (0232)    RAM_EPILOGUE RAM_USE_CLASS_4
0B64: 7F       RET                      (0233)    ret
0B65: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0234) .ENDSECTION
                                        (0235) 
                                        (0236) 
                                        (0237) .SECTION
                                        (0238) ;-----------------------------------------------------------------------------
                                        (0239) ;  FUNCTION NAME:  DelSig_cGetData:
                                        (0240) ;
                                        (0241) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0242) ;                   available.
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  ARGUMENTS:    None.
                                        (0245) ;  RETURNS:      fastcall16 INT iData (LSB in A, MSB in X)
                                        (0246) ;  SIDE EFFECTS:
                                        (0247) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0248) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER
                                        (0249) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE
                                        (0250) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER
                                        (0251) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0252) ;
                                        (0253) ;    Page Pointer Registers Modified:
                                        (0254) ;          CUR_PP
                                        (0255) ;
                                        (0256)  DelSig_cGetData:
                                        (0257) _DelSig_cGetData:
                                        (0258)  DelSig_bGetData:
                                        (0259) _DelSig_bGetData:
                                        (0260)    ; Note, data format is determined by the ISR.
                                        (0261)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0262)    RAM_SETPAGE_CUR >DelSig_cResult
0B68: 51 0A    MOV   A,[0xA]            (0263)    mov  A, [DelSig_cResult]
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_4
0B6A: 7F       RET                      (0265)    ret
0B6B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0266) .ENDSECTION
                                        (0267) 
                                        (0268) 
                                        (0269) .SECTION
                                        (0270) ;-----------------------------------------------------------------------------
                                        (0271) ;  FUNCTION NAME: DelSig_ClearFlag
                                        (0272) ;
                                        (0273) ;  DESCRIPTION: Clears the data ready flag.
                                        (0274) ;-----------------------------------------------------------------------------
                                        (0275) ;  ARGUMENTS:    None.
                                        (0276) ;  RETURNS:      Nothing.
                                        (0277) ;  SIDE EFFECTS:
                                        (0278) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0279) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER
                                        (0280) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE
                                        (0281) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER
                                        (0282) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0283) ;
                                        (0284) ;    Page Pointer Registers Modified:
                                        (0285) ;          CUR_PP
                                        (0286) ;
                                        (0287)  DelSig_ClearFlag:
                                        (0288) _DelSig_ClearFlag:
                                        (0289)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0290)    RAM_SETPAGE_CUR >DelSig_bfStatus
0B6E: 26 0B EF AND   [0xB],0xEF         (0291)    and  [DelSig_bfStatus], ~DelSig_DATA_READY_BIT
                                        (0292)    RAM_EPILOGUE RAM_USE_CLASS_4
0B71: 7F       RET                      (0293)    ret
                                        (0294) .ENDSECTION
                                        (0295) 
                                        (0296) 
                                        (0297) .SECTION
                                        (0298) ;-----------------------------------------------------------------------------
                                        (0299) ;  FUNCTION NAME: DelSig_WritePulseWidth
                                        (0300) ;
                                        (0301) ;  DESCRIPTION:
                                        (0302) ;     Write the 8-bit compare value into the compare register (DR2).
                                        (0303) ;-----------------------------------------------------------------------------
                                        (0304) ;
                                        (0305) ;  ARGUMENTS:    fastcall16 BYTE bPulseWidth (passed in A)
                                        (0306) ;  RETURNS:      Nothing
                                        (0307) ;  SIDE EFFECTS:
                                        (0308) ;      REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0309) ;      RAM use class 1: page pointer registers are not modified.
                                        (0310) ;      This function can produce momentary glitches in the PWM output. This
                                        (0311) ;      effect can be avoided by calling DelSig_StopAD and
                                        (0312) ;      DelSig_StartAD before and after the call to this function.
                                        (0313) ;      As usual, the first two samples following such a start up action will
                                        (0314) ;      will contain invalid values.
                                        (0315) ;
                                        (0316)  DelSig_WritePulseWidth:
                                        (0317) _DelSig_WritePulseWidth:
                                        (0318)     RAM_PROLOGUE RAM_USE_CLASS_1
0B72: 60 22    MOV   REG[0x22],A        (0319)     mov   reg[DelSig_PWM_DR2],A
                                        (0320)     RAM_EPILOGUE RAM_USE_CLASS_1
0B74: 7F       RET                      (0321)     ret
                                        (0322) .ENDSECTION
                                        (0323) 
                                        (0324) 
                                        (0325) ; End of File DelSig.asm
FILE: lib\dacupdate.asm                 (0001) ;;*****************************************************************************
0B75: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DACUpdate.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:23:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "DACUpdate.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  DACUpdate_EnableInt
                                        (0030) export _DACUpdate_EnableInt
                                        (0031) export  DACUpdate_DisableInt
                                        (0032) export _DACUpdate_DisableInt
                                        (0033) export  DACUpdate_Start
                                        (0034) export _DACUpdate_Start
                                        (0035) export  DACUpdate_Stop
                                        (0036) export _DACUpdate_Stop
                                        (0037) export  DACUpdate_WritePeriod
                                        (0038) export _DACUpdate_WritePeriod
                                        (0039) export  DACUpdate_WriteCompareValue
                                        (0040) export _DACUpdate_WriteCompareValue
                                        (0041) export  DACUpdate_bReadCompareValue
                                        (0042) export _DACUpdate_bReadCompareValue
                                        (0043) export  DACUpdate_bReadCounter
                                        (0044) export _DACUpdate_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bDACUpdate_ReadCompareValue  ; deprecated
                                        (0049) export _bDACUpdate_ReadCompareValue  ; deprecated
                                        (0050) export  bDACUpdate_ReadCounter       ; deprecated
                                        (0051) export _bDACUpdate_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: DACUpdate_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  DACUpdate_EnableInt:
                                        (0082) _DACUpdate_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    DACUpdate_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
0B78: 7F       RET                      (0086)    ret
0B79: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: DACUpdate_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  DACUpdate_DisableInt:
                                        (0109) _DACUpdate_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    DACUpdate_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
0B7C: 7F       RET                      (0113)    ret
0B7D: 43 27 01 OR    REG[0x27],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: DACUpdate_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  DACUpdate_Start:
                                        (0138) _DACUpdate_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    DACUpdate_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0B80: 7F       RET                      (0142)    ret
0B81: 41 27 FE AND   REG[0x27],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: DACUpdate_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  DACUpdate_Stop:
                                        (0166) _DACUpdate_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    DACUpdate_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
0B84: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: DACUpdate_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count register (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  DACUpdate_WritePeriod:
                                        (0196) _DACUpdate_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
0B85: 60 25    MOV   REG[0x25],A        (0198)    mov   reg[DACUpdate_PERIOD_REG], A
                                        (0199)    RAM_EPILOGUE RAM_USE_CLASS_1
0B87: 7F       RET                      (0200)    ret
                                        (0201) 
                                        (0202) 
                                        (0203) .ENDSECTION
                                        (0204) 
                                        (0205) .SECTION
                                        (0206) ;-----------------------------------------------------------------------------
                                        (0207) ;  FUNCTION NAME: DACUpdate_WriteCompareValue
                                        (0208) ;
                                        (0209) ;  DESCRIPTION:
                                        (0210) ;     Writes compare value into the Compare register (DR2).
                                        (0211) ;-----------------------------------------------------------------------------
                                        (0212) ;
                                        (0213) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0214) ;  RETURNS:      Nothing
                                        (0215) ;  SIDE EFFECTS: 
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;
                                        (0222)  DACUpdate_WriteCompareValue:
                                        (0223) _DACUpdate_WriteCompareValue:
                                        (0224)    RAM_PROLOGUE RAM_USE_CLASS_1
0B88: 60 26    MOV   REG[0x26],A        (0225)    mov   reg[DACUpdate_COMPARE_REG], A
                                        (0226)    RAM_EPILOGUE RAM_USE_CLASS_1
0B8A: 7F       RET                      (0227)    ret
                                        (0228) 
                                        (0229) 
                                        (0230) .ENDSECTION
                                        (0231) 
                                        (0232) .SECTION
                                        (0233) ;-----------------------------------------------------------------------------
                                        (0234) ;  FUNCTION NAME: DACUpdate_bReadCompareValue
                                        (0235) ;
                                        (0236) ;  DESCRIPTION:
                                        (0237) ;     Reads the Compare register.
                                        (0238) ;-----------------------------------------------------------------------------
                                        (0239) ;
                                        (0240) ;  ARGUMENTS:    None
                                        (0241) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0242) ;  SIDE EFFECTS: 
                                        (0243) ;    The A and X registers may be modified by this or future implementations
                                        (0244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0247) ;    functions.
                                        (0248) ;
                                        (0249)  DACUpdate_bReadCompareValue:
                                        (0250) _DACUpdate_bReadCompareValue:
                                        (0251)  bDACUpdate_ReadCompareValue:                    ; this name deprecated
                                        (0252) _bDACUpdate_ReadCompareValue:                    ; this name deprecated
                                        (0253)    RAM_PROLOGUE RAM_USE_CLASS_1
0B8B: 5D 26    MOV   A,REG[0x26]        (0254)    mov   A, reg[DACUpdate_COMPARE_REG]
                                        (0255)    RAM_EPILOGUE RAM_USE_CLASS_1
0B8D: 7F       RET                      (0256)    ret
                                        (0257) 
                                        (0258) 
                                        (0259) .ENDSECTION
                                        (0260) 
                                        (0261) .SECTION
                                        (0262) ;-----------------------------------------------------------------------------
                                        (0263) ;  FUNCTION NAME: DACUpdate_bReadCounter
                                        (0264) ;
                                        (0265) ;  DESCRIPTION:
                                        (0266) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0267) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0268) ;     from the Count to the Compare registers by holding the clock low in
                                        (0269) ;     the PSoC block.
                                        (0270) ;-----------------------------------------------------------------------------
                                        (0271) ;
                                        (0272) ;  ARGUMENTS: None
                                        (0273) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0274) ;  SIDE EFFECTS:
                                        (0275) ;     1) If running, the user module is stopped momentarily and one or more
                                        (0276) ;        counts may be missed.
                                        (0277) ;     2) The A and X registers may be modified by this or future implementations
                                        (0278) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0279) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0280) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0281) ;        functions.
                                        (0282) ;
                                        (0283)  DACUpdate_bReadCounter:
                                        (0284) _DACUpdate_bReadCounter:
                                        (0285)  bDACUpdate_ReadCounter:                         ; this name deprecated
                                        (0286) _bDACUpdate_ReadCounter:                         ; this name deprecated
                                        (0287) 
                                        (0288)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0289)    bOrigControlReg:        EQU   1               ; Frame offset to temp CR0     store
                                        (0290)    bOrigClockSetting:      EQU   2               ; Frame offset to temp Input   store
                                        (0291)    wCounter:               EQU   3               ; Frame offset to temp Count   store
                                        (0292)    STACK_FRAME_SIZE:       EQU   4               ; max stack frame size is 4 bytes
                                        (0293) 
                                        (0294)    RAM_PROLOGUE RAM_USE_CLASS_2
0B8E: 4F       MOV   X,SP               (0295)    mov   X, SP                                   ; X <- stack frame pointer
0B8F: 5D 26    MOV   A,REG[0x26]        (0296)    mov   A, reg[DACUpdate_COMPARE_REG]           ; Save the Compare register on the stack
0B91: 08       PUSH  A                  (0297)    push  A                                       ;
0B92: 5D 27    MOV   A,REG[0x27]        (0298)    mov   A, reg[DACUpdate_CONTROL_REG]           ; Save CR0 (running or stopped state)
0B94: 08       PUSH  A                  (0299)    push  A                                       ;
0B95: 41 27 FE AND   REG[0x27],0xFE     
0B98: 71 10    OR    F,0x10             
                                        (0300)    DACUpdate_Stop_M                              ; Disable (stop) the Counter if running
                                        (0301)    M8C_SetBank1                                  ;
0B9A: 5D 25    MOV   A,REG[0x25]        (0302)    mov   A, reg[DACUpdate_INPUT_REG]             ; save the clock input setting
0B9C: 08       PUSH  A                  (0303)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0304)                                                  ;   hold the clock low:
0B9D: 62 25 00 MOV   REG[0x25],0x0      (0305)    mov   reg[DACUpdate_INPUT_REG], INPUT_REG_NULL
0BA0: 70 EF    AND   F,0xEF             
                                        (0306)    M8C_SetBank0
                                        (0307)                                                  ; Extract the Count via DR2 register
0BA2: 5D 24    MOV   A,REG[0x24]        (0308)    mov   A, reg[DACUpdate_COUNTER_REG]           ; DR2 <- DR0
0BA4: 5D 26    MOV   A,REG[0x26]        (0309)    mov   A, reg[DACUpdate_COMPARE_REG]           ; Stash the Count on the stack
0BA6: 08       PUSH  A                  (0310)    push  A                                       ;  -stack frame is now 3 bytes
0BA7: 52 00    MOV   A,[X+0]            (0311)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0BA9: 60 26    MOV   REG[0x26],A        (0312)    mov   reg[DACUpdate_COMPARE_REG], A
0BAB: 71 10    OR    F,0x10             
                                        (0313)    M8C_SetBank1                                  ; Restore the counter operation:
0BAD: 52 02    MOV   A,[X+2]            (0314)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0BAF: 60 25    MOV   REG[0x25],A        (0315)    mov   reg[DACUpdate_INPUT_REG], A             ;
0BB1: 70 EF    AND   F,0xEF             
                                        (0316)    M8C_SetBank0                                  ;   then re-enable (start) the counter
0BB3: 52 01    MOV   A,[X+1]            (0317)    mov   A, [X+bOrigControlReg]                  ;     if it was running when
0BB5: 60 27    MOV   REG[0x27],A        (0318)    mov   reg[DACUpdate_CONTROL_REG], A           ;     this function was first called
0BB7: 18       POP   A                  (0319)    pop   A                                       ; Setup the return value
0BB8: 38 FD    ADD   SP,0xFD            (0320)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0BBA: 70 3F    AND   F,0x3F             
0BBC: 71 C0    OR    F,0xC0             
                                        (0321)    RAM_EPILOGUE RAM_USE_CLASS_2
0BBE: 7F       RET                      (0322)    ret
                                        (0323) 
                                        (0324) .ENDSECTION
                                        (0325) 
                                        (0326) ; End of File DACUpdate.asm
FILE: lib\dac8b.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DAC8B.asm
                                        (0004) ;;   Version: 2.2, Updated on 2015/3/4 at 22:25:12
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DAC8 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "DAC8B.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  DAC8B_Start
                                        (0030) export _DAC8B_Start
                                        (0031) export  DAC8B_SetPower
                                        (0032) export _DAC8B_SetPower
                                        (0033) 
                                        (0034) export  DAC8B_WriteBlind
                                        (0035) export _DAC8B_WriteBlind
                                        (0036) export  DAC8B_WriteBlind2B
                                        (0037) export _DAC8B_WriteBlind2B
                                        (0038) 
                                        (0039) export  DAC8B_WriteStall
                                        (0040) export _DAC8B_WriteStall
                                        (0041) export  DAC8B_WriteStall2B
                                        (0042) export _DAC8B_WriteStall2B
                                        (0043) 
                                        (0044) export  DAC8B_Stop
                                        (0045) export _DAC8B_Stop
                                        (0046) 
                                        (0047) ;-----------------------------------------------
                                        (0048) ;  EQUATES
                                        (0049) ;-----------------------------------------------
                                        (0050) 
                                        (0051) cOFFSET:   equ 127              ; Conversion term for offset binary to 2's C
                                        (0052) bPWRMASK:  equ 03h              ; Power bitfield in Switched Cap CR3 reg
                                        (0053) bSPLITMASK:equ 03h              ; Marks split between MSB and LSB bits
                                        (0054) bSMMASK:   equ 3Fh              ; Sign and Magnitude bits mask
                                        (0055) bSIGNMASK: equ 20h              ; Sign bit mask
                                        (0056) 
                                        (0057)     AREA UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: DAC8B_Start
                                        (0062) ;  FUNCTION NAME: DAC8B_SetPower
                                        (0063) ;
                                        (0064) ;  DESCRIPTION:
                                        (0065) ;    Applies power setting to the module's analog PSoC blocks.
                                        (0066) ;
                                        (0067) ;-----------------------------------------------------------------------------
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:
                                        (0070) ;    A contains the power setting 0=Off, 1=Low, 2=Med, 3=High.
                                        (0071) ;
                                        (0072) ;  RETURNS: none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  DAC8B_Start:
                                        (0082) _DAC8B_Start:
                                        (0083)  DAC8B_SetPower:
                                        (0084) _DAC8B_SetPower:
                                        (0085)     RAM_PROLOGUE RAM_USE_CLASS_2
0BBF: 21 03    AND   A,0x3              (0086)     and   A, bPWRMASK       ; trim input to bits of interest
0BC1: 4F       MOV   X,SP               (0087)     mov   X, SP             ; Set stack frame pointer
0BC2: 08       PUSH  A                  (0088)     push  A
                                        (0089)     ;; read CR3 registers, modify power bits & write back
0BC3: 5D 8B    MOV   A,REG[0x8B]        (0090)     mov   A, reg[DAC8B_MSB_CR3]
0BC5: 21 FC    AND   A,0xFC             (0091)     and   a, ~bPWRMASK      ; clear old setting
0BC7: 2B 00    OR    A,[X+0]            (0092)     or    A, [X]            ; set power in MSB register image
0BC9: 60 8B    MOV   REG[0x8B],A        (0093)     mov   reg[DAC8B_MSB_CR3], A
0BCB: 5D 9B    MOV   A,REG[0x9B]        (0094)     mov   A, reg[DAC8B_LSB_CR3]
0BCD: 21 FC    AND   A,0xFC             (0095)     and   a, ~bPWRMASK      ; clear old setting
0BCF: 2B 00    OR    A,[X+0]            (0096)     or    A, [X]            ; set power in LSB register image
0BD1: 60 9B    MOV   REG[0x9B],A        (0097)     mov   reg[DAC8B_LSB_CR3], A
0BD3: 18       POP   A                  (0098)     pop   A
0BD4: 70 3F    AND   F,0x3F             
0BD6: 71 C0    OR    F,0xC0             
                                        (0099)     RAM_EPILOGUE RAM_USE_CLASS_2
0BD8: 7F       RET                      (0100)     ret
                                        (0101) .ENDSECTION
                                        (0102) 
                                        (0103) .SECTION
                                        (0104) ;-----------------------------------------------------------------------------
                                        (0105) ;  FUNCTION NAME: DAC8B_WriteBlind
                                        (0106) ;  FUNCTION NAME: DAC8B_WriteBlind2B
                                        (0107) ;
                                        (0108) ;  DESCRIPTION:
                                        (0109) ;    Modify the DAC's update value without worrying about the clocks
                                        (0110) ;    Lowest overhead, but may cause glitches on the output.
                                        (0111) ;
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;
                                        (0114) ;  ARGUMENTS:
                                        (0115) ;    A contains the update value if data format is offset binary or
                                        (0116) ;    2's complement. If format is 2-byte sign-and-magnitude, the LSB is in
                                        (0117) ;    A (as 00smmmmm) and the MSB is in X (as 00xmm000, where x=s\, the
                                        (0118) ;    inverted sign.
                                        (0119) ;
                                        (0120) ;  RETURNS: none
                                        (0121) ;
                                        (0122) ;  SIDE EFFECTS:
                                        (0123) ;    The A and X registers may be modified by this or future implementations
                                        (0124) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0125) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0126) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0127) ;    functions.
                                        (0128) ;
                                        (0129)  DAC8B_WriteBlind:
                                        (0130) _DAC8B_WriteBlind:
                                        (0131)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0132)   IF DAC8B_OFFSETBINARY
                                        (0133)     ;; Data is an unsigned byte value in [0..254] (i.e., 255 unique values).
                                        (0134)     ;; Following converts it to 2's complement:
                                        (0135)     sub   A, cOFFSET            ; Convert to 2's Complement
                                        (0136)   ENDIF
                                        (0137)   IF DAC8B_OFFSETBINARY | DAC8B_TWOSCOMPLEMENT
0BD9: 4F       MOV   X,SP               (0138)     mov   X, SP
0BDA: 08       PUSH  A                  (0139)     push  A                     ; Preserve the sign
0BDB: 39 80    CMP   A,0x80             (0140)     cmp   A, 80h                ; negative (or zero)?
0BDD: C0 05    JC    0x0BE3             (0141)     jc    BlindAdjustCycles     ;   no: just go on
0BDF: 73       CPL   A                  (0142)     cpl   A                     ;  yes: take the 2's Complement
0BE0: 74       INC   A                  (0143)     inc   A
0BE1: 80 05    JMP   0x0BE7             (0144)     jmp   BlindMagSet
                                        (0145) BlindAdjustCycles:
0BE3: 73       CPL   A                  (0146)     cpl   A                     ; these 3 instructions implement a 13-cycle
0BE4: 73       CPL   A                  (0147)     cpl   A                     ;   NOP so it takes the same amount of time
0BE5: 80 01    JMP   0x0BE7             (0148)     jmp   BlindMagSet           ;   for both positive and negative numbers.
                                        (0149) BlindMagSet:
0BE7: 08       PUSH  A                  (0150)     push  A                     ; preserve LSB magnitude bits
0BE8: 27 01 03 AND   [X+1],0x3          (0151)     and   [X+1], bSPLITMASK
0BEB: 27 00 80 AND   [X+0],0x80         (0152)     and   [X], 80h              ; isolate the sign
0BEE: 2B 00    OR    A,[X+0]            (0153)     or    A, [X]                ; insert in MSB
0BF0: 67       ASR   A                  (0154)     asr   A                     ; justify MSB sign & mag
0BF1: 67       ASR   A                  (0155)     asr   A
0BF2: 21 3F    AND   A,0x3F             (0156)     and   A, bSMMASK            ; clear sign extension bits
                                        (0157)                                 ; Set FCap and ClockPhase bits for MSB
0BF4: 54 00    MOV   [X+0],A            (0158)     mov   [X], A                ; stash the MSB
0BF6: 21 20    AND   A,0x20             (0159)     and   A, bSIGNMASK          ; isolate the sign
0BF8: 31 20    XOR   A,0x20             (0160)     xor   A, bSIGNMASK          ;   and invert for LSB
0BFA: 66 01    ASL   [X+1]              (0161)     asl   [X+1]                 ; justify LSB magnitude
0BFC: 66 01    ASL   [X+1]              (0162)     asl   [X+1]
0BFE: 66 01    ASL   [X+1]              (0163)     asl   [X+1]
0C00: 2B 01    OR    A,[X+1]            (0164)     or    A, [X+1]              ; combine LSB magnitude with sign
                                        (0165)                                 ; Set FCap and ClockPhase bits for LSB
0C02: 20       POP   X                  (0166)     pop   X                     ; Put MSB in X
0C03: 20       POP   X                  (0167)     pop   X
                                        (0168)   ENDIF
0C04: 29 80    OR    A,0x80             (0169)     or    A, DAC8B_CR0_HIBITS
0C06: 4B       SWAP  A,X                (0170)     swap  A, X
0C07: 29 80    OR    A,0x80             (0171)     or    A, DAC8B_CR0_HIBITS
0C09: 60 88    MOV   REG[0x88],A        (0172)     mov   reg[DAC8B_MSB_CR0], A
0C0B: 5B       MOV   A,X                (0173)     mov   A, X
0C0C: 60 98    MOV   REG[0x98],A        (0174)     mov   reg[DAC8B_LSB_CR0], A
0C0E: 70 3F    AND   F,0x3F             
0C10: 71 C0    OR    F,0xC0             
                                        (0175)     RAM_EPILOGUE RAM_USE_CLASS_2
0C12: 7F       RET                      (0176)     ret
                                        (0177) 
                                        (0178) 
                                        (0179)  DAC8B_WriteBlind2B:
                                        (0180) _DAC8B_WriteBlind2B:
                                        (0181)     RAM_PROLOGUE RAM_USE_CLASS_1
0C13: 29 80    OR    A,0x80             (0182)     or    A, DAC8B_CR0_HIBITS
0C15: 4B       SWAP  A,X                (0183)     swap  A, X
0C16: 29 80    OR    A,0x80             (0184)     or    A, DAC8B_CR0_HIBITS
0C18: 60 88    MOV   REG[0x88],A        (0185)     mov   reg[DAC8B_MSB_CR0], A
0C1A: 5B       MOV   A,X                (0186)     mov   A, X
0C1B: 60 98    MOV   REG[0x98],A        (0187)     mov   reg[DAC8B_LSB_CR0], A
                                        (0188)     RAM_EPILOGUE RAM_USE_CLASS_1
0C1D: 7F       RET                      (0189)     ret
                                        (0190) .ENDSECTION
                                        (0191) 
                                        (0192) .SECTION
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;  FUNCTION NAME: DAC8B_WriteStall
                                        (0195) ;  FUNCTION NAME: DAC8B_WriteStall2B
                                        (0196) ;
                                        (0197) ;  DESCRIPTION:
                                        (0198) ;    Modify the DAC's update value, stalling the CPU if necessary.
                                        (0199) ;    This routine should be used with faster analog clocks or when the
                                        (0200) ;    effect of prolonging interrupt latencies can be safely tolerated.
                                        (0201) ;
                                        (0202) ;-----------------------------------------------------------------------------
                                        (0203) ;
                                        (0204) ;  ARGUMENTS:
                                        (0205) ;   A contains the update value if data format is offset binary or
                                        (0206) ;   2's complement. If format is 2-byte sign-and-magnitude, the LSB is in
                                        (0207) ;   A (as 00smmmmm) and the MSB is in X (as 00xmm000, where x=s\, the
                                        (0208) ;   inverted sign.
                                        (0209) ;
                                        (0210) ;  RETURNS: none
                                        (0211) ;
                                        (0212) ;  SIDE EFFECTS:
                                        (0213) ;
                                        (0214) ;  THEORY of OPERATION or PROCEDURE:
                                        (0215) ;    The A and X registers may be modified by this or future implementations
                                        (0216) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0217) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0218) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0219) ;    functions.
                                        (0220) ;
                                        (0221)  DAC8B_WriteStall:
                                        (0222) _DAC8B_WriteStall:
                                        (0223)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0224)   IF DAC8B_OFFSETBINARY
                                        (0225)     ;; Data is an unsigned byte value in [0..254] (i.e., 255 unique values).
                                        (0226)     ;; Following converts it to 2's complement:
                                        (0227)     sub   A, cOFFSET            ; Convert to 2's Complement
                                        (0228)   ENDIF
                                        (0229)   IF DAC8B_OFFSETBINARY | DAC8B_TWOSCOMPLEMENT
0C1E: 4F       MOV   X,SP               (0230)     mov   X, SP
0C1F: 08       PUSH  A                  (0231)     push  A                     ; Preserve the sign
0C20: 39 80    CMP   A,0x80             (0232)     cmp   A, 80h                ; negative (or zero)?
0C22: C0 05    JC    0x0C28             (0233)     jc    StallAdjustCycles     ;   no: just go on
0C24: 73       CPL   A                  (0234)     cpl   A                     ;  yes: take the 2's Complement
0C25: 74       INC   A                  (0235)     inc   A
0C26: 80 05    JMP   0x0C2C             (0236)     jmp   StallMagSet
                                        (0237) StallAdjustCycles:
0C28: 73       CPL   A                  (0238)     cpl   A                     ; these 3 instructions implement a 13-cycle
0C29: 73       CPL   A                  (0239)     cpl   A                     ;   NOP so it takes the same amount of time
0C2A: 80 01    JMP   0x0C2C             (0240)     jmp   StallMagSet           ;   for both positive and negative numbers.
                                        (0241) StallMagSet:
0C2C: 08       PUSH  A                  (0242)     push  A                     ; preserve LSB magnitude bits
0C2D: 27 01 03 AND   [X+1],0x3          (0243)     and   [X+1], bSPLITMASK
0C30: 27 00 80 AND   [X+0],0x80         (0244)     and   [X], 80h              ; isolate the sign
0C33: 2B 00    OR    A,[X+0]            (0245)     or    A, [X]                ; insert in MSB
0C35: 67       ASR   A                  (0246)     asr   A                     ; justify MSB sign & mag
0C36: 67       ASR   A                  (0247)     asr   A
0C37: 21 3F    AND   A,0x3F             (0248)     and   A, bSMMASK            ; clear sign extension bits
                                        (0249)                                 ; Set FCap and ClockPhase bits for MSB
0C39: 54 00    MOV   [X+0],A            (0250)     mov   [X], A                ; stash the MSB
0C3B: 21 20    AND   A,0x20             (0251)     and   A, bSIGNMASK          ; isolate the sign
0C3D: 31 20    XOR   A,0x20             (0252)     xor   A, bSIGNMASK          ;   and invert for LSB
0C3F: 66 01    ASL   [X+1]              (0253)     asl   [X+1]                 ; justify LSB magnitude
0C41: 66 01    ASL   [X+1]              (0254)     asl   [X+1]
0C43: 66 01    ASL   [X+1]              (0255)     asl   [X+1]
0C45: 2B 01    OR    A,[X+1]            (0256)     or    A, [X+1]              ; combine LSB magnitude with sign
                                        (0257)                                 ; Set FCap and ClockPhase bits for LSB
0C47: 20       POP   X                  (0258)     pop   X                     ; Put MSB in X
0C48: 20       POP   X                  (0259)     pop   X
                                        (0260)   ENDIF
0C49: 29 80    OR    A,0x80             (0261)     or    A, DAC8B_CR0_HIBITS
0C4B: 4B       SWAP  A,X                (0262)     swap  A, X
0C4C: 29 80    OR    A,0x80             (0263)     or    A, DAC8B_CR0_HIBITS
0C4E: 43 65 01 OR    REG[0x65],0x1      
                                        (0264) 
                                        (0265)     M8C_Stall
0C51: 60 88    MOV   REG[0x88],A        (0266)     mov   reg[DAC8B_MSB_CR0], A
0C53: 41 65 FE AND   REG[0x65],0xFE     
                                        (0267)     M8C_Unstall
0C56: 5B       MOV   A,X                (0268)     mov   A, X
0C57: 60 98    MOV   REG[0x98],A        (0269)     mov   reg[DAC8B_LSB_CR0], A
0C59: 70 3F    AND   F,0x3F             
0C5B: 71 C0    OR    F,0xC0             
                                        (0270)     RAM_EPILOGUE RAM_USE_CLASS_2
0C5D: 7F       RET                      (0271)     ret
                                        (0272) 
                                        (0273)  DAC8B_WriteStall2B:
                                        (0274) _DAC8B_WriteStall2B:
                                        (0275)     RAM_PROLOGUE RAM_USE_CLASS_1
0C5E: 29 80    OR    A,0x80             (0276)     or    A, DAC8B_CR0_HIBITS
0C60: 4B       SWAP  A,X                (0277)     swap  A, X
0C61: 29 80    OR    A,0x80             (0278)     or    A, DAC8B_CR0_HIBITS
0C63: 43 65 01 OR    REG[0x65],0x1      
                                        (0279) 
                                        (0280)     M8C_Stall
0C66: 60 88    MOV   REG[0x88],A        (0281)     mov   reg[DAC8B_MSB_CR0], A
0C68: 41 65 FE AND   REG[0x65],0xFE     
                                        (0282)     M8C_Unstall
0C6B: 5B       MOV   A,X                (0283)     mov   A, X
0C6C: 60 98    MOV   REG[0x98],A        (0284)     mov   reg[DAC8B_LSB_CR0], A
                                        (0285)     RAM_EPILOGUE RAM_USE_CLASS_1
0C6E: 7F       RET                      (0286)     ret
                                        (0287) .ENDSECTION
                                        (0288) 
                                        (0289) .SECTION
                                        (0290) ;-----------------------------------------------------------------------------
                                        (0291) ;  FUNCTION NAME: DAC8B_Stop
                                        (0292) ;
                                        (0293) ;  DESCRIPTION:
                                        (0294) ;    Cuts power to the user module.
                                        (0295) ;
                                        (0296) ;-----------------------------------------------------------------------------
                                        (0297) ;
                                        (0298) ;  ARGUMENTS: none
                                        (0299) ;
                                        (0300) ;  RETURNS: none
                                        (0301) ;
                                        (0302) ;  SIDE EFFECTS:
                                        (0303) ;    The A and X registers may be modified by this or future implementations
                                        (0304) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0305) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0306) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0307) ;    functions.
                                        (0308) ;
                                        (0309)  DAC8B_Stop:
                                        (0310) _DAC8B_Stop:
                                        (0311)     RAM_PROLOGUE RAM_USE_CLASS_1
0C6F: 41 8B FC AND   REG[0x8B],0xFC     (0312)     and  reg[DAC8B_MSB_CR3], ~bPWRMASK
0C72: 41 9B FC AND   REG[0x9B],0xFC     (0313)     and  reg[DAC8B_LSB_CR3], ~bPWRMASK
                                        (0314)     RAM_EPILOGUE RAM_USE_CLASS_1
0C75: 7F       RET                      (0315)     ret
                                        (0316) .ENDSECTION
                                        (0317) ; End of File DAC8B.asm
FILE: lib\dac8a.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: DAC8A.asm
                                        (0004) ;;   Version: 2.2, Updated on 2015/3/4 at 22:25:12
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DAC8 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "DAC8A.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  DAC8A_Start
                                        (0030) export _DAC8A_Start
                                        (0031) export  DAC8A_SetPower
                                        (0032) export _DAC8A_SetPower
                                        (0033) 
                                        (0034) export  DAC8A_WriteBlind
                                        (0035) export _DAC8A_WriteBlind
                                        (0036) export  DAC8A_WriteBlind2B
                                        (0037) export _DAC8A_WriteBlind2B
                                        (0038) 
                                        (0039) export  DAC8A_WriteStall
                                        (0040) export _DAC8A_WriteStall
                                        (0041) export  DAC8A_WriteStall2B
                                        (0042) export _DAC8A_WriteStall2B
                                        (0043) 
                                        (0044) export  DAC8A_Stop
                                        (0045) export _DAC8A_Stop
                                        (0046) 
                                        (0047) ;-----------------------------------------------
                                        (0048) ;  EQUATES
                                        (0049) ;-----------------------------------------------
                                        (0050) 
                                        (0051) cOFFSET:   equ 127              ; Conversion term for offset binary to 2's C
                                        (0052) bPWRMASK:  equ 03h              ; Power bitfield in Switched Cap CR3 reg
                                        (0053) bSPLITMASK:equ 03h              ; Marks split between MSB and LSB bits
                                        (0054) bSMMASK:   equ 3Fh              ; Sign and Magnitude bits mask
                                        (0055) bSIGNMASK: equ 20h              ; Sign bit mask
                                        (0056) 
                                        (0057)     AREA UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: DAC8A_Start
                                        (0062) ;  FUNCTION NAME: DAC8A_SetPower
                                        (0063) ;
                                        (0064) ;  DESCRIPTION:
                                        (0065) ;    Applies power setting to the module's analog PSoC blocks.
                                        (0066) ;
                                        (0067) ;-----------------------------------------------------------------------------
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:
                                        (0070) ;    A contains the power setting 0=Off, 1=Low, 2=Med, 3=High.
                                        (0071) ;
                                        (0072) ;  RETURNS: none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  DAC8A_Start:
                                        (0082) _DAC8A_Start:
                                        (0083)  DAC8A_SetPower:
                                        (0084) _DAC8A_SetPower:
                                        (0085)     RAM_PROLOGUE RAM_USE_CLASS_2
0C76: 21 03    AND   A,0x3              (0086)     and   A, bPWRMASK       ; trim input to bits of interest
0C78: 4F       MOV   X,SP               (0087)     mov   X, SP             ; Set stack frame pointer
0C79: 08       PUSH  A                  (0088)     push  A
                                        (0089)     ;; read CR3 registers, modify power bits & write back
0C7A: 5D 97    MOV   A,REG[0x97]        (0090)     mov   A, reg[DAC8A_MSB_CR3]
0C7C: 21 FC    AND   A,0xFC             (0091)     and   a, ~bPWRMASK      ; clear old setting
0C7E: 2B 00    OR    A,[X+0]            (0092)     or    A, [X]            ; set power in MSB register image
0C80: 60 97    MOV   REG[0x97],A        (0093)     mov   reg[DAC8A_MSB_CR3], A
0C82: 5D 87    MOV   A,REG[0x87]        (0094)     mov   A, reg[DAC8A_LSB_CR3]
0C84: 21 FC    AND   A,0xFC             (0095)     and   a, ~bPWRMASK      ; clear old setting
0C86: 2B 00    OR    A,[X+0]            (0096)     or    A, [X]            ; set power in LSB register image
0C88: 60 87    MOV   REG[0x87],A        (0097)     mov   reg[DAC8A_LSB_CR3], A
0C8A: 18       POP   A                  (0098)     pop   A
0C8B: 70 3F    AND   F,0x3F             
0C8D: 71 C0    OR    F,0xC0             
                                        (0099)     RAM_EPILOGUE RAM_USE_CLASS_2
0C8F: 7F       RET                      (0100)     ret
                                        (0101) .ENDSECTION
                                        (0102) 
                                        (0103) .SECTION
                                        (0104) ;-----------------------------------------------------------------------------
                                        (0105) ;  FUNCTION NAME: DAC8A_WriteBlind
                                        (0106) ;  FUNCTION NAME: DAC8A_WriteBlind2B
                                        (0107) ;
                                        (0108) ;  DESCRIPTION:
                                        (0109) ;    Modify the DAC's update value without worrying about the clocks
                                        (0110) ;    Lowest overhead, but may cause glitches on the output.
                                        (0111) ;
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;
                                        (0114) ;  ARGUMENTS:
                                        (0115) ;    A contains the update value if data format is offset binary or
                                        (0116) ;    2's complement. If format is 2-byte sign-and-magnitude, the LSB is in
                                        (0117) ;    A (as 00smmmmm) and the MSB is in X (as 00xmm000, where x=s\, the
                                        (0118) ;    inverted sign.
                                        (0119) ;
                                        (0120) ;  RETURNS: none
                                        (0121) ;
                                        (0122) ;  SIDE EFFECTS:
                                        (0123) ;    The A and X registers may be modified by this or future implementations
                                        (0124) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0125) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0126) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0127) ;    functions.
                                        (0128) ;
                                        (0129)  DAC8A_WriteBlind:
                                        (0130) _DAC8A_WriteBlind:
                                        (0131)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0132)   IF DAC8A_OFFSETBINARY
                                        (0133)     ;; Data is an unsigned byte value in [0..254] (i.e., 255 unique values).
                                        (0134)     ;; Following converts it to 2's complement:
                                        (0135)     sub   A, cOFFSET            ; Convert to 2's Complement
                                        (0136)   ENDIF
                                        (0137)   IF DAC8A_OFFSETBINARY | DAC8A_TWOSCOMPLEMENT
0C90: 4F       MOV   X,SP               (0138)     mov   X, SP
0C91: 08       PUSH  A                  (0139)     push  A                     ; Preserve the sign
0C92: 39 80    CMP   A,0x80             (0140)     cmp   A, 80h                ; negative (or zero)?
0C94: C0 05    JC    0x0C9A             (0141)     jc    BlindAdjustCycles     ;   no: just go on
0C96: 73       CPL   A                  (0142)     cpl   A                     ;  yes: take the 2's Complement
0C97: 74       INC   A                  (0143)     inc   A
0C98: 80 05    JMP   0x0C9E             (0144)     jmp   BlindMagSet
                                        (0145) BlindAdjustCycles:
0C9A: 73       CPL   A                  (0146)     cpl   A                     ; these 3 instructions implement a 13-cycle
0C9B: 73       CPL   A                  (0147)     cpl   A                     ;   NOP so it takes the same amount of time
0C9C: 80 01    JMP   0x0C9E             (0148)     jmp   BlindMagSet           ;   for both positive and negative numbers.
                                        (0149) BlindMagSet:
0C9E: 08       PUSH  A                  (0150)     push  A                     ; preserve LSB magnitude bits
0C9F: 27 01 03 AND   [X+1],0x3          (0151)     and   [X+1], bSPLITMASK
0CA2: 27 00 80 AND   [X+0],0x80         (0152)     and   [X], 80h              ; isolate the sign
0CA5: 2B 00    OR    A,[X+0]            (0153)     or    A, [X]                ; insert in MSB
0CA7: 67       ASR   A                  (0154)     asr   A                     ; justify MSB sign & mag
0CA8: 67       ASR   A                  (0155)     asr   A
0CA9: 21 3F    AND   A,0x3F             (0156)     and   A, bSMMASK            ; clear sign extension bits
                                        (0157)                                 ; Set FCap and ClockPhase bits for MSB
0CAB: 54 00    MOV   [X+0],A            (0158)     mov   [X], A                ; stash the MSB
0CAD: 21 20    AND   A,0x20             (0159)     and   A, bSIGNMASK          ; isolate the sign
0CAF: 31 20    XOR   A,0x20             (0160)     xor   A, bSIGNMASK          ;   and invert for LSB
0CB1: 66 01    ASL   [X+1]              (0161)     asl   [X+1]                 ; justify LSB magnitude
0CB3: 66 01    ASL   [X+1]              (0162)     asl   [X+1]
0CB5: 66 01    ASL   [X+1]              (0163)     asl   [X+1]
0CB7: 2B 01    OR    A,[X+1]            (0164)     or    A, [X+1]              ; combine LSB magnitude with sign
                                        (0165)                                 ; Set FCap and ClockPhase bits for LSB
0CB9: 20       POP   X                  (0166)     pop   X                     ; Put MSB in X
0CBA: 20       POP   X                  (0167)     pop   X
                                        (0168)   ENDIF
0CBB: 29 80    OR    A,0x80             (0169)     or    A, DAC8A_CR0_HIBITS
0CBD: 4B       SWAP  A,X                (0170)     swap  A, X
0CBE: 29 80    OR    A,0x80             (0171)     or    A, DAC8A_CR0_HIBITS
0CC0: 60 94    MOV   REG[0x94],A        (0172)     mov   reg[DAC8A_MSB_CR0], A
0CC2: 5B       MOV   A,X                (0173)     mov   A, X
0CC3: 60 84    MOV   REG[0x84],A        (0174)     mov   reg[DAC8A_LSB_CR0], A
0CC5: 70 3F    AND   F,0x3F             
0CC7: 71 C0    OR    F,0xC0             
                                        (0175)     RAM_EPILOGUE RAM_USE_CLASS_2
0CC9: 7F       RET                      (0176)     ret
                                        (0177) 
                                        (0178) 
                                        (0179)  DAC8A_WriteBlind2B:
                                        (0180) _DAC8A_WriteBlind2B:
                                        (0181)     RAM_PROLOGUE RAM_USE_CLASS_1
0CCA: 29 80    OR    A,0x80             (0182)     or    A, DAC8A_CR0_HIBITS
0CCC: 4B       SWAP  A,X                (0183)     swap  A, X
0CCD: 29 80    OR    A,0x80             (0184)     or    A, DAC8A_CR0_HIBITS
0CCF: 60 94    MOV   REG[0x94],A        (0185)     mov   reg[DAC8A_MSB_CR0], A
0CD1: 5B       MOV   A,X                (0186)     mov   A, X
0CD2: 60 84    MOV   REG[0x84],A        (0187)     mov   reg[DAC8A_LSB_CR0], A
                                        (0188)     RAM_EPILOGUE RAM_USE_CLASS_1
0CD4: 7F       RET                      (0189)     ret
                                        (0190) .ENDSECTION
                                        (0191) 
                                        (0192) .SECTION
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;  FUNCTION NAME: DAC8A_WriteStall
                                        (0195) ;  FUNCTION NAME: DAC8A_WriteStall2B
                                        (0196) ;
                                        (0197) ;  DESCRIPTION:
                                        (0198) ;    Modify the DAC's update value, stalling the CPU if necessary.
                                        (0199) ;    This routine should be used with faster analog clocks or when the
                                        (0200) ;    effect of prolonging interrupt latencies can be safely tolerated.
                                        (0201) ;
                                        (0202) ;-----------------------------------------------------------------------------
                                        (0203) ;
                                        (0204) ;  ARGUMENTS:
                                        (0205) ;   A contains the update value if data format is offset binary or
                                        (0206) ;   2's complement. If format is 2-byte sign-and-magnitude, the LSB is in
                                        (0207) ;   A (as 00smmmmm) and the MSB is in X (as 00xmm000, where x=s\, the
                                        (0208) ;   inverted sign.
                                        (0209) ;
                                        (0210) ;  RETURNS: none
                                        (0211) ;
                                        (0212) ;  SIDE EFFECTS:
                                        (0213) ;
                                        (0214) ;  THEORY of OPERATION or PROCEDURE:
                                        (0215) ;    The A and X registers may be modified by this or future implementations
                                        (0216) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0217) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0218) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0219) ;    functions.
                                        (0220) ;
                                        (0221)  DAC8A_WriteStall:
                                        (0222) _DAC8A_WriteStall:
                                        (0223)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0224)   IF DAC8A_OFFSETBINARY
                                        (0225)     ;; Data is an unsigned byte value in [0..254] (i.e., 255 unique values).
                                        (0226)     ;; Following converts it to 2's complement:
                                        (0227)     sub   A, cOFFSET            ; Convert to 2's Complement
                                        (0228)   ENDIF
                                        (0229)   IF DAC8A_OFFSETBINARY | DAC8A_TWOSCOMPLEMENT
0CD5: 4F       MOV   X,SP               (0230)     mov   X, SP
0CD6: 08       PUSH  A                  (0231)     push  A                     ; Preserve the sign
0CD7: 39 80    CMP   A,0x80             (0232)     cmp   A, 80h                ; negative (or zero)?
0CD9: C0 05    JC    0x0CDF             (0233)     jc    StallAdjustCycles     ;   no: just go on
0CDB: 73       CPL   A                  (0234)     cpl   A                     ;  yes: take the 2's Complement
0CDC: 74       INC   A                  (0235)     inc   A
0CDD: 80 05    JMP   0x0CE3             (0236)     jmp   StallMagSet
                                        (0237) StallAdjustCycles:
0CDF: 73       CPL   A                  (0238)     cpl   A                     ; these 3 instructions implement a 13-cycle
0CE0: 73       CPL   A                  (0239)     cpl   A                     ;   NOP so it takes the same amount of time
0CE1: 80 01    JMP   0x0CE3             (0240)     jmp   StallMagSet           ;   for both positive and negative numbers.
                                        (0241) StallMagSet:
0CE3: 08       PUSH  A                  (0242)     push  A                     ; preserve LSB magnitude bits
0CE4: 27 01 03 AND   [X+1],0x3          (0243)     and   [X+1], bSPLITMASK
0CE7: 27 00 80 AND   [X+0],0x80         (0244)     and   [X], 80h              ; isolate the sign
0CEA: 2B 00    OR    A,[X+0]            (0245)     or    A, [X]                ; insert in MSB
0CEC: 67       ASR   A                  (0246)     asr   A                     ; justify MSB sign & mag
0CED: 67       ASR   A                  (0247)     asr   A
0CEE: 21 3F    AND   A,0x3F             (0248)     and   A, bSMMASK            ; clear sign extension bits
                                        (0249)                                 ; Set FCap and ClockPhase bits for MSB
0CF0: 54 00    MOV   [X+0],A            (0250)     mov   [X], A                ; stash the MSB
0CF2: 21 20    AND   A,0x20             (0251)     and   A, bSIGNMASK          ; isolate the sign
0CF4: 31 20    XOR   A,0x20             (0252)     xor   A, bSIGNMASK          ;   and invert for LSB
0CF6: 66 01    ASL   [X+1]              (0253)     asl   [X+1]                 ; justify LSB magnitude
0CF8: 66 01    ASL   [X+1]              (0254)     asl   [X+1]
0CFA: 66 01    ASL   [X+1]              (0255)     asl   [X+1]
0CFC: 2B 01    OR    A,[X+1]            (0256)     or    A, [X+1]              ; combine LSB magnitude with sign
                                        (0257)                                 ; Set FCap and ClockPhase bits for LSB
0CFE: 20       POP   X                  (0258)     pop   X                     ; Put MSB in X
0CFF: 20       POP   X                  (0259)     pop   X
                                        (0260)   ENDIF
0D00: 29 80    OR    A,0x80             (0261)     or    A, DAC8A_CR0_HIBITS
0D02: 4B       SWAP  A,X                (0262)     swap  A, X
0D03: 29 80    OR    A,0x80             (0263)     or    A, DAC8A_CR0_HIBITS
0D05: 43 65 01 OR    REG[0x65],0x1      
                                        (0264) 
                                        (0265)     M8C_Stall
0D08: 60 94    MOV   REG[0x94],A        (0266)     mov   reg[DAC8A_MSB_CR0], A
0D0A: 41 65 FE AND   REG[0x65],0xFE     
                                        (0267)     M8C_Unstall
0D0D: 5B       MOV   A,X                (0268)     mov   A, X
0D0E: 60 84    MOV   REG[0x84],A        (0269)     mov   reg[DAC8A_LSB_CR0], A
0D10: 70 3F    AND   F,0x3F             
0D12: 71 C0    OR    F,0xC0             
                                        (0270)     RAM_EPILOGUE RAM_USE_CLASS_2
0D14: 7F       RET                      (0271)     ret
                                        (0272) 
                                        (0273)  DAC8A_WriteStall2B:
                                        (0274) _DAC8A_WriteStall2B:
                                        (0275)     RAM_PROLOGUE RAM_USE_CLASS_1
0D15: 29 80    OR    A,0x80             (0276)     or    A, DAC8A_CR0_HIBITS
0D17: 4B       SWAP  A,X                (0277)     swap  A, X
0D18: 29 80    OR    A,0x80             (0278)     or    A, DAC8A_CR0_HIBITS
0D1A: 43 65 01 OR    REG[0x65],0x1      
                                        (0279) 
                                        (0280)     M8C_Stall
0D1D: 60 94    MOV   REG[0x94],A        (0281)     mov   reg[DAC8A_MSB_CR0], A
0D1F: 41 65 FE AND   REG[0x65],0xFE     
                                        (0282)     M8C_Unstall
0D22: 5B       MOV   A,X                (0283)     mov   A, X
0D23: 60 84    MOV   REG[0x84],A        (0284)     mov   reg[DAC8A_LSB_CR0], A
                                        (0285)     RAM_EPILOGUE RAM_USE_CLASS_1
0D25: 7F       RET                      (0286)     ret
                                        (0287) .ENDSECTION
                                        (0288) 
                                        (0289) .SECTION
                                        (0290) ;-----------------------------------------------------------------------------
                                        (0291) ;  FUNCTION NAME: DAC8A_Stop
                                        (0292) ;
                                        (0293) ;  DESCRIPTION:
                                        (0294) ;    Cuts power to the user module.
                                        (0295) ;
                                        (0296) ;-----------------------------------------------------------------------------
                                        (0297) ;
                                        (0298) ;  ARGUMENTS: none
                                        (0299) ;
                                        (0300) ;  RETURNS: none
                                        (0301) ;
                                        (0302) ;  SIDE EFFECTS:
                                        (0303) ;    The A and X registers may be modified by this or future implementations
                                        (0304) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0305) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0306) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0307) ;    functions.
                                        (0308) ;
                                        (0309)  DAC8A_Stop:
                                        (0310) _DAC8A_Stop:
                                        (0311)     RAM_PROLOGUE RAM_USE_CLASS_1
0D26: 41 97 FC AND   REG[0x97],0xFC     (0312)     and  reg[DAC8A_MSB_CR3], ~bPWRMASK
0D29: 41 87 FC AND   REG[0x87],0xFC     (0313)     and  reg[DAC8A_LSB_CR3], ~bPWRMASK
                                        (0314)     RAM_EPILOGUE RAM_USE_CLASS_1
0D2C: 7F       RET                      (0315)     ret
                                        (0316) .ENDSECTION
                                        (0317) ; End of File DAC8A.asm
FILE: lib\amux4.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   AMUX4.asm
                                        (0004) ;;  Version: 1.50, Updated on 2015/3/4 at 22:21:30
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: AMux4 User Module software implementation file devices.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) 
                                        (0023) include "AMUX4.inc"
                                        (0024) include "m8c.inc"
                                        (0025) include "memory.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  AMUX4_InputSelect
                                        (0031) export _AMUX4_InputSelect
                                        (0032) 
                                        (0033) export  AMUX4_Start
                                        (0034) export _AMUX4_Start
                                        (0035) 
                                        (0036) export  AMUX4_Stop
                                        (0037) export _AMUX4_Stop
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  EQUATES
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) MUXMASK:                     equ 03h
                                        (0044) 
                                        (0045) AREA UserModules (ROM, REL)
                                        (0046) .SECTION
                                        (0047) ;-----------------------------------------------------------------------------
                                        (0048) ;  FUNCTION NAME: AMUX4_InputSelect
                                        (0049) ;
                                        (0050) ;  DESCRIPTION:
                                        (0051) ;    Place the signal from one of four port0 pins on the Analog Column bus.
                                        (0052) ;
                                        (0053) ;-----------------------------------------------------------------------------
                                        (0054) ;
                                        (0055) ;  ARGUMENTS:
                                        (0056) ;    A contains the mux input control value
                                        (0057) ;
                                        (0058) ;      Input           Code
                                        (0059) ;   Mux input 0,1       00h
                                        (0060) ;   Mux input 2,3       01h
                                        (0061) ;   Mux input 4,5       02h
                                        (0062) ;   Mux input 6,7       03h
                                        (0063) ;
                                        (0064) ;  RETURNS: none
                                        (0065) ;
                                        (0066) ;  SIDE EFFECTS:
                                        (0067) ;    The A and X registers may be modified by this or future implementations
                                        (0068) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0069) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0070) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0071) ;    functions.
                                        (0072) ;
                                        (0073)  AMUX4_InputSelect:
                                        (0074) _AMUX4_InputSelect:
                                        (0075)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0076) 	
                                        (0077) IF (AMUX4_COL_COUNT)
                                        (0078) 	M8C_SetBank1      ; ACE_AMX_IN is in Bank 1
                                        (0079) ENDIF
                                        (0080) 	
0D2D: 21 03    AND   A,0x3              (0081)     and  A, MUXMASK                    ; Mask off only valid port0 input bits
0D2F: 57 00    MOV   X,0x0              (0082)     mov  X,AMUX4_MUX_COL
                                        (0083) .AMUX4_ShiftIt:                         ; Shift value to correct bit position for Mux
0D31: 79       DEC   X                  (0084)     dec  X
0D32: C0 05    JC    0x0D38             (0085)     jc   .AMUX4_SetIt
0D34: 64       ASL   A                  (0086)     asl  A
0D35: 64       ASL   A                  (0087)     asl  A
0D36: 8F FA    JMP   0x0D31             (0088)     jmp  .AMUX4_ShiftIt                ; Loop until bits shifted to 2 LSBs
                                        (0089) 
                                        (0090) .AMUX4_SetIt:
0D38: 4F       MOV   X,SP               (0091)     mov  X,SP                          ; Get current stack location
0D39: 08       PUSH  A                  (0092)     push A                             ; Save a to OR it to AMX_IN later	
                                        (0093) IF (AMUX4_COL_COUNT)
                                        (0094) 	mov  A, reg[ACE_AMX_IN]                 ; Get current value of mux control register    
                                        (0095) ELSE
0D3A: 5D 60    MOV   A,REG[0x60]        (0096) 	mov  A, reg[AMX_IN]                 ; Get current value of mux control register
                                        (0097) ENDIF
0D3C: 21 FC    AND   A,0xFC             (0098)     and  A,~AMUX4_MUX_MASK             ; Mask off the bits for this Mux
0D3E: 2B 00    OR    A,[X+0]            (0099)     or   A,[X]                         ; OR in the mux control bits
                                        (0100) IF (AMUX4_COL_COUNT)
                                        (0101) 	mov  reg[ACE_AMX_IN], A                 ; Get current value of mux control register    
                                        (0102) ELSE
0D40: 60 60    MOV   REG[0x60],A        (0103) 	mov  reg[AMX_IN], A                 ; Write out mux value to mux control register
                                        (0104) ENDIF	
0D42: 18       POP   A                  (0105)     pop  A                             ; Restore the stack
0D43: 70 3F    AND   F,0x3F             
0D45: 71 C0    OR    F,0xC0             
                                        (0106) 	
                                        (0107) IF (AMUX4_COL_COUNT)
                                        (0108) 	M8C_SetBank0
                                        (0109) ENDIF
                                        (0110)     RAM_EPILOGUE RAM_USE_CLASS_2
0D47: 7F       RET                      (0111)     ret
                                        (0112) .ENDSECTION
                                        (0113) 
                                        (0114) .SECTION
                                        (0115) ;-----------------------------------------------------------------------------
                                        (0116) ;  FUNCTION NAME: AMUX4_Start
                                        (0117) ;
                                        (0118) ;  DESCRIPTION:
                                        (0119) ;   This function does nothing at this time.  It is only here for
                                        (0120) ;   future compatibility.
                                        (0121) ;
                                        (0122) ;-----------------------------------------------------------------------------
                                        (0123) ;
                                        (0124) ;  ARGUMENTS: none
                                        (0125) ;
                                        (0126) ;  RETURNS: none
                                        (0127) ;
                                        (0128) ;  SIDE EFFECTS:
                                        (0129) ;    The A and X registers may be modified by this or future implementations
                                        (0130) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0131) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0132) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0133) ;    functions.
                                        (0134) ;
                                        (0135)  AMUX4_Start:
                                        (0136) _AMUX4_Start:
                                        (0137)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0138)     RAM_EPILOGUE RAM_USE_CLASS_1
0D48: 7F       RET                      (0139)     ret
                                        (0140) .ENDSECTION
                                        (0141) 
                                        (0142) .SECTION
                                        (0143) ;-----------------------------------------------------------------------------
                                        (0144) ;  FUNCTION NAME: AMUX4_Stop
                                        (0145) ;
                                        (0146) ;  DESCRIPTION:
                                        (0147) ;   This function does nothing at this time.  It is only here for
                                        (0148) ;   future compatibility.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;
                                        (0152) ;  ARGUMENTS:  none
                                        (0153) ;
                                        (0154) ;  RETURNS: none
                                        (0155) ;
                                        (0156) ;  SIDE EFFECTS:
                                        (0157) ;    The A and X registers may be modified by this or future implementations
                                        (0158) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0159) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0160) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0161) ;    functions.
                                        (0162) ;
                                        (0163)  AMUX4_Stop:
                                        (0164) _AMUX4_Stop:
                                        (0165)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0166)     RAM_EPILOGUE RAM_USE_CLASS_1
0D49: 7F       RET                      (0167)     ret
                                        (0168) .ENDSECTION
                                        (0169) ; End of File AMUX4.asm
FILE: C:\Users\TANGY_~1\DOCUME~1\ECE381~1\DATAAC~1\DATAAC~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // SPI SRAM Test Program
(0003) //
(0004) // PSoC Global Resources:
(0005) //   Power Setting     5.0V/24MHz
(0006) //   CPU_Clock         SysClk/1
(0007) //   32K_Select        Internal
(0008) //   PLL_Mode          Off
(0009) //   Sleep_Timer       8_Hz
(0010) //   VC1=SysClk/N     *4
(0011) //   VC2=VC1/N        *2
(0012) //                    *VC1 makes 6MHz SPIM Clock; VC2 makes 3MHz DAC Clock
(0013) //   VC3_Source        SysClk/1
(0014) //   VC3 Divider      *52
(0015) //                    *Used to set UART baud rate to 57600
(0016) //   SysClk Source     Internal
(0017) //   SysClk*2 Disable  { Any }
(0018) //   Analog Power      { Any }
(0019) //   Ref Mux           { Any }
(0020) //   AGndBypass        { Any }
(0021) //   Op-Amp Bias       { Any }
(0022) //   A_Buff_Power      { Any }
(0023) //   SwitchModePump    OFF
(0024) //   Trip Voltage      { Any }
(0025) //   LVD ThrottleBack *Disable
(0026) //                    *When enabled, an LVD event forces the CPU Clock to SysClk/8.
(0027) //   Watchdog Enable  *{ Any }
(0028) //                    *Incautious use of the Watchdog may adversely affect timing
(0029) //
(0030) // SPIM Parameters
(0031) //   Name              SPIM
(0032) //   Clock            *VC1
(0033) //                    *6MHz = 3Mbps SPI bit rate.
(0034) //   MISO              Row_2_Input_1
(0035) //   MOSI              Row_2_Output_0
(0036) //   SClk              Row_2_Output_3
(0037) //   Interrupt Mode    TXRegEmpty
(0038) //   ClockSync         Sync to SysClk
(0039) //   InvertMISO        Normal
(0040) //
(0041) // SPIM Module Notes
(0042) //  -The 23K256 SPI SRAM has a maximum clock speed of 20MHz
(0043) //   SPIM Clock must be set to two times the desired bit rate.
(0044) //  -This uses VC1 = SysClk/4 = 6MHz, yielding a bit rate of 3Mbps.
(0045) //  -Per SPIM Module datasheet, for SPI clocks greater than 1MHz,
(0046) //   the Row Input synchronization for the MISO signal should be
(0047) //   set to Async.
(0048) //  -PSoC 5V to 23K256 3.3V translation is accomplished by setting
(0049) //   all PSoC SPIM outputs to Open Drain Low drive mode and then
(0050) //   using 470ohm pull-up resistors. For 3MHz signals, a smaller
(0051) //   value resistor must be used to allow sufficient rise-time.
(0052) //  -Pinout:
(0053) //   CS   = P12 (StdCPU:    Open Drain Low)
(0054) //   SCLK = P13 (GlobalOut: Open Drain Low)
(0055) //   MOSI = P14 (GlobalOut: Open Drain Low)
(0056) //   MISO = P15 (GlobalIn:  High Z)
(0057) //
(0058) // DAC Module Notes
(0059) //  -To maximize the output sample rate, this example operates the
(0060) //   DACs at their maximum practical speed of 3MHz which is provided
(0061) //   by VC2. The Analog Column Clock MUXs for both DAC must have
(0062) //   VC2 selected manually in the [Chip] view.
(0063) //  -DAC8_WriteStall() should be used and not DAC8_WriteBlind in
(0064) //   order to prevent output glitches during the DAC update.
(0065) //
(0066) // bnoble@siue.edu 20140320
(0067) //----------------------------------------------------------------------------
(0068) 
(0069) #include <m8c.h>        // part specific constants and macros
(0070) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0071) #include "stdlib.h"
(0072) #include "spi_sram.h"
(0073) #include "math.h"
(0074) 
(0075) 
(0076) #define ARRAY_SIZE 64
(0077) 
(0078) 
(0079) /// testing 
(0080) /// 
(0081) // GPIO Defines
(0082) #define TRIGGER_HIGH	{TRIGGER_Data_ADDR |=  TRIGGER_MASK;}
(0083) #define TRIGGER_LOW		{TRIGGER_Data_ADDR &= ~TRIGGER_MASK;}
(0084) 
(0085) // Define Sampling Rates
(0086) #define SAMPLING_RATE_1250 149 // (150-1)
(0087) #define SAMPLING_RATE_1500 124 // (125-1)
(0088) #define SAMPLING_RATE_1875  99 // (100-1)
(0089) #define SAMPLING_RATE_2500  74 //  (75-1)
(0090) #define SAMPLING_RATE_3125  59 //  (60-1)
(0091) #define SAMPLING_RATE_3750  49 //  (50-1)
(0092) #define SAMPLING_RATE_6250  29 //  (30-1)
(0093) #define SAMPLING_RATE_7500  24 //  (25-1)
(0094) #define SAMPLING_RATE_9375  19 //  (20-1)
(0095) 
(0096) int i;
(0097) 
(0098) // DACUpdate Period = 4*DelSig_DecimationRate = 128 for DS232
(0099) #define DACUPDATE_PERIOD   127 // (128 - 1)
(0100) 
(0101) // Globals
(0102) BYTE DACUpdateDone = 0;
(0103) // add your globals here
(0104) 
(0105) float fScaleFactor;
(0106) 
(0107) int trigAdr;
(0108) 
(0109) char *pResult;
(0110) float voltage; 
(0111) char sampleRead;
(0112) 
(0113) char Svalue;
(0114) int j;
(0115) int k;
(0116) int blockNum2;
(0117) int iStatus;
(0118) char rawString[64];  
(0119) char charIn;
(0120) BOOL finishFlag;
(0121) int parseNum;
(0122) int blockNum;
(0123) BOOL displayOrcapture;
(0124) BOOL done = FALSE;
(0125) BOOL inA = TRUE;
(0126) BOOL error = FALSE;
(0127) BOOL validMode = TRUE;
(0128) void readFunction (void);
(0129) void stringParser(int parseNum);
(0130) void instruction1(void);
(0131) void instruction2(void);
(0132) void instruction3(void);
(0133) void instruction4(void);
(0134) void instruction5(void);
(0135) void instruction6(void);
(0136) void instruction7(void);
(0137) char toLower(char k);
(0138) unsigned int hexToDec(char c1, char c2, char c3, char c4);
(0139) 
(0140) unsigned char ascii_to_hex(unsigned char*  addressString);
(0141) WORD SPIRAM_ByteModeTest(void);
(0142) WORD SPIRAM_SequentialModeTest(void);
(0143) 
(0144) int sampleRateS[9]= {
(0145) SAMPLING_RATE_1250,
(0146) SAMPLING_RATE_1500,
(0147) SAMPLING_RATE_1875,
(0148) SAMPLING_RATE_2500, 
(0149) SAMPLING_RATE_3125, 
(0150) SAMPLING_RATE_3750,
(0151) SAMPLING_RATE_6250,
(0152) SAMPLING_RATE_7500,
(0153) SAMPLING_RATE_9375
(0154) };
(0155) 
(0156) int sampleRate; 
(0157) 
(0158) 
(0159) 
(0160) void main(void)
(0161) {
__UserModules_end|__text_start|_main|_main:
  count                --> X+0
    0D4A: 10       PUSH  X
    0D4B: 4F       MOV   X,SP
    0D4C: 38 02    ADD   SP,0x2
(0162) 	int count=0;
    0D4E: 56 01 00 MOV   [X+1],0x0
    0D51: 56 00 00 MOV   [X+0],0x0
(0163) 	fScaleFactor = (float)5/(float)64;
    0D54: 62 D0 00 MOV   REG[0xD0],0x0
    0D57: 55 62 3D MOV   [fScaleFactor],0x3D
    0D5A: 55 63 A0 MOV   [fScaleFactor+1],0xA0
    0D5D: 55 64 00 MOV   [fScaleFactor+2],0x0
    0D60: 55 65 00 MOV   [fScaleFactor+3],0x0
(0164) 	// Make sure nCS is high before doing anything
(0165) 	nCS_HIGH;
    0D63: 43 04 04 OR    REG[0x4],0x4
(0166) 	// Make the oscilloscope external trigger signal low. Trigger must be quickly
(0167) 	// brough high-then-low when you want the oscilloscope to draw the signals
(0168) 	// on DACA and DACB. Trigger (P1[1]) must be connected to the EXT TRIG input
(0169) 	// on the back of the oscilloscope and the Trigger Source must be set to
(0170) 	// External. The oscilloscope should also be set for Normal Mode Triggering.
(0171) 	TRIGGER_LOW;
    0D66: 41 04 FD AND   REG[0x4],0xFD
(0172) 	// Enable global interrutps
(0173) 	M8C_EnableGInt;
    0D69: 71 01    OR    F,0x1
(0174) 	
(0175) //	SleepTimer_Start();
(0176) //	
(0177) //	SleepTimer_EnableInt();
(0178) //	SleepTimer_Start();
(0179) 	LCD_Start();
    0D6B: 10       PUSH  X
    0D6C: 7C 0A 1B LCALL LCD_Start|_LCD_Init|LCD_Init|_LCD_Start
(0180) 
(0181) 	// Start the UART
(0182) 	UART_Start(UART_PARITY_NONE);
    0D6F: 50 00    MOV   A,0x0
    0D71: 7C 07 5E LCALL _UART_Start
(0183) 	UART_PutCRLF();
    0D74: 7C 08 85 LCALL _UART_PutCRLF
(0184) 
(0185) 	// Start the SPIM Module
(0186) 	SPIM_Start(SPIM_SPIM_MODE_0 | SPIM_SPIM_MSB_FIRST);
    0D77: 50 00    MOV   A,0x0
    0D79: 7C 08 97 LCALL _SPIM_Start
(0187) 
(0188) 	// Start the DelSig custom clock source at the default sampling rate
(0189) 	//DelSigClock_WritePeriod(SAMPLING_RATE_1250); //SAMPLING_RATE_1250
(0190) 	DelSigClock_WritePeriod(SAMPLING_RATE_3125);
    0D7C: 50 3B    MOV   A,0x3B
    0D7E: 7C 0A E7 LCALL _DelSigClock_WritePeriod
(0191) 	DelSigClock_WriteCompareValue(SAMPLING_RATE_3125>>1);
    0D81: 50 1D    MOV   A,0x1D
    0D83: 7C 0A EA LCALL _DelSigClock_WriteCompareValue
(0192) 	//DelSigClock_WriteCompareValue(SAMPLING_RATE_1250>>1); //SAMPLING_RATE_1250>>1
(0193) 	DelSigClock_Start();
    0D86: 7C 0A DF LCALL _DelSigClock_Start
(0194) 
(0195) 	
(0196) 	// Start the analog mux and select P0[1] (Channel A) as default
(0197) 	AMUX4_Start();
    0D89: 7C 0D 48 LCALL _AMUX4_Start
(0198) 	AMUX4_InputSelect(AMUX4_PORT0_1);
    0D8C: 50 00    MOV   A,0x0
    0D8E: 7C 0D 2D LCALL _AMUX4_InputSelect
(0199) 
(0200) 	// Start the PGA
(0201) 	PGA_Start(PGA_HIGHPOWER);
    0D91: 50 03    MOV   A,0x3
    0D93: 7C 08 C9 LCALL _PGA_Start|PGA_SetPower|_PGA_SetPower
(0202) 
(0203) 	// Start the DelSig but do not start taking samples yet.
(0204) 	// Note: The DelSig PWM block output can be monitored on P1[0]. This
(0205) 	// can be used to verify the sampling rate.
(0206) 	DelSig_Start(DelSig_HIGHPOWER);
    0D96: 50 03    MOV   A,0x3
    0D98: 7C 0B 21 LCALL _DelSig_Start|_DelSig_SetPower|DelSig_SetPower
(0207) 	
(0208) 	
(0209) 
(0210) 	// Enable interrupts on the counter that sets the DAC output rate.
(0211) 	// Start the module only when actually outputting samples and
(0212) 	// stop it when done. Don't forget to write the period after stoping
(0213) 	// to reset the count register.
(0214) 	// NOTE: You can watch this counter on P1[7] to compare desired
(0215) 	// output rate with your actual output rate.
(0216) 	DACUpdate_WritePeriod(DACUPDATE_PERIOD);
    0D9B: 50 7F    MOV   A,0x7F
    0D9D: 7C 0B 85 LCALL _DACUpdate_WritePeriod
(0217) 	DACUpdate_EnableInt();
    0DA0: 7C 0B 75 LCALL _DACUpdate_EnableInt
(0218) 
(0219) 	
(0220) 	
(0221) 	// Start the DACs
(0222) 	DAC8A_Start(DAC8A_HIGHPOWER);
    0DA3: 50 03    MOV   A,0x3
    0DA5: 7C 0C 76 LCALL _DAC8A_SetPower|DAC8A_Start|_DAC8A_Start
(0223) 	DAC8B_Start(DAC8B_HIGHPOWER);
    0DA8: 50 03    MOV   A,0x3
    0DAA: 7C 0B BF LCALL DAC8B_SetPower|_DAC8B_Start|_DAC8B_SetPower|DAC8B_Start
(0224) 	UART_PutCRLF();
    0DAD: 7C 08 85 LCALL _UART_PutCRLF
(0225) 	UART_CPutString("Lab 11 Data Acquisition System\r\n");
    0DB0: 50 04    MOV   A,0x4
    0DB2: 08       PUSH  A
    0DB3: 50 B5    MOV   A,0xB5
    0DB5: 5C       MOV   X,A
    0DB6: 18       POP   A
    0DB7: 7C 08 73 LCALL _UART_CPutString
(0226) 	UART_CPutString("This is a project template. You fill in the details.\r\n");
    0DBA: 50 04    MOV   A,0x4
    0DBC: 08       PUSH  A
    0DBD: 50 7E    MOV   A,0x7E
    0DBF: 5C       MOV   X,A
    0DC0: 18       POP   A
    0DC1: 7C 08 73 LCALL _UART_CPutString
(0227) 	UART_CPutString("Don't forget to place your lab 10 SPI SRAM code in spi_sram.c!\r\n");
    0DC4: 50 04    MOV   A,0x4
    0DC6: 08       PUSH  A
    0DC7: 50 3D    MOV   A,0x3D
    0DC9: 5C       MOV   X,A
    0DCA: 18       POP   A
    0DCB: 7C 08 73 LCALL _UART_CPutString
(0228) 	UART_PutCRLF();
    0DCE: 7C 08 85 LCALL _UART_PutCRLF
    0DD1: 20       POP   X
    0DD2: 83 19    JMP   0x10EC
(0229) 	
(0230) 	// Enter the main loop
(0231) 
(0232) 	while(1) {
(0233) 		
(0234) //			instruction5();	
(0235) //		    readFunction();
(0236) //			UART_PutSHexInt(ascii_to_hex(rawString));
(0237) //			UART_PutCRLF();
(0238) //			UART_CPutString("HB T: ");
(0239) //			UART_PutSHexByte((int)rawString[0]);
(0240) //			UART_PutCRLF();
(0241) //			UART_CPutString("HB: ");
(0242) //			UART_PutSHexByte(rawString[0]);
(0243) //			UART_PutCRLF();
(0244) //			UART_CPutString("HI T: ");
(0245) //			UART_PutSHexInt((int)rawString[0]);
(0246) //			UART_PutCRLF();
(0247) //			UART_CPutString("HC T: ");
(0248) //			UART_PutChar((int)rawString[0]);
(0249) //			UART_PutCRLF();
(0250) //			UART_CPutString("HC: ");
(0251) //			UART_PutChar(rawString[0]);
(0252) //			UART_PutCRLF();
(0253) //			UART_PutCRLF();
(0254) //			UART_PutChar(hexToDec(rawString[3], rawString[2], rawString[1], rawString[0]));
(0255) //			UART_PutCRLF();
(0256) //        	UART_PutCRLF();
(0257) 			
(0258) 		
(0259) 		validMode = TRUE;
    0DD4: 62 D0 00 MOV   REG[0xD0],0x0
    0DD7: 55 80 01 MOV   [validMode],0x1
(0260) 		UART_PutCRLF();
    0DDA: 10       PUSH  X
    0DDB: 7C 08 85 LCALL _UART_PutCRLF
(0261) 		UART_PutCRLF();
    0DDE: 7C 08 85 LCALL _UART_PutCRLF
    0DE1: 20       POP   X
(0262) 		instruction1();	
    0DE2: 97 34    CALL  _instruction1
(0263) 		readFunction();
    0DE4: 93 1E    CALL  _readFunction
(0264) 		stringParser(1);
    0DE6: 50 00    MOV   A,0x0
    0DE8: 08       PUSH  A
    0DE9: 50 01    MOV   A,0x1
    0DEB: 08       PUSH  A
    0DEC: 94 10    CALL  _stringParser
    0DEE: 38 FE    ADD   SP,0xFE
(0265) 		
(0266) 		if (validMode){
    0DF0: 62 D0 00 MOV   REG[0xD0],0x0
    0DF3: 3C 80 00 CMP   [validMode],0x0
    0DF6: A2 F5    JZ    0x10EC
(0267) 			
(0268) 		if(displayOrcapture){
    0DF8: 62 D0 00 MOV   REG[0xD0],0x0
    0DFB: 3C 7F 00 CMP   [displayOrcapture],0x0
    0DFE: A1 9D    JZ    0x0F9C
(0269) 			
(0270) 			    error = FALSE;
    0E00: 62 D0 00 MOV   REG[0xD0],0x0
    0E03: 55 83 00 MOV   [error],0x0
(0271) 				instruction3();	
    0E06: 97 44    CALL  _instruction3
(0272) 			    readFunction();
    0E08: 92 FA    CALL  _readFunction
(0273) 			    stringParser(2);
    0E0A: 50 00    MOV   A,0x0
    0E0C: 08       PUSH  A
    0E0D: 50 02    MOV   A,0x2
    0E0F: 08       PUSH  A
    0E10: 93 EC    CALL  _stringParser
    0E12: 38 FE    ADD   SP,0xFE
(0274) 			
(0275) 			if(!error){
    0E14: 62 D0 00 MOV   REG[0xD0],0x0
    0E17: 3C 83 00 CMP   [error],0x0
    0E1A: B0 0F    JNZ   0x0E2A
(0276) 		
(0277) 			instruction7();	//block num 
    0E1C: 97 B0    CALL  _instruction7
(0278) 		    readFunction();
    0E1E: 92 E4    CALL  _readFunction
(0279) 		    stringParser(5);
    0E20: 50 00    MOV   A,0x0
    0E22: 08       PUSH  A
    0E23: 50 05    MOV   A,0x5
    0E25: 08       PUSH  A
    0E26: 93 D6    CALL  _stringParser
    0E28: 38 FE    ADD   SP,0xFE
(0280) 			}
(0281) 			
(0282) 			
(0283) 		if(!error){
    0E2A: 62 D0 00 MOV   REG[0xD0],0x0
    0E2D: 3C 83 00 CMP   [error],0x0
    0E30: B2 BB    JNZ   0x10EC
(0284) 					
(0285) 		      	 UART_PutCRLF();
    0E32: 10       PUSH  X
    0E33: 7C 08 85 LCALL _UART_PutCRLF
(0286) 			 	 UART_CPutString("Displaying waveform (press any key to exit)");	
    0E36: 50 04    MOV   A,0x4
    0E38: 08       PUSH  A
    0E39: 50 11    MOV   A,0x11
    0E3B: 5C       MOV   X,A
    0E3C: 18       POP   A
    0E3D: 7C 08 73 LCALL _UART_CPutString
(0287) 			     UART_PutCRLF();
    0E40: 7C 08 85 LCALL _UART_PutCRLF
(0288) 				 UART_PutCRLF();
    0E43: 7C 08 85 LCALL _UART_PutCRLF
    0E46: 20       POP   X
(0289) 			
(0290) 			done = FALSE;
    0E47: 62 D0 00 MOV   REG[0xD0],0x0
    0E4A: 55 85 00 MOV   [done],0x0
    0E4D: 81 44    JMP   0x0F92
(0291) 			while (!done){
(0292) 				j=(8192*(blockNum-1));
    0E4F: 62 D0 00 MOV   REG[0xD0],0x0
    0E52: 51 73    MOV   A,[blockNum+1]
    0E54: 11 01    SUB   A,0x1
    0E56: 62 D0 00 MOV   REG[0xD0],0x0
    0E59: 53 61    MOV   [__r0],A
    0E5B: 55 60 00 MOV   [__r1],0x0
    0E5E: 65 61    ASL   [__r0]
    0E60: 65 60    ASL   [__r1]
    0E62: 6B 61    RLC   [__r0]
    0E64: 65 60    ASL   [__r1]
    0E66: 6B 61    RLC   [__r0]
    0E68: 65 60    ASL   [__r1]
    0E6A: 6B 61    RLC   [__r0]
    0E6C: 65 60    ASL   [__r1]
    0E6E: 6B 61    RLC   [__r0]
    0E70: 51 60    MOV   A,[__r1]
    0E72: 08       PUSH  A
    0E73: 51 61    MOV   A,[__r0]
    0E75: 62 D0 00 MOV   REG[0xD0],0x0
    0E78: 53 6A    MOV   [j],A
    0E7A: 18       POP   A
    0E7B: 53 6B    MOV   [j+1],A
(0293) 				k=(8192*(blockNum2-1));
    0E7D: 62 D0 00 MOV   REG[0xD0],0x0
    0E80: 51 77    MOV   A,[blockNum2+1]
    0E82: 11 01    SUB   A,0x1
    0E84: 62 D0 00 MOV   REG[0xD0],0x0
    0E87: 53 61    MOV   [__r0],A
    0E89: 55 60 00 MOV   [__r1],0x0
    0E8C: 65 61    ASL   [__r0]
    0E8E: 65 60    ASL   [__r1]
    0E90: 6B 61    RLC   [__r0]
    0E92: 65 60    ASL   [__r1]
    0E94: 6B 61    RLC   [__r0]
    0E96: 65 60    ASL   [__r1]
    0E98: 6B 61    RLC   [__r0]
    0E9A: 65 60    ASL   [__r1]
    0E9C: 6B 61    RLC   [__r0]
    0E9E: 51 60    MOV   A,[__r1]
    0EA0: 08       PUSH  A
    0EA1: 51 61    MOV   A,[__r0]
    0EA3: 62 D0 00 MOV   REG[0xD0],0x0
    0EA6: 53 70    MOV   [k],A
    0EA8: 18       POP   A
    0EA9: 53 71    MOV   [k+1],A
    0EAB: 80 59    JMP   0x0F05
(0294) 				while (j<(blockNum*8192) &&  k<(blockNum2*8192)){
(0295) 					
(0296) 				k++;
    0EAD: 62 D0 00 MOV   REG[0xD0],0x0
    0EB0: 76 71    INC   [k+1]
    0EB2: 0E 70 00 ADC   [k],0x0
(0297) 				j++; 
    0EB5: 62 D0 00 MOV   REG[0xD0],0x0
    0EB8: 76 6B    INC   [j+1]
    0EBA: 0E 6A 00 ADC   [j],0x0
(0298) 
(0299) 				if (UART_cReadChar()){done = TRUE;}
    0EBD: 10       PUSH  X
    0EBE: 7C 07 E0 LCALL _UART_cReadChar
    0EC1: 20       POP   X
    0EC2: 39 00    CMP   A,0x0
    0EC4: A0 07    JZ    0x0ECC
    0EC6: 62 D0 00 MOV   REG[0xD0],0x0
    0EC9: 55 85 01 MOV   [done],0x1
(0300) 					
(0301) //				if (j = trigAdr){
(0302) //					TRIGGER_Data_ADDR |= TRIGGER_MASK;
(0303) //					for(i=0 ; i<10000 ; i++);
(0304) //					TRIGGER_Data_ADDR &= ~TRIGGER_MASK;	
(0305) //				}
(0306)      			
(0307) 			
(0308) 				    DAC8A_WriteStall(SPIRAM_ReadByte(j));
    0ECC: 62 D0 00 MOV   REG[0xD0],0x0
    0ECF: 51 6A    MOV   A,[j]
    0ED1: 08       PUSH  A
    0ED2: 51 6B    MOV   A,[j+1]
    0ED4: 08       PUSH  A
    0ED5: 7C 18 E0 LCALL _SPIRAM_ReadByte
    0ED8: 38 FE    ADD   SP,0xFE
    0EDA: 62 D0 00 MOV   REG[0xD0],0x0
    0EDD: 10       PUSH  X
    0EDE: 7C 0C D5 LCALL _DAC8A_WriteStall
    0EE1: 20       POP   X
(0309) 					DAC8B_WriteStall(SPIRAM_ReadByte(k));
    0EE2: 62 D0 00 MOV   REG[0xD0],0x0
    0EE5: 51 70    MOV   A,[k]
    0EE7: 08       PUSH  A
    0EE8: 51 71    MOV   A,[k+1]
    0EEA: 08       PUSH  A
    0EEB: 7C 18 E0 LCALL _SPIRAM_ReadByte
    0EEE: 38 FE    ADD   SP,0xFE
    0EF0: 62 D0 00 MOV   REG[0xD0],0x0
    0EF3: 10       PUSH  X
    0EF4: 7C 0C 1E LCALL _DAC8B_WriteStall
(0310) 		
(0311) 			
(0312) 				if (UART_cReadChar()){done = TRUE;}
    0EF7: 7C 07 E0 LCALL _UART_cReadChar
    0EFA: 20       POP   X
    0EFB: 39 00    CMP   A,0x0
    0EFD: A0 07    JZ    0x0F05
    0EFF: 62 D0 00 MOV   REG[0xD0],0x0
    0F02: 55 85 01 MOV   [done],0x1
(0313) 				
(0314) 	            }//end DAC1 while
    0F05: 62 D0 00 MOV   REG[0xD0],0x0
    0F08: 51 73    MOV   A,[blockNum+1]
    0F0A: 08       PUSH  A
    0F0B: 62 D0 00 MOV   REG[0xD0],0x0
    0F0E: 18       POP   A
    0F0F: 53 61    MOV   [__r0],A
    0F11: 55 60 00 MOV   [__r1],0x0
    0F14: 65 61    ASL   [__r0]
    0F16: 65 60    ASL   [__r1]
    0F18: 6B 61    RLC   [__r0]
    0F1A: 65 60    ASL   [__r1]
    0F1C: 6B 61    RLC   [__r0]
    0F1E: 65 60    ASL   [__r1]
    0F20: 6B 61    RLC   [__r0]
    0F22: 65 60    ASL   [__r1]
    0F24: 6B 61    RLC   [__r0]
    0F26: 62 D0 00 MOV   REG[0xD0],0x0
    0F29: 51 6B    MOV   A,[j+1]
    0F2B: 62 D0 00 MOV   REG[0xD0],0x0
    0F2E: 12 60    SUB   A,[__r1]
    0F30: 51 61    MOV   A,[__r0]
    0F32: 31 80    XOR   A,0x80
    0F34: 53 5E    MOV   [__rX],A
    0F36: 62 D0 00 MOV   REG[0xD0],0x0
    0F39: 51 6A    MOV   A,[j]
    0F3B: 31 80    XOR   A,0x80
    0F3D: 62 D0 00 MOV   REG[0xD0],0x0
    0F40: 1A 5E    SBB   A,[__rX]
    0F42: D0 40    JNC   0x0F83
    0F44: 62 D0 00 MOV   REG[0xD0],0x0
    0F47: 51 77    MOV   A,[blockNum2+1]
    0F49: 08       PUSH  A
    0F4A: 62 D0 00 MOV   REG[0xD0],0x0
    0F4D: 18       POP   A
    0F4E: 53 61    MOV   [__r0],A
    0F50: 55 60 00 MOV   [__r1],0x0
    0F53: 65 61    ASL   [__r0]
    0F55: 65 60    ASL   [__r1]
    0F57: 6B 61    RLC   [__r0]
    0F59: 65 60    ASL   [__r1]
    0F5B: 6B 61    RLC   [__r0]
    0F5D: 65 60    ASL   [__r1]
    0F5F: 6B 61    RLC   [__r0]
    0F61: 65 60    ASL   [__r1]
    0F63: 6B 61    RLC   [__r0]
    0F65: 62 D0 00 MOV   REG[0xD0],0x0
    0F68: 51 71    MOV   A,[k+1]
    0F6A: 62 D0 00 MOV   REG[0xD0],0x0
    0F6D: 12 60    SUB   A,[__r1]
    0F6F: 51 61    MOV   A,[__r0]
    0F71: 31 80    XOR   A,0x80
    0F73: 53 5E    MOV   [__rX],A
    0F75: 62 D0 00 MOV   REG[0xD0],0x0
    0F78: 51 70    MOV   A,[k]
    0F7A: 31 80    XOR   A,0x80
    0F7C: 62 D0 00 MOV   REG[0xD0],0x0
    0F7F: 1A 5E    SBB   A,[__rX]
    0F81: CF 2B    JC    0x0EAD
(0315) 				
(0316) 				if (UART_cReadChar()){done = TRUE;}
    0F83: 10       PUSH  X
    0F84: 7C 07 E0 LCALL _UART_cReadChar
    0F87: 20       POP   X
    0F88: 39 00    CMP   A,0x0
    0F8A: A0 07    JZ    0x0F92
    0F8C: 62 D0 00 MOV   REG[0xD0],0x0
    0F8F: 55 85 01 MOV   [done],0x1
(0317) 				
(0318) 			}//end DAC while
    0F92: 62 D0 00 MOV   REG[0xD0],0x0
    0F95: 3C 85 00 CMP   [done],0x0
    0F98: AE B6    JZ    0x0E4F
(0319) 		
(0320) 		}//end error-if	
(0321) 		
(0322) 		}else {
    0F9A: 81 51    JMP   0x10EC
(0323) 		
(0324) 			error = FALSE;
    0F9C: 62 D0 00 MOV   REG[0xD0],0x0
    0F9F: 55 83 00 MOV   [error],0x0
(0325) 			
(0326) 			if(!error){
    0FA2: 3C 83 00 CMP   [error],0x0
    0FA5: B0 0F    JNZ   0x0FB5
(0327) 			instruction6();	//input
    0FA7: 96 0B    CALL  _instruction6
(0328) 		    readFunction();
    0FA9: 91 59    CALL  _readFunction
(0329) 		    stringParser(3);
    0FAB: 50 00    MOV   A,0x0
    0FAD: 08       PUSH  A
    0FAE: 50 03    MOV   A,0x3
    0FB0: 08       PUSH  A
    0FB1: 92 4B    CALL  _stringParser
    0FB3: 38 FE    ADD   SP,0xFE
(0330) 			}
(0331) 			if(!error){
    0FB5: 62 D0 00 MOV   REG[0xD0],0x0
    0FB8: 3C 83 00 CMP   [error],0x0
    0FBB: B0 0F    JNZ   0x0FCB
(0332) 			instruction2();	//block num 
    0FBD: 95 73    CALL  _instruction2
(0333) 		    readFunction();
    0FBF: 91 43    CALL  _readFunction
(0334) 		    stringParser(2);
    0FC1: 50 00    MOV   A,0x0
    0FC3: 08       PUSH  A
    0FC4: 50 02    MOV   A,0x2
    0FC6: 08       PUSH  A
    0FC7: 92 35    CALL  _stringParser
    0FC9: 38 FE    ADD   SP,0xFE
(0335) 			}
(0336) 			
(0337) 			if(!error){
    0FCB: 62 D0 00 MOV   REG[0xD0],0x0
    0FCE: 3C 83 00 CMP   [error],0x0
    0FD1: B0 0F    JNZ   0x0FE1
(0338) 			instruction4();	//sample rate 
    0FD3: 95 91    CALL  _instruction4
(0339) 		    readFunction();
    0FD5: 91 2D    CALL  _readFunction
(0340) 		    stringParser(4);
    0FD7: 50 00    MOV   A,0x0
    0FD9: 08       PUSH  A
    0FDA: 50 04    MOV   A,0x4
    0FDC: 08       PUSH  A
    0FDD: 92 1F    CALL  _stringParser
    0FDF: 38 FE    ADD   SP,0xFE
(0341) 			}
(0342) 			
(0343) 			if(!error){
    0FE1: 62 D0 00 MOV   REG[0xD0],0x0
    0FE4: 3C 83 00 CMP   [error],0x0
    0FE7: B0 29    JNZ   0x1011
(0344) 			DelSigClock_WritePeriod(sampleRate);
    0FE9: 62 D0 00 MOV   REG[0xD0],0x0
    0FEC: 51 7B    MOV   A,[sampleRate+1]
    0FEE: 62 D0 00 MOV   REG[0xD0],0x0
    0FF1: 10       PUSH  X
    0FF2: 7C 0A E7 LCALL _DelSigClock_WritePeriod
    0FF5: 20       POP   X
(0345) 			DelSigClock_WriteCompareValue(sampleRate>>1);
    0FF6: 62 D0 00 MOV   REG[0xD0],0x0
    0FF9: 51 7B    MOV   A,[sampleRate+1]
    0FFB: 08       PUSH  A
    0FFC: 51 7A    MOV   A,[sampleRate]
    0FFE: 62 D0 00 MOV   REG[0xD0],0x0
    1001: 53 61    MOV   [__r0],A
    1003: 18       POP   A
    1004: 53 60    MOV   [__r1],A
    1006: 68 61    ASR   [__r0]
    1008: 6E 60    RRC   [__r1]
    100A: 51 60    MOV   A,[__r1]
    100C: 10       PUSH  X
    100D: 7C 0A EA LCALL _DelSigClock_WriteCompareValue
    1010: 20       POP   X
(0346) 			}
(0347) 			
(0348) 			if(!error){
    1011: 62 D0 00 MOV   REG[0xD0],0x0
    1014: 3C 83 00 CMP   [error],0x0
    1017: B0 0F    JNZ   0x1027
(0349) 			instruction5();	
    1019: 95 7F    CALL  _instruction5
(0350) 		    readFunction();
    101B: 90 E7    CALL  _readFunction
(0351) 		    stringParser(4);
    101D: 50 00    MOV   A,0x0
    101F: 08       PUSH  A
    1020: 50 04    MOV   A,0x4
    1022: 08       PUSH  A
    1023: 91 D9    CALL  _stringParser
    1025: 38 FE    ADD   SP,0xFE
(0352) 			}
(0353) 			
(0354) 			if (!error){
    1027: 62 D0 00 MOV   REG[0xD0],0x0
    102A: 3C 83 00 CMP   [error],0x0
    102D: B0 BE    JNZ   0x10EC
(0355) 			UART_CPutString("Saving waveform");	
    102F: 10       PUSH  X
    1030: 50 04    MOV   A,0x4
    1032: 08       PUSH  A
    1033: 50 01    MOV   A,0x1
    1035: 5C       MOV   X,A
    1036: 18       POP   A
    1037: 7C 08 73 LCALL _UART_CPutString
(0356) 			 UART_PutCRLF();
    103A: 7C 08 85 LCALL _UART_PutCRLF
(0357) 			 UART_PutCRLF();
    103D: 7C 08 85 LCALL _UART_PutCRLF
(0358) 				
(0359) 			DelSig_StartAD();
    1040: 7C 0B 42 LCALL _DelSig_StartAD
    1043: 20       POP   X
(0360) 			for (j=(8192*(blockNum-1)); j<(blockNum*8192); j++){
    1044: 62 D0 00 MOV   REG[0xD0],0x0
    1047: 51 73    MOV   A,[blockNum+1]
    1049: 11 01    SUB   A,0x1
    104B: 62 D0 00 MOV   REG[0xD0],0x0
    104E: 53 61    MOV   [__r0],A
    1050: 55 60 00 MOV   [__r1],0x0
    1053: 65 61    ASL   [__r0]
    1055: 65 60    ASL   [__r1]
    1057: 6B 61    RLC   [__r0]
    1059: 65 60    ASL   [__r1]
    105B: 6B 61    RLC   [__r0]
    105D: 65 60    ASL   [__r1]
    105F: 6B 61    RLC   [__r0]
    1061: 65 60    ASL   [__r1]
    1063: 6B 61    RLC   [__r0]
    1065: 51 60    MOV   A,[__r1]
    1067: 08       PUSH  A
    1068: 51 61    MOV   A,[__r0]
    106A: 62 D0 00 MOV   REG[0xD0],0x0
    106D: 53 6A    MOV   [j],A
    106F: 18       POP   A
    1070: 53 6B    MOV   [j+1],A
    1072: 80 35    JMP   0x10A8
(0361) 			
(0362) 			while (!DelSig_fIsDataAvailable()){}
    1074: 10       PUSH  X
    1075: 7C 0B 50 LCALL _DelSig_fIsDataAvailable
    1078: 20       POP   X
    1079: 62 D0 00 MOV   REG[0xD0],0x0
    107C: 39 00    CMP   A,0x0
    107E: AF F5    JZ    0x1074
(0363) 			
(0364) 			Svalue = DelSig_bGetData();
    1080: 10       PUSH  X
    1081: 7C 0B 65 LCALL _DelSig_cGetData|_DelSig_bGetData|DelSig_bGetData
    1084: 20       POP   X
    1085: 62 D0 00 MOV   REG[0xD0],0x0
    1088: 53 81    MOV   [Svalue],A
(0365) 			SPIRAM_WriteByte(j,Svalue);
    108A: 51 81    MOV   A,[Svalue]
    108C: 08       PUSH  A
    108D: 62 D0 00 MOV   REG[0xD0],0x0
    1090: 51 6A    MOV   A,[j]
    1092: 08       PUSH  A
    1093: 51 6B    MOV   A,[j+1]
    1095: 08       PUSH  A
    1096: 7C 18 3D LCALL _SPIRAM_WriteByte
    1099: 38 FD    ADD   SP,0xFD
(0366) 			DelSig_ClearFlag();	
    109B: 10       PUSH  X
    109C: 7C 0B 6B LCALL _DelSig_ClearFlag
    109F: 20       POP   X
(0367) 			
(0368) 			}//end save for
    10A0: 62 D0 00 MOV   REG[0xD0],0x0
    10A3: 76 6B    INC   [j+1]
    10A5: 0E 6A 00 ADC   [j],0x0
    10A8: 62 D0 00 MOV   REG[0xD0],0x0
    10AB: 51 73    MOV   A,[blockNum+1]
    10AD: 08       PUSH  A
    10AE: 62 D0 00 MOV   REG[0xD0],0x0
    10B1: 18       POP   A
    10B2: 53 61    MOV   [__r0],A
    10B4: 55 60 00 MOV   [__r1],0x0
    10B7: 65 61    ASL   [__r0]
    10B9: 65 60    ASL   [__r1]
    10BB: 6B 61    RLC   [__r0]
    10BD: 65 60    ASL   [__r1]
    10BF: 6B 61    RLC   [__r0]
    10C1: 65 60    ASL   [__r1]
    10C3: 6B 61    RLC   [__r0]
    10C5: 65 60    ASL   [__r1]
    10C7: 6B 61    RLC   [__r0]
    10C9: 62 D0 00 MOV   REG[0xD0],0x0
    10CC: 51 6B    MOV   A,[j+1]
    10CE: 62 D0 00 MOV   REG[0xD0],0x0
    10D1: 12 60    SUB   A,[__r1]
    10D3: 51 61    MOV   A,[__r0]
    10D5: 31 80    XOR   A,0x80
    10D7: 53 5E    MOV   [__rX],A
    10D9: 62 D0 00 MOV   REG[0xD0],0x0
    10DC: 51 6A    MOV   A,[j]
    10DE: 31 80    XOR   A,0x80
    10E0: 62 D0 00 MOV   REG[0xD0],0x0
    10E3: 1A 5E    SBB   A,[__rX]
    10E5: CF 8E    JC    0x1074
(0369) 			DelSig_StopAD();
    10E7: 10       PUSH  X
    10E8: 7C 0B 49 LCALL _DelSig_StopAD
    10EB: 20       POP   X
(0370) 			}//end final if not error
(0371) 		}//endSaveElse	
(0372) 			
(0373) 		///////////////////////////////	
(0374) 		}//end ifValidMode
(0375) 	}//end_While1	
    10EC: 8C E7    JMP   0x0DD4
    10EE: 38 FE    ADD   SP,0xFE
    10F0: 20       POP   X
    10F1: 8F FF    JMP   0x10F1
(0376) 
(0377) } //endmain
(0378) 
(0379) /*****************************************************************************/
(0380) /********************* Interrupt Service Routines Below **********************/
(0381) /*****************************************************************************/
(0382) #pragma interrupt_handler DACUpdate_ISR
(0383) 
(0384) // DACUpdate_ISR is called at the terminal count of the DACUpdate user module.
(0385) // Since it's clock source is the same as DelSig, setting its period to
(0386) // match the DelSig PWM (4*DecimationRate) will cause it to interrupt at the
(0387) // same rate as the DelSig's sampling rate. If the samples are only sent to
(0388) // the DACs when the variable DACUpdateDone is one, the output sampling rate
(0389) // can be controlled.
(0390) void DACUpdate_ISR(void)
(0391) {
_DACUpdate_ISR:
    10F3: 71 C0    OR    F,0xC0
    10F5: 08       PUSH  A
    10F6: 5D D0    MOV   A,REG[0xD0]
    10F8: 08       PUSH  A
(0392) 	
(0393) 	// Updating the DACs inside the ISR takes more clock cycles
(0394) 	// than simply setting a flag and exiting. This is because
(0395) 	// the C-compiler does a full preserve and restore of the
(0396) 	// CPU context which takes 190+185 CPU cycles.
(0397) 	
(0398) 	DACUpdateDone = 1;
    10F9: 62 D0 00 MOV   REG[0xD0],0x0
    10FC: 55 86 01 MOV   [DACUpdateDone],0x1
    10FF: 18       POP   A
    1100: 60 D0    MOV   REG[0xD0],A
    1102: 18       POP   A
    1103: 7E       RETI  
(0399) }
(0400) 
(0401) 
(0402) void readFunction (void)
(0403) {
_readFunction:
  placeCounter         --> X+0
    1104: 10       PUSH  X
    1105: 4F       MOV   X,SP
    1106: 38 02    ADD   SP,0x2
(0404)         int placeCounter = 0;
    1108: 56 01 00 MOV   [X+1],0x0
    110B: 56 00 00 MOV   [X+0],0x0
(0405)         finishFlag= FALSE;
    110E: 62 D0 00 MOV   REG[0xD0],0x0
    1111: 55 7E 00 MOV   [finishFlag],0x0
(0406) 		
(0407) 		UART_CPutString(">");
    1114: 10       PUSH  X
    1115: 50 03    MOV   A,0x3
    1117: 08       PUSH  A
    1118: 50 FF    MOV   A,0xFF
    111A: 5C       MOV   X,A
    111B: 18       POP   A
    111C: 7C 08 73 LCALL _UART_CPutString
    111F: 20       POP   X
    1120: 80 CE    JMP   0x11EF
(0408) 	
(0409)         while (!finishFlag) {
(0410) 
(0411)                 		charIn = UART_cReadChar();
    1122: 10       PUSH  X
    1123: 7C 07 E0 LCALL _UART_cReadChar
    1126: 20       POP   X
    1127: 62 D0 00 MOV   REG[0xD0],0x0
    112A: 53 87    MOV   [charIn],A
    112C: 80 0B    JMP   0x1138
(0412)                         while (charIn == 0x00){charIn = UART_cReadChar();}
    112E: 10       PUSH  X
    112F: 7C 07 E0 LCALL _UART_cReadChar
    1132: 20       POP   X
    1133: 62 D0 00 MOV   REG[0xD0],0x0
    1136: 53 87    MOV   [charIn],A
    1138: 62 D0 00 MOV   REG[0xD0],0x0
    113B: 3C 87 00 CMP   [charIn],0x0
    113E: AF EF    JZ    0x112E
(0413)                                 if (placeCounter<7){
    1140: 52 01    MOV   A,[X+1]
    1142: 11 07    SUB   A,0x7
    1144: 52 00    MOV   A,[X+0]
    1146: 31 80    XOR   A,0x80
    1148: 19 80    SBB   A,0x80
    114A: D0 8D    JNC   0x11D8
(0414) 
(0415)                             if (charIn == 0x0d){ //if carriage return
    114C: 62 D0 00 MOV   REG[0xD0],0x0
    114F: 3C 87 0D CMP   [charIn],0xD
    1152: B0 1F    JNZ   0x1172
(0416)                                                 UART_CPutString("\r\n");
    1154: 10       PUSH  X
    1155: 50 03    MOV   A,0x3
    1157: 08       PUSH  A
    1158: 50 FC    MOV   A,0xFC
    115A: 5C       MOV   X,A
    115B: 18       POP   A
    115C: 7C 08 73 LCALL _UART_CPutString
(0417)                                                 UART_CPutString("\r\n");
    115F: 50 03    MOV   A,0x3
    1161: 08       PUSH  A
    1162: 50 FC    MOV   A,0xFC
    1164: 5C       MOV   X,A
    1165: 18       POP   A
    1166: 7C 08 73 LCALL _UART_CPutString
    1169: 20       POP   X
(0418)                                             finishFlag = TRUE;
    116A: 62 D0 00 MOV   REG[0xD0],0x0
    116D: 55 7E 01 MOV   [finishFlag],0x1
(0419)                                     } //end if CR
    1170: 80 7E    JMP   0x11EF
(0420) 									//backspace
(0421)                                 else if ((charIn == 0x08 || charIn ==0x7f) && placeCounter > 0 ){ //if backspace
    1172: 62 D0 00 MOV   REG[0xD0],0x0
    1175: 3C 87 08 CMP   [charIn],0x8
    1178: A0 06    JZ    0x117F
    117A: 3C 87 7F CMP   [charIn],0x7F
    117D: B0 27    JNZ   0x11A5
    117F: 50 00    MOV   A,0x0
    1181: 13 01    SUB   A,[X+1]
    1183: 52 00    MOV   A,[X+0]
    1185: 31 80    XOR   A,0x80
    1187: 62 D0 00 MOV   REG[0xD0],0x0
    118A: 53 5E    MOV   [__rX],A
    118C: 50 80    MOV   A,0x80
    118E: 1A 5E    SBB   A,[__rX]
    1190: D0 14    JNC   0x11A5
(0422)                                         placeCounter--;
    1192: 7B 01    DEC   [X+1]
    1194: 1F 00 00 SBB   [X+0],0x0
(0423)                                         UART_CPutString("\x8\x20\x8");
    1197: 10       PUSH  X
    1198: 50 03    MOV   A,0x3
    119A: 08       PUSH  A
    119B: 50 F8    MOV   A,0xF8
    119D: 5C       MOV   X,A
    119E: 18       POP   A
    119F: 7C 08 73 LCALL _UART_CPutString
    11A2: 20       POP   X
(0424)                                 } //end if backspace
    11A3: 80 4B    JMP   0x11EF
(0425)                                 else {
(0426)                                                 rawString[placeCounter] = charIn;
    11A5: 62 D0 00 MOV   REG[0xD0],0x0
    11A8: 52 01    MOV   A,[X+1]
    11AA: 01 0C    ADD   A,0xC
    11AC: 53 60    MOV   [__r1],A
    11AE: 52 00    MOV   A,[X+0]
    11B0: 09 00    ADC   A,0x0
    11B2: 60 D5    MOV   REG[0xD5],A
    11B4: 62 D0 00 MOV   REG[0xD0],0x0
    11B7: 51 87    MOV   A,[charIn]
    11B9: 62 D0 00 MOV   REG[0xD0],0x0
    11BC: 3F 60    MVI   [__r1],A
(0427)                                                 UART_PutChar(rawString[placeCounter]);
    11BE: 52 01    MOV   A,[X+1]
    11C0: 01 0C    ADD   A,0xC
    11C2: 53 60    MOV   [__r1],A
    11C4: 52 00    MOV   A,[X+0]
    11C6: 09 00    ADC   A,0x0
    11C8: 60 D4    MOV   REG[0xD4],A
    11CA: 3E 60    MVI   A,[__r1]
    11CC: 10       PUSH  X
    11CD: 7C 07 D0 LCALL _UART_PutChar
    11D0: 20       POP   X
(0428)                                                 placeCounter++;
    11D1: 77 01    INC   [X+1]
    11D3: 0F 00 00 ADC   [X+0],0x0
(0429)                                         }// end else write into string
(0430) 
(0431)                                 } // end placeCounter if
    11D6: 80 18    JMP   0x11EF
(0432)                         else
(0433)                                 {
(0434) 
(0435)                                        	 UART_CPutString("Too many characters.");
    11D8: 10       PUSH  X
    11D9: 50 03    MOV   A,0x3
    11DB: 08       PUSH  A
    11DC: 50 E3    MOV   A,0xE3
    11DE: 5C       MOV   X,A
    11DF: 18       POP   A
    11E0: 7C 08 73 LCALL _UART_CPutString
(0436) 									   	 UART_PutChar(0x07);
    11E3: 50 07    MOV   A,0x7
    11E5: 7C 07 D0 LCALL _UART_PutChar
    11E8: 20       POP   X
(0437)                                          finishFlag = TRUE;
    11E9: 62 D0 00 MOV   REG[0xD0],0x0
    11EC: 55 7E 01 MOV   [finishFlag],0x1
(0438) 									   //addbell
(0439)                                 }
(0440) 
(0441)         }//end while (~finsihFlag)
    11EF: 62 D0 00 MOV   REG[0xD0],0x0
    11F2: 3C 7E 00 CMP   [finishFlag],0x0
    11F5: AF 2C    JZ    0x1122
(0442) 
(0443)         finishFlag= FALSE ;
    11F7: 55 7E 00 MOV   [finishFlag],0x0
    11FA: 38 FE    ADD   SP,0xFE
    11FC: 20       POP   X
    11FD: 7F       RET   
(0444) 
(0445) }//end readFunction
(0446) void stringParser(int parseNum){
_stringParser:
  parseNum             --> X-5
    11FE: 10       PUSH  X
    11FF: 4F       MOV   X,SP
    1200: 38 0A    ADD   SP,0xA
(0447) 
(0448) 	switch (parseNum) {
    1202: 3D FB 00 CMP   [X-5],0x0
    1205: B0 06    JNZ   0x120C
    1207: 3D FC 01 CMP   [X-4],0x1
    120A: A0 2B    JZ    0x1236
    120C: 3D FB 00 CMP   [X-5],0x0
    120F: B0 06    JNZ   0x1216
    1211: 3D FC 02 CMP   [X-4],0x2
    1214: A0 72    JZ    0x1287
    1216: 3D FB 00 CMP   [X-5],0x0
    1219: B0 06    JNZ   0x1220
    121B: 3D FC 03 CMP   [X-4],0x3
    121E: A0 E9    JZ    0x1308
    1220: 3D FB 00 CMP   [X-5],0x0
    1223: B0 06    JNZ   0x122A
    1225: 3D FC 04 CMP   [X-4],0x4
    1228: A1 3E    JZ    0x1367
    122A: 3D FB 00 CMP   [X-5],0x0
    122D: B0 06    JNZ   0x1234
    122F: 3D FC 05 CMP   [X-4],0x5
    1232: A2 5D    JZ    0x1490
    1234: 82 DC    JMP   0x1511
(0449) 			
(0450) 	case 1:  
(0451) 				switch (rawString[0]){
    1236: 62 D0 00 MOV   REG[0xD0],0x0
    1239: 51 0C    MOV   A,[rawString]
    123B: 54 01    MOV   [X+1],A
    123D: 56 00 00 MOV   [X+0],0x0
    1240: 3D 00 00 CMP   [X+0],0x0
    1243: B0 06    JNZ   0x124A
    1245: 3D 01 63 CMP   [X+1],0x63
    1248: A0 15    JZ    0x125E
    124A: 3D 00 00 CMP   [X+0],0x0
    124D: B0 06    JNZ   0x1254
    124F: 3D 01 64 CMP   [X+1],0x64
    1252: A0 03    JZ    0x1256
    1254: 80 11    JMP   0x1266
(0452) 						case 'd':  displayOrcapture = TRUE; 
    1256: 62 D0 00 MOV   REG[0xD0],0x0
    1259: 55 7F 01 MOV   [displayOrcapture],0x1
(0453) 						break;
    125C: 82 B7    JMP   0x1514
(0454) 						case 'c':  displayOrcapture = FALSE;
    125E: 62 D0 00 MOV   REG[0xD0],0x0
    1261: 55 7F 00 MOV   [displayOrcapture],0x0
(0455) 						break;				
    1264: 82 AF    JMP   0x1514
(0456) 						default: 
(0457) 							UART_CPutString("Invalid Mode");
    1266: 10       PUSH  X
    1267: 50 03    MOV   A,0x3
    1269: 08       PUSH  A
    126A: 50 D6    MOV   A,0xD6
    126C: 5C       MOV   X,A
    126D: 18       POP   A
    126E: 7C 08 73 LCALL _UART_CPutString
(0458) 							UART_PutChar(0x07);
    1271: 50 07    MOV   A,0x7
    1273: 7C 07 D0 LCALL _UART_PutChar
    1276: 20       POP   X
(0459) 							validMode = FALSE;
    1277: 62 D0 00 MOV   REG[0xD0],0x0
    127A: 55 80 00 MOV   [validMode],0x0
(0460) 							UART_PutCRLF();
    127D: 10       PUSH  X
    127E: 7C 08 85 LCALL _UART_PutCRLF
(0461) 							UART_PutCRLF();
    1281: 7C 08 85 LCALL _UART_PutCRLF
    1284: 20       POP   X
(0462) 						break;
(0463) 					}
(0464) 	break;
    1285: 82 8E    JMP   0x1514
(0465) 				
(0466) 	case 2: 
(0467) 		switch (rawString[0]){
    1287: 62 D0 00 MOV   REG[0xD0],0x0
    128A: 51 0C    MOV   A,[rawString]
    128C: 54 03    MOV   [X+3],A
    128E: 56 02 00 MOV   [X+2],0x0
    1291: 3D 02 00 CMP   [X+2],0x0
    1294: B0 06    JNZ   0x129B
    1296: 3D 03 31 CMP   [X+3],0x31
    1299: A0 21    JZ    0x12BB
    129B: 3D 02 00 CMP   [X+2],0x0
    129E: B0 06    JNZ   0x12A5
    12A0: 3D 03 32 CMP   [X+3],0x32
    12A3: A0 22    JZ    0x12C6
    12A5: 3D 02 00 CMP   [X+2],0x0
    12A8: B0 06    JNZ   0x12AF
    12AA: 3D 03 33 CMP   [X+3],0x33
    12AD: A0 23    JZ    0x12D1
    12AF: 3D 02 00 CMP   [X+2],0x0
    12B2: B0 06    JNZ   0x12B9
    12B4: 3D 03 34 CMP   [X+3],0x34
    12B7: A0 24    JZ    0x12DC
    12B9: 80 2D    JMP   0x12E7
(0468) 					case '1': blockNum = 1;
    12BB: 62 D0 00 MOV   REG[0xD0],0x0
    12BE: 55 73 01 MOV   [blockNum+1],0x1
    12C1: 55 72 00 MOV   [blockNum],0x0
(0469) 					break;
    12C4: 82 4F    JMP   0x1514
(0470) 					case '2': blockNum = 2;
    12C6: 62 D0 00 MOV   REG[0xD0],0x0
    12C9: 55 73 02 MOV   [blockNum+1],0x2
    12CC: 55 72 00 MOV   [blockNum],0x0
(0471) 					break;
    12CF: 82 44    JMP   0x1514
(0472) 					case '3': blockNum = 3;
    12D1: 62 D0 00 MOV   REG[0xD0],0x0
    12D4: 55 73 03 MOV   [blockNum+1],0x3
    12D7: 55 72 00 MOV   [blockNum],0x0
(0473) 					break;
    12DA: 82 39    JMP   0x1514
(0474) 					case '4': blockNum = 4;
    12DC: 62 D0 00 MOV   REG[0xD0],0x0
    12DF: 55 73 04 MOV   [blockNum+1],0x4
    12E2: 55 72 00 MOV   [blockNum],0x0
(0475) 					break;
    12E5: 82 2E    JMP   0x1514
(0476) 					default: 
(0477) 						UART_CPutString("Invalid block #");
    12E7: 10       PUSH  X
    12E8: 50 03    MOV   A,0x3
    12EA: 08       PUSH  A
    12EB: 50 C6    MOV   A,0xC6
    12ED: 5C       MOV   X,A
    12EE: 18       POP   A
    12EF: 7C 08 73 LCALL _UART_CPutString
(0478) 						UART_PutChar(0x07);
    12F2: 50 07    MOV   A,0x7
    12F4: 7C 07 D0 LCALL _UART_PutChar
    12F7: 20       POP   X
(0479) 						error = TRUE;
    12F8: 62 D0 00 MOV   REG[0xD0],0x0
    12FB: 55 83 01 MOV   [error],0x1
(0480) 				        UART_PutCRLF();
    12FE: 10       PUSH  X
    12FF: 7C 08 85 LCALL _UART_PutCRLF
(0481) 						UART_PutCRLF();
    1302: 7C 08 85 LCALL _UART_PutCRLF
    1305: 20       POP   X
(0482) 						//M8C_Reset;
(0483) 					break;
(0484) 				}					
(0485) 	break;
    1306: 82 0D    JMP   0x1514
(0486) 			
(0487) 	case 3:  
(0488) 				switch (rawString[0]){
    1308: 62 D0 00 MOV   REG[0xD0],0x0
    130B: 51 0C    MOV   A,[rawString]
    130D: 54 05    MOV   [X+5],A
    130F: 56 04 00 MOV   [X+4],0x0
    1312: 3D 04 00 CMP   [X+4],0x0
    1315: B0 06    JNZ   0x131C
    1317: 3D 05 61 CMP   [X+5],0x61
    131A: A0 0D    JZ    0x1328
    131C: 3D 04 00 CMP   [X+4],0x0
    131F: B0 06    JNZ   0x1326
    1321: 3D 05 62 CMP   [X+5],0x62
    1324: A0 12    JZ    0x1337
    1326: 80 1F    JMP   0x1346
(0489) 					case 'a':  
(0490) 						       AMUX4_InputSelect(AMUX4_PORT0_1);
    1328: 10       PUSH  X
    1329: 50 00    MOV   A,0x0
    132B: 7C 0D 2D LCALL _AMUX4_InputSelect
    132E: 20       POP   X
(0491) 								inA = TRUE;
    132F: 62 D0 00 MOV   REG[0xD0],0x0
    1332: 55 84 01 MOV   [inA],0x1
(0492) 					break;
    1335: 81 DE    JMP   0x1514
(0493) 					case 'b':  AMUX4_InputSelect(AMUX4_PORT0_7);
    1337: 10       PUSH  X
    1338: 50 03    MOV   A,0x3
    133A: 7C 0D 2D LCALL _AMUX4_InputSelect
    133D: 20       POP   X
(0494) 								inA = FALSE;
    133E: 62 D0 00 MOV   REG[0xD0],0x0
    1341: 55 84 00 MOV   [inA],0x0
(0495) 					break;
    1344: 81 CF    JMP   0x1514
(0496) 					default: 
(0497) 						UART_CPutString("Invalid input");
    1346: 10       PUSH  X
    1347: 50 03    MOV   A,0x3
    1349: 08       PUSH  A
    134A: 50 B8    MOV   A,0xB8
    134C: 5C       MOV   X,A
    134D: 18       POP   A
    134E: 7C 08 73 LCALL _UART_CPutString
(0498) 						UART_PutChar(0x07);
    1351: 50 07    MOV   A,0x7
    1353: 7C 07 D0 LCALL _UART_PutChar
    1356: 20       POP   X
(0499) 						error = TRUE;
    1357: 62 D0 00 MOV   REG[0xD0],0x0
    135A: 55 83 01 MOV   [error],0x1
(0500) 						UART_PutCRLF();	
    135D: 10       PUSH  X
    135E: 7C 08 85 LCALL _UART_PutCRLF
(0501) 						UART_PutCRLF();
    1361: 7C 08 85 LCALL _UART_PutCRLF
    1364: 20       POP   X
(0502) 						//M8C_Reset;
(0503) 					break;
(0504) 				}									
(0505) 	break;
    1365: 81 AE    JMP   0x1514
(0506) 		
(0507) 	case 4:  
(0508) 		
(0509) 			switch (rawString[0]){
    1367: 62 D0 00 MOV   REG[0xD0],0x0
    136A: 51 0C    MOV   A,[rawString]
    136C: 54 07    MOV   [X+7],A
    136E: 56 06 00 MOV   [X+6],0x0
    1371: 3D 06 00 CMP   [X+6],0x0
    1374: B0 06    JNZ   0x137B
    1376: 3D 07 31 CMP   [X+7],0x31
    1379: A0 53    JZ    0x13CD
    137B: 3D 06 00 CMP   [X+6],0x0
    137E: B0 06    JNZ   0x1385
    1380: 3D 07 32 CMP   [X+7],0x32
    1383: A0 5B    JZ    0x13DF
    1385: 3D 06 00 CMP   [X+6],0x0
    1388: B0 06    JNZ   0x138F
    138A: 3D 07 33 CMP   [X+7],0x33
    138D: A0 63    JZ    0x13F1
    138F: 3D 06 00 CMP   [X+6],0x0
    1392: B0 06    JNZ   0x1399
    1394: 3D 07 34 CMP   [X+7],0x34
    1397: A0 6B    JZ    0x1403
    1399: 3D 06 00 CMP   [X+6],0x0
    139C: B0 06    JNZ   0x13A3
    139E: 3D 07 35 CMP   [X+7],0x35
    13A1: A0 73    JZ    0x1415
    13A3: 3D 06 00 CMP   [X+6],0x0
    13A6: B0 06    JNZ   0x13AD
    13A8: 3D 07 36 CMP   [X+7],0x36
    13AB: A0 7B    JZ    0x1427
    13AD: 3D 06 00 CMP   [X+6],0x0
    13B0: B0 06    JNZ   0x13B7
    13B2: 3D 07 37 CMP   [X+7],0x37
    13B5: A0 83    JZ    0x1439
    13B7: 3D 06 00 CMP   [X+6],0x0
    13BA: B0 06    JNZ   0x13C1
    13BC: 3D 07 38 CMP   [X+7],0x38
    13BF: A0 8B    JZ    0x144B
    13C1: 3D 06 00 CMP   [X+6],0x0
    13C4: B0 06    JNZ   0x13CB
    13C6: 3D 07 39 CMP   [X+7],0x39
    13C9: A0 93    JZ    0x145D
    13CB: 80 A3    JMP   0x146F
(0510) 				    case '1': sampleRate = sampleRateS[0];
    13CD: 62 D0 00 MOV   REG[0xD0],0x0
    13D0: 51 4D    MOV   A,[sampleRateS+1]
    13D2: 08       PUSH  A
    13D3: 51 4C    MOV   A,[sampleRateS]
    13D5: 62 D0 00 MOV   REG[0xD0],0x0
    13D8: 53 7A    MOV   [sampleRate],A
    13DA: 18       POP   A
    13DB: 53 7B    MOV   [sampleRate+1],A
(0511) 					break;
    13DD: 81 36    JMP   0x1514
(0512) 					case '2':sampleRate = sampleRateS[1];
    13DF: 62 D0 00 MOV   REG[0xD0],0x0
    13E2: 51 4F    MOV   A,[sampleRateS+3]
    13E4: 08       PUSH  A
    13E5: 51 4E    MOV   A,[sampleRateS+2]
    13E7: 62 D0 00 MOV   REG[0xD0],0x0
    13EA: 53 7A    MOV   [sampleRate],A
    13EC: 18       POP   A
    13ED: 53 7B    MOV   [sampleRate+1],A
(0513) 					break;
    13EF: 81 24    JMP   0x1514
(0514) 					case '3': sampleRate = sampleRateS[2];
    13F1: 62 D0 00 MOV   REG[0xD0],0x0
    13F4: 51 51    MOV   A,[sampleRateS+5]
    13F6: 08       PUSH  A
    13F7: 51 50    MOV   A,[sampleRateS+4]
    13F9: 62 D0 00 MOV   REG[0xD0],0x0
    13FC: 53 7A    MOV   [sampleRate],A
    13FE: 18       POP   A
    13FF: 53 7B    MOV   [sampleRate+1],A
(0515) 					break;
    1401: 81 12    JMP   0x1514
(0516) 					case '4': sampleRate = sampleRateS[3];
    1403: 62 D0 00 MOV   REG[0xD0],0x0
    1406: 51 53    MOV   A,[sampleRateS+7]
    1408: 08       PUSH  A
    1409: 51 52    MOV   A,[sampleRateS+6]
    140B: 62 D0 00 MOV   REG[0xD0],0x0
    140E: 53 7A    MOV   [sampleRate],A
    1410: 18       POP   A
    1411: 53 7B    MOV   [sampleRate+1],A
(0517) 					break;
    1413: 81 00    JMP   0x1514
(0518) 					case '5': sampleRate = sampleRateS[4];
    1415: 62 D0 00 MOV   REG[0xD0],0x0
    1418: 51 55    MOV   A,[sampleRateS+9]
    141A: 08       PUSH  A
    141B: 51 54    MOV   A,[sampleRateS+8]
    141D: 62 D0 00 MOV   REG[0xD0],0x0
    1420: 53 7A    MOV   [sampleRate],A
    1422: 18       POP   A
    1423: 53 7B    MOV   [sampleRate+1],A
(0519) 					break;
    1425: 80 EE    JMP   0x1514
(0520) 					case '6': sampleRate = sampleRateS[5];
    1427: 62 D0 00 MOV   REG[0xD0],0x0
    142A: 51 57    MOV   A,[sampleRateS+11]
    142C: 08       PUSH  A
    142D: 51 56    MOV   A,[sampleRateS+10]
    142F: 62 D0 00 MOV   REG[0xD0],0x0
    1432: 53 7A    MOV   [sampleRate],A
    1434: 18       POP   A
    1435: 53 7B    MOV   [sampleRate+1],A
(0521) 					break;
    1437: 80 DC    JMP   0x1514
(0522) 					case '7': sampleRate = sampleRateS[6];
    1439: 62 D0 00 MOV   REG[0xD0],0x0
    143C: 51 59    MOV   A,[sampleRateS+13]
    143E: 08       PUSH  A
    143F: 51 58    MOV   A,[sampleRateS+12]
    1441: 62 D0 00 MOV   REG[0xD0],0x0
    1444: 53 7A    MOV   [sampleRate],A
    1446: 18       POP   A
    1447: 53 7B    MOV   [sampleRate+1],A
(0523) 					break;
    1449: 80 CA    JMP   0x1514
(0524) 					case '8': sampleRate = sampleRateS[7];
    144B: 62 D0 00 MOV   REG[0xD0],0x0
    144E: 51 5B    MOV   A,[sampleRateS+15]
    1450: 08       PUSH  A
    1451: 51 5A    MOV   A,[sampleRateS+14]
    1453: 62 D0 00 MOV   REG[0xD0],0x0
    1456: 53 7A    MOV   [sampleRate],A
    1458: 18       POP   A
    1459: 53 7B    MOV   [sampleRate+1],A
(0525) 					break;
    145B: 80 B8    JMP   0x1514
(0526) 					case '9': sampleRate = sampleRateS[8];
    145D: 62 D0 00 MOV   REG[0xD0],0x0
    1460: 51 5D    MOV   A,[sampleRateS+17]
    1462: 08       PUSH  A
    1463: 51 5C    MOV   A,[sampleRateS+16]
    1465: 62 D0 00 MOV   REG[0xD0],0x0
    1468: 53 7A    MOV   [sampleRate],A
    146A: 18       POP   A
    146B: 53 7B    MOV   [sampleRate+1],A
(0527) 					break;
    146D: 80 A6    JMP   0x1514
(0528) 					default: 
(0529) 						UART_CPutString("Invalid sample rate #");
    146F: 10       PUSH  X
    1470: 50 03    MOV   A,0x3
    1472: 08       PUSH  A
    1473: 50 A2    MOV   A,0xA2
    1475: 5C       MOV   X,A
    1476: 18       POP   A
    1477: 7C 08 73 LCALL _UART_CPutString
(0530) 						UART_PutChar(0x07);
    147A: 50 07    MOV   A,0x7
    147C: 7C 07 D0 LCALL _UART_PutChar
    147F: 20       POP   X
(0531) 						error = TRUE;
    1480: 62 D0 00 MOV   REG[0xD0],0x0
    1483: 55 83 01 MOV   [error],0x1
(0532) 						UART_PutCRLF();
    1486: 10       PUSH  X
    1487: 7C 08 85 LCALL _UART_PutCRLF
(0533) 						UART_PutCRLF();
    148A: 7C 08 85 LCALL _UART_PutCRLF
    148D: 20       POP   X
(0534) 						//M8C_Reset;
(0535) 					break;
(0536) 				}				
(0537) 	break;	
    148E: 80 85    JMP   0x1514
(0538) 			
(0539) 	case 5:  		
(0540) 		switch (rawString[0]){
    1490: 62 D0 00 MOV   REG[0xD0],0x0
    1493: 51 0C    MOV   A,[rawString]
    1495: 54 09    MOV   [X+9],A
    1497: 56 08 00 MOV   [X+8],0x0
    149A: 3D 08 00 CMP   [X+8],0x0
    149D: B0 06    JNZ   0x14A4
    149F: 3D 09 31 CMP   [X+9],0x31
    14A2: A0 21    JZ    0x14C4
    14A4: 3D 08 00 CMP   [X+8],0x0
    14A7: B0 06    JNZ   0x14AE
    14A9: 3D 09 32 CMP   [X+9],0x32
    14AC: A0 22    JZ    0x14CF
    14AE: 3D 08 00 CMP   [X+8],0x0
    14B1: B0 06    JNZ   0x14B8
    14B3: 3D 09 33 CMP   [X+9],0x33
    14B6: A0 23    JZ    0x14DA
    14B8: 3D 08 00 CMP   [X+8],0x0
    14BB: B0 06    JNZ   0x14C2
    14BD: 3D 09 34 CMP   [X+9],0x34
    14C0: A0 24    JZ    0x14E5
    14C2: 80 2D    JMP   0x14F0
(0541) 					case '1': blockNum2 = 1;
    14C4: 62 D0 00 MOV   REG[0xD0],0x0
    14C7: 55 77 01 MOV   [blockNum2+1],0x1
    14CA: 55 76 00 MOV   [blockNum2],0x0
(0542) 					break;
    14CD: 80 46    JMP   0x1514
(0543) 					case '2': blockNum2 = 2;
    14CF: 62 D0 00 MOV   REG[0xD0],0x0
    14D2: 55 77 02 MOV   [blockNum2+1],0x2
    14D5: 55 76 00 MOV   [blockNum2],0x0
(0544) 					break;
    14D8: 80 3B    JMP   0x1514
(0545) 					case '3': blockNum2 = 3;
    14DA: 62 D0 00 MOV   REG[0xD0],0x0
    14DD: 55 77 03 MOV   [blockNum2+1],0x3
    14E0: 55 76 00 MOV   [blockNum2],0x0
(0546) 					break;
    14E3: 80 30    JMP   0x1514
(0547) 					case '4': blockNum2 = 4;
    14E5: 62 D0 00 MOV   REG[0xD0],0x0
    14E8: 55 77 04 MOV   [blockNum2+1],0x4
    14EB: 55 76 00 MOV   [blockNum2],0x0
(0548) 					break;
    14EE: 80 25    JMP   0x1514
(0549) 					default: 
(0550) 						UART_CPutString("Invalid block #");
    14F0: 10       PUSH  X
    14F1: 50 03    MOV   A,0x3
    14F3: 08       PUSH  A
    14F4: 50 C6    MOV   A,0xC6
    14F6: 5C       MOV   X,A
    14F7: 18       POP   A
    14F8: 7C 08 73 LCALL _UART_CPutString
(0551) 						UART_PutChar(0x07);
    14FB: 50 07    MOV   A,0x7
    14FD: 7C 07 D0 LCALL _UART_PutChar
    1500: 20       POP   X
(0552) 						error = TRUE;
    1501: 62 D0 00 MOV   REG[0xD0],0x0
    1504: 55 83 01 MOV   [error],0x1
(0553) 				        UART_PutCRLF();
    1507: 10       PUSH  X
    1508: 7C 08 85 LCALL _UART_PutCRLF
(0554) 						UART_PutCRLF();
    150B: 7C 08 85 LCALL _UART_PutCRLF
    150E: 20       POP   X
(0555) 						//M8C_Reset;
(0556) 					break;
(0557) 				}								
(0558) 	break;
    150F: 80 04    JMP   0x1514
(0559) 					
(0560) 	default: 	
(0561) 			M8C_Reset;
    1511: 50 00    MOV   A,0x0
    1513: 00       SWI   
(0562) 			break;
    1514: 38 F6    ADD   SP,0xF6
    1516: 20       POP   X
    1517: 7F       RET   
(0563) 	}
(0564) 
(0565) } 
(0566) void instruction1(void)
(0567) {
(0568) 		UART_CPutString("Would you like to (d)isplay waveform or (c)apture waveform?  ");
_instruction1:
    1518: 10       PUSH  X
    1519: 50 03    MOV   A,0x3
    151B: 08       PUSH  A
    151C: 50 64    MOV   A,0x64
    151E: 5C       MOV   X,A
    151F: 18       POP   A
    1520: 7C 08 73 LCALL _UART_CPutString
(0569) 		UART_PutCRLF();
    1523: 7C 08 85 LCALL _UART_PutCRLF
(0570) 		UART_CPutString(">");
    1526: 50 03    MOV   A,0x3
    1528: 08       PUSH  A
    1529: 50 FF    MOV   A,0xFF
    152B: 5C       MOV   X,A
    152C: 18       POP   A
    152D: 7C 08 73 LCALL _UART_CPutString
    1530: 20       POP   X
    1531: 7F       RET   
(0571) 	
(0572) }
(0573) 
(0574) void instruction2(void)
(0575) {
(0576) 		UART_CPutString("Which block to save to? (Choose 1, 2, 3, or 4) ");
_instruction2:
    1532: 10       PUSH  X
    1533: 50 03    MOV   A,0x3
    1535: 08       PUSH  A
    1536: 50 34    MOV   A,0x34
    1538: 5C       MOV   X,A
    1539: 18       POP   A
    153A: 7C 08 73 LCALL _UART_CPutString
(0577) 		UART_PutCRLF();
    153D: 7C 08 85 LCALL _UART_PutCRLF
(0578) 		UART_CPutString(">");
    1540: 50 03    MOV   A,0x3
    1542: 08       PUSH  A
    1543: 50 FF    MOV   A,0xFF
    1545: 5C       MOV   X,A
    1546: 18       POP   A
    1547: 7C 08 73 LCALL _UART_CPutString
    154A: 20       POP   X
    154B: 7F       RET   
(0579) 	
(0580) }
(0581) 
(0582) void instruction3(void)
(0583) {
(0584) 		UART_CPutString("Which block to read from DAC A? (Choose 1, 2, 3, or 4) ");
_instruction3:
    154C: 10       PUSH  X
    154D: 50 02    MOV   A,0x2
    154F: 08       PUSH  A
    1550: 50 FC    MOV   A,0xFC
    1552: 5C       MOV   X,A
    1553: 18       POP   A
    1554: 7C 08 73 LCALL _UART_CPutString
(0585) 		UART_PutCRLF();
    1557: 7C 08 85 LCALL _UART_PutCRLF
(0586) 		UART_CPutString(">");	
    155A: 50 03    MOV   A,0x3
    155C: 08       PUSH  A
    155D: 50 FF    MOV   A,0xFF
    155F: 5C       MOV   X,A
    1560: 18       POP   A
    1561: 7C 08 73 LCALL _UART_CPutString
    1564: 20       POP   X
    1565: 7F       RET   
(0587) }
(0588) 
(0589) void instruction4(void)
(0590) {
(0591) 		UART_CPutString("Choose sample rate");
_instruction4:
    1566: 10       PUSH  X
    1567: 50 02    MOV   A,0x2
    1569: 08       PUSH  A
    156A: 50 E9    MOV   A,0xE9
    156C: 5C       MOV   X,A
    156D: 18       POP   A
    156E: 7C 08 73 LCALL _UART_CPutString
(0592) 		UART_PutCRLF();
    1571: 7C 08 85 LCALL _UART_PutCRLF
(0593) 		UART_CPutString("1 for 1.25ksps, 2 for 1.5ksps, 3 for 1.87ksps, 4 for 2.5ksps");
    1574: 50 02    MOV   A,0x2
    1576: 08       PUSH  A
    1577: 50 AC    MOV   A,0xAC
    1579: 5C       MOV   X,A
    157A: 18       POP   A
    157B: 7C 08 73 LCALL _UART_CPutString
(0594) 		UART_PutCRLF();
    157E: 7C 08 85 LCALL _UART_PutCRLF
(0595) 		UART_CPutString("5 for 3.125ksps, 6 for 3.75ksps, 7 for 6.25ksps, 8 for 7.5ksps, 9 for 9.375ksps");
    1581: 50 02    MOV   A,0x2
    1583: 08       PUSH  A
    1584: 50 5C    MOV   A,0x5C
    1586: 5C       MOV   X,A
    1587: 18       POP   A
    1588: 7C 08 73 LCALL _UART_CPutString
(0596) 		UART_PutCRLF();
    158B: 7C 08 85 LCALL _UART_PutCRLF
(0597) 		UART_CPutString(">");
    158E: 50 03    MOV   A,0x3
    1590: 08       PUSH  A
    1591: 50 FF    MOV   A,0xFF
    1593: 5C       MOV   X,A
    1594: 18       POP   A
    1595: 7C 08 73 LCALL _UART_CPutString
    1598: 20       POP   X
    1599: 7F       RET   
(0598) }
(0599) 
(0600) void instruction5(void)
(0601) {
(0602) 		UART_CPutString("Enter address to set trigger on within block in decimal or hex (Perferably decimal)");
_instruction5:
    159A: 10       PUSH  X
    159B: 50 02    MOV   A,0x2
    159D: 08       PUSH  A
    159E: 50 08    MOV   A,0x8
    15A0: 5C       MOV   X,A
    15A1: 18       POP   A
    15A2: 7C 08 73 LCALL _UART_CPutString
(0603) 		UART_PutCRLF();
    15A5: 7C 08 85 LCALL _UART_PutCRLF
(0604) 		UART_CPutString(">");
    15A8: 50 03    MOV   A,0x3
    15AA: 08       PUSH  A
    15AB: 50 FF    MOV   A,0xFF
    15AD: 5C       MOV   X,A
    15AE: 18       POP   A
    15AF: 7C 08 73 LCALL _UART_CPutString
    15B2: 20       POP   X
    15B3: 7F       RET   
(0605) 	
(0606) }
(0607) void instruction6(void)
(0608) {
(0609) 		UART_CPutString("Which Input would you like to save 'a' or 'b' ?");
_instruction6:
    15B4: 10       PUSH  X
    15B5: 50 01    MOV   A,0x1
    15B7: 08       PUSH  A
    15B8: 50 D8    MOV   A,0xD8
    15BA: 5C       MOV   X,A
    15BB: 18       POP   A
    15BC: 7C 08 73 LCALL _UART_CPutString
(0610) 		UART_PutCRLF();
    15BF: 7C 08 85 LCALL _UART_PutCRLF
(0611) 		UART_CPutString(">");
    15C2: 50 03    MOV   A,0x3
    15C4: 08       PUSH  A
    15C5: 50 FF    MOV   A,0xFF
    15C7: 5C       MOV   X,A
    15C8: 18       POP   A
    15C9: 7C 08 73 LCALL _UART_CPutString
    15CC: 20       POP   X
    15CD: 7F       RET   
(0612) 	
(0613) }
(0614) void instruction7(void)
(0615) {
(0616) 		UART_CPutString("Which block to read from DAC B? (Choose 1, 2, 3, or 4) ");
_instruction7:
    15CE: 10       PUSH  X
    15CF: 50 01    MOV   A,0x1
    15D1: 08       PUSH  A
    15D2: 50 A0    MOV   A,0xA0
    15D4: 5C       MOV   X,A
    15D5: 18       POP   A
    15D6: 7C 08 73 LCALL _UART_CPutString
(0617) 		UART_PutCRLF();
    15D9: 7C 08 85 LCALL _UART_PutCRLF
(0618) 		UART_CPutString(">");	
    15DC: 50 03    MOV   A,0x3
    15DE: 08       PUSH  A
    15DF: 50 FF    MOV   A,0xFF
    15E1: 5C       MOV   X,A
    15E2: 18       POP   A
    15E3: 7C 08 73 LCALL _UART_CPutString
    15E6: 20       POP   X
    15E7: 7F       RET   
(0619) }
(0620) //char asciiToHex(char addressByte)
(0621) //{
(0622) //        char output;
(0623) //        BOOL lowerCase = FALSE;
(0624) 
(0625) //		if(addressByte>= 0x41 && addressByte<= 0x5a)
(0626) //		{
(0627) //			addressByte -= 0x37;
(0628) //			
(0629) //		}  
(0630) //
(0631) //        if (addressByte >= 0x30  && addressByte <= 0x39){	
(0632) //						
(0633) //						UART_CPutString("integer");
(0634) //						UART_PutCRLF();
(0635) //                      output = addressByte - 0x30;
(0636) //		}
(0637) //		 if (addressByte >= 0x61  && addressByte <= 0x66){	
(0638) //						
(0639) //						/// Add conditional if 
(0640) //						UART_CPutString("Upper case");
(0641) //						UART_PutCRLF();
(0642) //                        output = addressByte - 0x51;
(0643) //		} 
(0644) //
(0645) //		if (!(addressByte >= 0x30  && addressByte <= 0x39)&& !(addressByte >= 0x61  && addressByte <= 0x7a))
(0646) ////		{
(0647) ////				
(0648) //////			   	invaildFlag=TRUE;
(0649) //////               	UART_CPutString("Not valid Hex address");
(0650) //////				UART_PutChar(0x07);
(0651) ////		}
(0652) //        return output;
(0653) //
(0654) //}//end asciiToHex
(0655) 
(0656) unsigned char ascii_to_hex(unsigned char*  addressString)
(0657) {
_ascii_to_hex:
  value                --> X+3
  unit                 --> X+2
  ten                  --> X+1
  hundred              --> X+0
  addressString        --> X-5
    15E8: 10       PUSH  X
    15E9: 4F       MOV   X,SP
    15EA: 38 04    ADD   SP,0x4
(0658)    unsigned char hundred, ten, unit, value;
(0659) 
(0660)    hundred = (*addressString-0x30)*100;
    15EC: 62 D0 00 MOV   REG[0xD0],0x0
    15EF: 52 FC    MOV   A,[X-4]
    15F1: 53 60    MOV   [__r1],A
    15F3: 52 FB    MOV   A,[X-5]
    15F5: 60 D4    MOV   REG[0xD4],A
    15F7: 3E 60    MVI   A,[__r1]
    15F9: 60 E8    MOV   REG[0xE8],A
    15FB: 62 E9 64 MOV   REG[0xE9],0x64
    15FE: 40       NOP   
    15FF: 5D EB    MOV   A,REG[0xEB]
    1601: 53 61    MOV   [__r0],A
    1603: 16 61 C0 SUB   [__r0],0xC0
    1606: 51 61    MOV   A,[__r0]
    1608: 54 00    MOV   [X+0],A
(0661)    ten = (*(addressString + 1)-0x30)*10;
    160A: 52 FC    MOV   A,[X-4]
    160C: 01 01    ADD   A,0x1
    160E: 53 60    MOV   [__r1],A
    1610: 52 FB    MOV   A,[X-5]
    1612: 09 00    ADC   A,0x0
    1614: 60 D4    MOV   REG[0xD4],A
    1616: 3E 60    MVI   A,[__r1]
    1618: 60 E8    MOV   REG[0xE8],A
    161A: 62 E9 0A MOV   REG[0xE9],0xA
    161D: 40       NOP   
    161E: 5D EB    MOV   A,REG[0xEB]
    1620: 53 61    MOV   [__r0],A
    1622: 16 61 E0 SUB   [__r0],0xE0
    1625: 51 61    MOV   A,[__r0]
    1627: 54 01    MOV   [X+1],A
(0662)    unit = *(addressString+2)-0x30;     
    1629: 52 FC    MOV   A,[X-4]
    162B: 01 02    ADD   A,0x2
    162D: 53 60    MOV   [__r1],A
    162F: 52 FB    MOV   A,[X-5]
    1631: 09 00    ADC   A,0x0
    1633: 60 D4    MOV   REG[0xD4],A
    1635: 3E 60    MVI   A,[__r1]
    1637: 53 61    MOV   [__r0],A
    1639: 16 61 30 SUB   [__r0],0x30
    163C: 51 61    MOV   A,[__r0]
    163E: 54 02    MOV   [X+2],A
(0663) 
(0664)    value = (hundred + ten + unit);
    1640: 52 00    MOV   A,[X+0]
    1642: 03 01    ADD   A,[X+1]
    1644: 03 02    ADD   A,[X+2]
    1646: 54 03    MOV   [X+3],A
(0665)    //printf("\nValue: %#04x \n", value);
(0666) 
(0667)    return value; 
    1648: 52 03    MOV   A,[X+3]
    164A: 38 FC    ADD   SP,0xFC
    164C: 20       POP   X
    164D: 7F       RET   
(0668) }
(0669) 
(0670) char toLower(char k) {
_toLower:
  k                    --> X-4
    164E: 10       PUSH  X
    164F: 4F       MOV   X,SP
(0671) 	if (k >= 'A' && k <= 'Z') {
    1650: 3D FC 41 CMP   [X-4],0x41
    1653: C0 10    JC    0x1664
    1655: 50 5A    MOV   A,0x5A
    1657: 3B FC    CMP   A,[X-4]
    1659: C0 0A    JC    0x1664
(0672) 		return k + 0x20;	
    165B: 62 D0 00 MOV   REG[0xD0],0x0
    165E: 52 FC    MOV   A,[X-4]
    1660: 01 20    ADD   A,0x20
    1662: 80 06    JMP   0x1669
(0673) 	} else {	
(0674) 		return k;
    1664: 52 FC    MOV   A,[X-4]
    1666: 62 D0 00 MOV   REG[0xD0],0x0
    1669: 20       POP   X
    166A: 7F       RET   
(0675) 	}
(0676) }
(0677) 
(0678) unsigned int hexToDec(char c1, char c2, char c3, char c4) {
_hexToDec:
  total                --> X+0
  c4                   --> X-7
  c3                   --> X-6
  c2                   --> X-5
  c1                   --> X-4
    166B: 10       PUSH  X
    166C: 4F       MOV   X,SP
    166D: 38 02    ADD   SP,0x2
(0679) 	int total = 0;
    166F: 56 01 00 MOV   [X+1],0x0
    1672: 56 00 00 MOV   [X+0],0x0
(0680) 	
(0681) 	if (c1 >= 'a' && c1 <= 'z') c1 -= 0x57;
    1675: 3D FC 61 CMP   [X-4],0x61
    1678: C0 12    JC    0x168B
    167A: 50 7A    MOV   A,0x7A
    167C: 3B FC    CMP   A,[X-4]
    167E: C0 0C    JC    0x168B
    1680: 62 D0 00 MOV   REG[0xD0],0x0
    1683: 52 FC    MOV   A,[X-4]
    1685: 11 57    SUB   A,0x57
    1687: 54 FC    MOV   [X-4],A
    1689: 80 0A    JMP   0x1694
(0682) 	else c1 -= 0x30;
    168B: 62 D0 00 MOV   REG[0xD0],0x0
    168E: 52 FC    MOV   A,[X-4]
    1690: 11 30    SUB   A,0x30
    1692: 54 FC    MOV   [X-4],A
(0683) 	if (c2 >= 'a' && c2 <= 'z') c2 -= 0x57;
    1694: 3D FB 61 CMP   [X-5],0x61
    1697: C0 12    JC    0x16AA
    1699: 50 7A    MOV   A,0x7A
    169B: 3B FB    CMP   A,[X-5]
    169D: C0 0C    JC    0x16AA
    169F: 62 D0 00 MOV   REG[0xD0],0x0
    16A2: 52 FB    MOV   A,[X-5]
    16A4: 11 57    SUB   A,0x57
    16A6: 54 FB    MOV   [X-5],A
    16A8: 80 0A    JMP   0x16B3
(0684) 	else c2 -= 0x30;
    16AA: 62 D0 00 MOV   REG[0xD0],0x0
    16AD: 52 FB    MOV   A,[X-5]
    16AF: 11 30    SUB   A,0x30
    16B1: 54 FB    MOV   [X-5],A
(0685) 	if (c3 >= 'a' && c3 <= 'z') c3 -= 0x57;
    16B3: 3D FA 61 CMP   [X-6],0x61
    16B6: C0 12    JC    0x16C9
    16B8: 50 7A    MOV   A,0x7A
    16BA: 3B FA    CMP   A,[X-6]
    16BC: C0 0C    JC    0x16C9
    16BE: 62 D0 00 MOV   REG[0xD0],0x0
    16C1: 52 FA    MOV   A,[X-6]
    16C3: 11 57    SUB   A,0x57
    16C5: 54 FA    MOV   [X-6],A
    16C7: 80 0A    JMP   0x16D2
(0686) 	else c3 -= 0x30;
    16C9: 62 D0 00 MOV   REG[0xD0],0x0
    16CC: 52 FA    MOV   A,[X-6]
    16CE: 11 30    SUB   A,0x30
    16D0: 54 FA    MOV   [X-6],A
(0687) 	if (c4 >= 'a' && c4 <= 'z') c4 -= 0x57;
    16D2: 3D F9 61 CMP   [X-7],0x61
    16D5: C0 12    JC    0x16E8
    16D7: 50 7A    MOV   A,0x7A
    16D9: 3B F9    CMP   A,[X-7]
    16DB: C0 0C    JC    0x16E8
    16DD: 62 D0 00 MOV   REG[0xD0],0x0
    16E0: 52 F9    MOV   A,[X-7]
    16E2: 11 57    SUB   A,0x57
    16E4: 54 F9    MOV   [X-7],A
    16E6: 80 0A    JMP   0x16F1
(0688) 	else c4 -= 0x30;
    16E8: 62 D0 00 MOV   REG[0xD0],0x0
    16EB: 52 F9    MOV   A,[X-7]
    16ED: 11 30    SUB   A,0x30
    16EF: 54 F9    MOV   [X-7],A
(0689) 	
(0690) 	total += c1*4096;
    16F1: 62 D0 00 MOV   REG[0xD0],0x0
    16F4: 52 FC    MOV   A,[X-4]
    16F6: 53 61    MOV   [__r0],A
    16F8: 55 60 00 MOV   [__r1],0x0
    16FB: 65 61    ASL   [__r0]
    16FD: 65 60    ASL   [__r1]
    16FF: 6B 61    RLC   [__r0]
    1701: 65 60    ASL   [__r1]
    1703: 6B 61    RLC   [__r0]
    1705: 65 60    ASL   [__r1]
    1707: 6B 61    RLC   [__r0]
    1709: 51 60    MOV   A,[__r1]
    170B: 05 01    ADD   [X+1],A
    170D: 51 61    MOV   A,[__r0]
    170F: 0D 00    ADC   [X+0],A
(0691) 	total += c2*256;
    1711: 52 FB    MOV   A,[X-5]
    1713: 07 01 00 ADD   [X+1],0x0
    1716: 0D 00    ADC   [X+0],A
(0692) 	total += c3*16;
    1718: 52 FA    MOV   A,[X-6]
    171A: 53 60    MOV   [__r1],A
    171C: 55 61 00 MOV   [__r0],0x0
    171F: 65 60    ASL   [__r1]
    1721: 6B 61    RLC   [__r0]
    1723: 65 60    ASL   [__r1]
    1725: 6B 61    RLC   [__r0]
    1727: 65 60    ASL   [__r1]
    1729: 6B 61    RLC   [__r0]
    172B: 65 60    ASL   [__r1]
    172D: 6B 61    RLC   [__r0]
    172F: 51 60    MOV   A,[__r1]
    1731: 05 01    ADD   [X+1],A
    1733: 51 61    MOV   A,[__r0]
    1735: 0D 00    ADC   [X+0],A
(0693) 	total += c4;
    1737: 52 F9    MOV   A,[X-7]
    1739: 05 01    ADD   [X+1],A
    173B: 50 00    MOV   A,0x0
    173D: 0F 00 00 ADC   [X+0],0x0
(0694) 	
(0695) 	return total;
    1740: 52 01    MOV   A,[X+1]
    1742: 53 60    MOV   [__r1],A
    1744: 52 00    MOV   A,[X+0]
    1746: 53 61    MOV   [__r0],A
    1748: 38 FE    ADD   SP,0xFE
    174A: 20       POP   X
    174B: 7F       RET   
FILE: C:\Users\TANGY_~1\DOCUME~1\ECE381~1\DATAAC~1\DATAAC~1\spi_sram.c
(0001) //*****************************************************************************
(0002) //* Read/Write/Control Functions for the Microchip 23K256 32kB SPI RAM
(0003) //*
(0004) //* bnoble@siue.edu 20140320
(0005) //*****************************************************************************
(0006) 
(0007) #include <m8c.h>        // part specific constants and macros
(0008) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0009) #include "spi_sram.h"
(0010) 
(0011) // Write byte "value" to SRAM Status Register
(0012) BYTE SPIRAM_WriteStatusRegister(BYTE value)
(0013) {
_SPIRAM_WriteStatusRegister:
  b                    --> X+0
  value                --> X-4
    174C: 10       PUSH  X
    174D: 4F       MOV   X,SP
    174E: 38 01    ADD   SP,0x1
(0014) 	BYTE b;
(0015) 
(0016) 	// If bits 5 through 1 aren't zero, return an error as per
(0017) 	// Section 2.5 in the 23K256 datasheet
(0018) 	if (value & 0b00111110)
    1750: 48 FC 3E TST   [X-4],0x3E
    1753: A0 08    JZ    0x175C
(0019) 		return(1);
    1755: 62 D0 00 MOV   REG[0xD0],0x0
    1758: 50 01    MOV   A,0x1
    175A: 80 72    JMP   0x17CD
(0020) 	// Mode SPIRAM_SEQUENTIAL_MODE|SPIRAM_PAGE_MODE are invalid.
(0021) 	if ((value & 0b11000000) == 0b11000000)
    175C: 62 D0 00 MOV   REG[0xD0],0x0
    175F: 52 FC    MOV   A,[X-4]
    1761: 21 C0    AND   A,0xC0
    1763: 39 C0    CMP   A,0xC0
    1765: B0 05    JNZ   0x176B
(0022) 		return(1);
    1767: 50 01    MOV   A,0x1
    1769: 80 63    JMP   0x17CD
(0023) 	// Make sure the TX buffer is empty (it should be but let's be proper)
(0024) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    176B: 10       PUSH  X
    176C: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    176F: 20       POP   X
    1770: 62 D0 00 MOV   REG[0xD0],0x0
    1773: 53 61    MOV   [__r0],A
    1775: 47 61 10 TST   [__r0],0x10
    1778: AF F2    JZ    0x176B
(0025) 	// SPI transfers begin by bringing CS LOW
(0026) 	nCS_LOW;
    177A: 41 04 FB AND   REG[0x4],0xFB
(0027) 	// Send the Status Register Write command
(0028) 	SPIM_SendTxData(SPIRAM_WRITE_STATUS_REG);
    177D: 10       PUSH  X
    177E: 50 01    MOV   A,0x1
    1780: 7C 08 A0 LCALL _SPIM_SendTxData
    1783: 20       POP   X
(0029) 	// It will be almost immediately loaded into the TX shift register, freeing
(0030) 	// up the TX buffer, and the SPIM module will start transmission.
(0031) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1784: 10       PUSH  X
    1785: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    1788: 20       POP   X
    1789: 62 D0 00 MOV   REG[0xD0],0x0
    178C: 53 61    MOV   [__r0],A
    178E: 47 61 10 TST   [__r0],0x10
    1791: AF F2    JZ    0x1784
(0032) 	// Prime the TX buffer for the next byte by loading it with the new status
(0033) 	// register byte while the first byte is still transmitting.
(0034) 	SPIM_SendTxData(value);
    1793: 10       PUSH  X
    1794: 52 FC    MOV   A,[X-4]
    1796: 7C 08 A0 LCALL _SPIM_SendTxData
    1799: 20       POP   X
(0035) 	// Wait for the first TX/RX cycle to finish. We don't care what we read.
(0036) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    179A: 10       PUSH  X
    179B: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    179E: 20       POP   X
    179F: 62 D0 00 MOV   REG[0xD0],0x0
    17A2: 53 61    MOV   [__r0],A
    17A4: 47 61 20 TST   [__r0],0x20
    17A7: AF F2    JZ    0x179A
(0037) 	// Reading the data clears the RX_BUFFER_FULL flag, even if we don't want it.
(0038) 	SPIM_bReadRxData(); // ignore byte from SPIRAM_WRITE_STATUS_REG TX
    17A9: 10       PUSH  X
    17AA: 7C 08 A3 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|bSPIM_ReadRxData|_SPIM_bReadRxData
    17AD: 20       POP   X
    17AE: 62 D0 00 MOV   REG[0xD0],0x0
(0039) 	// Wait for the second TX/RX cycle to finish so that we know that the entire
(0040) 	// two byte transaction is finished.
(0041) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    17B1: 10       PUSH  X
    17B2: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    17B5: 20       POP   X
    17B6: 62 D0 00 MOV   REG[0xD0],0x0
    17B9: 53 61    MOV   [__r0],A
    17BB: 47 61 20 TST   [__r0],0x20
    17BE: AF F2    JZ    0x17B1
(0042) 	SPIM_bReadRxData(); // We don't care about this read either
    17C0: 10       PUSH  X
    17C1: 7C 08 A3 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|bSPIM_ReadRxData|_SPIM_bReadRxData
    17C4: 20       POP   X
    17C5: 62 D0 00 MOV   REG[0xD0],0x0
(0043) 	// SPI transfers end by bringing CS LOW
(0044) 	nCS_HIGH;
    17C8: 43 04 04 OR    REG[0x4],0x4
(0045) 	return(0);
    17CB: 50 00    MOV   A,0x0
    17CD: 38 FF    ADD   SP,0xFF
    17CF: 20       POP   X
    17D0: 7F       RET   
(0046) }
(0047) 
(0048) // Read SRAM Status Register and return the result.
(0049) BYTE SPIRAM_ReadStatusRegister(void)
(0050) {
_SPIRAM_ReadStatusRegister:
  b                    --> X+1
  statReg              --> X+0
    17D1: 10       PUSH  X
    17D2: 4F       MOV   X,SP
    17D3: 38 02    ADD   SP,0x2
(0051) 	BYTE statReg;
(0052) 	BYTE b;
(0053) 
(0054) 	// Make sure the TX buffer is empty before starting
(0055) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    17D5: 10       PUSH  X
    17D6: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    17D9: 20       POP   X
    17DA: 62 D0 00 MOV   REG[0xD0],0x0
    17DD: 53 61    MOV   [__r0],A
    17DF: 47 61 10 TST   [__r0],0x10
    17E2: AF F2    JZ    0x17D5
(0056) 	nCS_LOW;
    17E4: 41 04 FB AND   REG[0x4],0xFB
(0057) 	// Send the Read Status Register command
(0058) 	SPIM_SendTxData(SPIRAM_READ_STATUS_REG);
    17E7: 10       PUSH  X
    17E8: 50 05    MOV   A,0x5
    17EA: 7C 08 A0 LCALL _SPIM_SendTxData
    17ED: 20       POP   X
(0059) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    17EE: 10       PUSH  X
    17EF: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    17F2: 20       POP   X
    17F3: 62 D0 00 MOV   REG[0xD0],0x0
    17F6: 53 61    MOV   [__r0],A
    17F8: 47 61 10 TST   [__r0],0x10
    17FB: AF F2    JZ    0x17EE
(0060) 	// Send a dummy byte in order to initiate a TX/RX transfer
(0061) 	SPIM_SendTxData(SPIRAM_DUMMY_BYTE);
    17FD: 10       PUSH  X
    17FE: 50 00    MOV   A,0x0
    1800: 7C 08 A0 LCALL _SPIM_SendTxData
    1803: 20       POP   X
(0062) 	// Wait for the first RX byte to arrive and ignore it; it is meaningless.
(0063) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1804: 10       PUSH  X
    1805: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    1808: 20       POP   X
    1809: 62 D0 00 MOV   REG[0xD0],0x0
    180C: 53 61    MOV   [__r0],A
    180E: 47 61 20 TST   [__r0],0x20
    1811: AF F2    JZ    0x1804
(0064) 	SPIM_bReadRxData();
    1813: 10       PUSH  X
    1814: 7C 08 A3 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|bSPIM_ReadRxData|_SPIM_bReadRxData
    1817: 20       POP   X
    1818: 62 D0 00 MOV   REG[0xD0],0x0
(0065) 	// Wait for the second RX byte to arrive; it contains the status reg value.
(0066) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    181B: 10       PUSH  X
    181C: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    181F: 20       POP   X
    1820: 62 D0 00 MOV   REG[0xD0],0x0
    1823: 53 61    MOV   [__r0],A
    1825: 47 61 20 TST   [__r0],0x20
    1828: AF F2    JZ    0x181B
(0067) 	statReg = SPIM_bReadRxData();
    182A: 10       PUSH  X
    182B: 7C 08 A3 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|bSPIM_ReadRxData|_SPIM_bReadRxData
    182E: 20       POP   X
    182F: 62 D0 00 MOV   REG[0xD0],0x0
    1832: 54 00    MOV   [X+0],A
(0068) 	nCS_HIGH;
    1834: 43 04 04 OR    REG[0x4],0x4
(0069) 	return(statReg);
    1837: 52 00    MOV   A,[X+0]
    1839: 38 FE    ADD   SP,0xFE
    183B: 20       POP   X
    183C: 7F       RET   
(0070) 	
(0071) }
(0072) 
(0073) // Write byte "out" to SRAM address "addr"
(0074) // NOTE: This function assumes the SRAM has already been put in Byte Mode.
(0075) void SPIRAM_WriteByte(WORD addr, BYTE out)
(0076) {
_SPIRAM_WriteByte:
  loAddr               --> X+1
  hiAddr               --> X+0
  out                  --> X-6
  addr                 --> X-5
    183D: 10       PUSH  X
    183E: 4F       MOV   X,SP
    183F: 38 02    ADD   SP,0x2
(0077) 	BYTE hiAddr;
(0078) 	BYTE loAddr;
(0079) 	
(0080) 	// Break the SRAM word address into two bytes
(0081) 	hiAddr = (BYTE)((addr >> 8) & 0x00ff);
    1841: 62 D0 00 MOV   REG[0xD0],0x0
    1844: 52 FB    MOV   A,[X-5]
    1846: 54 00    MOV   [X+0],A
(0082) 	loAddr = (BYTE)(addr & 0x00ff);
    1848: 52 FC    MOV   A,[X-4]
    184A: 54 01    MOV   [X+1],A
(0083) 	M8C_DisableGInt;
    184C: 70 FE    AND   F,0xFE
(0084) 	// Place your SPI code here
(0085) 	
(0086) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    184E: 10       PUSH  X
    184F: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    1852: 20       POP   X
    1853: 62 D0 00 MOV   REG[0xD0],0x0
    1856: 53 61    MOV   [__r0],A
    1858: 47 61 10 TST   [__r0],0x10
    185B: AF F2    JZ    0x184E
(0087) 	
(0088) 	nCS_LOW;
    185D: 41 04 FB AND   REG[0x4],0xFB
(0089) 	SPIM_SendTxData(SPIRAM_WRITE);
    1860: 10       PUSH  X
    1861: 50 02    MOV   A,0x2
    1863: 7C 08 A0 LCALL _SPIM_SendTxData
    1866: 20       POP   X
(0090) 	
(0091) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1867: 10       PUSH  X
    1868: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    186B: 20       POP   X
    186C: 62 D0 00 MOV   REG[0xD0],0x0
    186F: 53 61    MOV   [__r0],A
    1871: 47 61 10 TST   [__r0],0x10
    1874: AF F2    JZ    0x1867
(0092) 	SPIM_SendTxData(hiAddr);
    1876: 10       PUSH  X
    1877: 52 00    MOV   A,[X+0]
    1879: 7C 08 A0 LCALL _SPIM_SendTxData
    187C: 20       POP   X
(0093) 
(0094) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    187D: 10       PUSH  X
    187E: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    1881: 20       POP   X
    1882: 62 D0 00 MOV   REG[0xD0],0x0
    1885: 53 61    MOV   [__r0],A
    1887: 47 61 10 TST   [__r0],0x10
    188A: AF F2    JZ    0x187D
(0095) 	SPIM_SendTxData(loAddr);
    188C: 10       PUSH  X
    188D: 52 01    MOV   A,[X+1]
    188F: 7C 08 A0 LCALL _SPIM_SendTxData
    1892: 20       POP   X
(0096) 	
(0097) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1893: 10       PUSH  X
    1894: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    1897: 20       POP   X
    1898: 62 D0 00 MOV   REG[0xD0],0x0
    189B: 53 61    MOV   [__r0],A
    189D: 47 61 10 TST   [__r0],0x10
    18A0: AF F2    JZ    0x1893
(0098) 	SPIM_SendTxData(out);
    18A2: 10       PUSH  X
    18A3: 52 FA    MOV   A,[X-6]
    18A5: 7C 08 A0 LCALL _SPIM_SendTxData
    18A8: 20       POP   X
(0099) 		
(0100) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    18A9: 10       PUSH  X
    18AA: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    18AD: 20       POP   X
    18AE: 62 D0 00 MOV   REG[0xD0],0x0
    18B1: 53 61    MOV   [__r0],A
    18B3: 47 61 20 TST   [__r0],0x20
    18B6: AF F2    JZ    0x18A9
(0101) 	SPIM_bReadRxData();
    18B8: 10       PUSH  X
    18B9: 7C 08 A3 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|bSPIM_ReadRxData|_SPIM_bReadRxData
    18BC: 20       POP   X
    18BD: 62 D0 00 MOV   REG[0xD0],0x0
(0102) 	
(0103) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    18C0: 10       PUSH  X
    18C1: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    18C4: 20       POP   X
    18C5: 62 D0 00 MOV   REG[0xD0],0x0
    18C8: 53 61    MOV   [__r0],A
    18CA: 47 61 20 TST   [__r0],0x20
    18CD: AF F2    JZ    0x18C0
(0104) 	SPIM_bReadRxData();
    18CF: 10       PUSH  X
    18D0: 7C 08 A3 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|bSPIM_ReadRxData|_SPIM_bReadRxData
    18D3: 20       POP   X
    18D4: 62 D0 00 MOV   REG[0xD0],0x0
(0105) 	
(0106) 	nCS_HIGH;
    18D7: 43 04 04 OR    REG[0x4],0x4
(0107) 	
(0108) 	M8C_EnableGInt;
    18DA: 71 01    OR    F,0x1
    18DC: 38 FE    ADD   SP,0xFE
    18DE: 20       POP   X
    18DF: 7F       RET   
(0109) }
(0110) 
(0111) // Read and return byte at SRAM address "addr"
(0112) // NOTE: This function assumes the SRAM has already been put in Byte Mode.
(0113) BYTE SPIRAM_ReadByte(WORD addr)
(0114) {
_SPIRAM_ReadByte:
  in                   --> X+2
  loAddr               --> X+1
  hiAddr               --> X+0
  addr                 --> X-5
    18E0: 10       PUSH  X
    18E1: 4F       MOV   X,SP
    18E2: 38 03    ADD   SP,0x3
(0115) 	BYTE hiAddr;
(0116) 	BYTE loAddr;
(0117) 	BYTE in;
(0118) 
(0119) 	// Break the SRAM word address into two bytes
(0120) 	hiAddr = (BYTE)((addr >> 8) & 0x00ff);
    18E4: 62 D0 00 MOV   REG[0xD0],0x0
    18E7: 52 FB    MOV   A,[X-5]
    18E9: 54 00    MOV   [X+0],A
(0121) 	loAddr = (BYTE)(addr & 0x00ff);
    18EB: 52 FC    MOV   A,[X-4]
    18ED: 54 01    MOV   [X+1],A
(0122) 	M8C_DisableGInt;
    18EF: 70 FE    AND   F,0xFE
(0123) 	// Place your SPI code here
(0124) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    18F1: 10       PUSH  X
    18F2: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    18F5: 20       POP   X
    18F6: 62 D0 00 MOV   REG[0xD0],0x0
    18F9: 53 61    MOV   [__r0],A
    18FB: 47 61 10 TST   [__r0],0x10
    18FE: AF F2    JZ    0x18F1
(0125) 		
(0126) 	nCS_LOW;
    1900: 41 04 FB AND   REG[0x4],0xFB
(0127) 	SPIM_SendTxData(SPIRAM_READ);
    1903: 10       PUSH  X
    1904: 50 03    MOV   A,0x3
    1906: 7C 08 A0 LCALL _SPIM_SendTxData
    1909: 20       POP   X
(0128) 	
(0129) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    190A: 10       PUSH  X
    190B: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    190E: 20       POP   X
    190F: 62 D0 00 MOV   REG[0xD0],0x0
    1912: 53 61    MOV   [__r0],A
    1914: 47 61 10 TST   [__r0],0x10
    1917: AF F2    JZ    0x190A
(0130) 	SPIM_SendTxData(hiAddr);
    1919: 10       PUSH  X
    191A: 52 00    MOV   A,[X+0]
    191C: 7C 08 A0 LCALL _SPIM_SendTxData
    191F: 20       POP   X
(0131) 	
(0132) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1920: 10       PUSH  X
    1921: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    1924: 20       POP   X
    1925: 62 D0 00 MOV   REG[0xD0],0x0
    1928: 53 61    MOV   [__r0],A
    192A: 47 61 10 TST   [__r0],0x10
    192D: AF F2    JZ    0x1920
(0133) 	SPIM_SendTxData(loAddr);
    192F: 10       PUSH  X
    1930: 52 01    MOV   A,[X+1]
    1932: 7C 08 A0 LCALL _SPIM_SendTxData
    1935: 20       POP   X
(0134) 	
(0135) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1936: 10       PUSH  X
    1937: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    193A: 20       POP   X
    193B: 62 D0 00 MOV   REG[0xD0],0x0
    193E: 53 61    MOV   [__r0],A
    1940: 47 61 10 TST   [__r0],0x10
    1943: AF F2    JZ    0x1936
(0136) 	SPIM_SendTxData(SPIRAM_DUMMY_BYTE);
    1945: 10       PUSH  X
    1946: 50 00    MOV   A,0x0
    1948: 7C 08 A0 LCALL _SPIM_SendTxData
    194B: 20       POP   X
(0137) 	
(0138) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    194C: 10       PUSH  X
    194D: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    1950: 20       POP   X
    1951: 62 D0 00 MOV   REG[0xD0],0x0
    1954: 53 61    MOV   [__r0],A
    1956: 47 61 20 TST   [__r0],0x20
    1959: AF F2    JZ    0x194C
(0139) 	SPIM_bReadRxData();
    195B: 10       PUSH  X
    195C: 7C 08 A3 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|bSPIM_ReadRxData|_SPIM_bReadRxData
    195F: 20       POP   X
    1960: 62 D0 00 MOV   REG[0xD0],0x0
(0140) 	
(0141) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1963: 10       PUSH  X
    1964: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    1967: 20       POP   X
    1968: 62 D0 00 MOV   REG[0xD0],0x0
    196B: 53 61    MOV   [__r0],A
    196D: 47 61 20 TST   [__r0],0x20
    1970: AF F2    JZ    0x1963
(0142) 	in = SPIM_bReadRxData();
    1972: 10       PUSH  X
    1973: 7C 08 A3 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|bSPIM_ReadRxData|_SPIM_bReadRxData
    1976: 20       POP   X
    1977: 62 D0 00 MOV   REG[0xD0],0x0
    197A: 54 02    MOV   [X+2],A
(0143) 	
(0144) 	nCS_HIGH;
    197C: 43 04 04 OR    REG[0x4],0x4
(0145) 
(0146) 	M8C_EnableGInt;
    197F: 71 01    OR    F,0x1
(0147) 	return(in);
    1981: 52 02    MOV   A,[X+2]
    1983: 38 FD    ADD   SP,0xFD
    1985: 20       POP   X
    1986: 7F       RET   
(0148) }
(0149) 
(0150) // Write "count" bytes starting at address "addr" from array "out".
(0151) // The M8C is limited to 256 byte pages. This limits the maximum
(0152) // array size to 256 bytes, which means that "count" is only useful
(0153) // as a BYTE.
(0154) // NOTE: This function assumes the SRAM has already been put in Sequential Mode
(0155) void SPIRAM_WriteArray(WORD addr, BYTE *out, BYTE count)
(0156) {
_SPIRAM_WriteArray:
  b                    --> X+4
  loAddr               --> X+3
  hiAddr               --> X+2
  i                    --> X+0
  count                --> X-8
  out                  --> X-7
  addr                 --> X-5
    1987: 10       PUSH  X
    1988: 4F       MOV   X,SP
    1989: 38 05    ADD   SP,0x5
(0157) 	BYTE hiAddr;
(0158) 	BYTE loAddr;
(0159) 	BYTE b;
(0160) 	int i;
(0161) 	
(0162) 	// If some clown tries to write 0 bytes, just return.
(0163) 	// XXX - Always beware of clowns!
(0164) 	if (!count)
    198B: 3D F8 00 CMP   [X-8],0x0
    198E: B0 03    JNZ   0x1992
(0165) 		return;
    1990: 80 FC    JMP   0x1A8D
(0166) 	// Break the SRAM word address into two bytes
(0167) 	hiAddr = (BYTE)((addr >> 8) & 0x00ff);
    1992: 62 D0 00 MOV   REG[0xD0],0x0
    1995: 52 FB    MOV   A,[X-5]
    1997: 54 02    MOV   [X+2],A
(0168) 	loAddr = (BYTE)(addr & 0x00ff);
    1999: 52 FC    MOV   A,[X-4]
    199B: 54 03    MOV   [X+3],A
(0169) 	M8C_DisableGInt;
    199D: 70 FE    AND   F,0xFE
(0170) 	// Place your SPI code here
(0171) 	
(0172) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    199F: 10       PUSH  X
    19A0: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    19A3: 20       POP   X
    19A4: 62 D0 00 MOV   REG[0xD0],0x0
    19A7: 53 61    MOV   [__r0],A
    19A9: 47 61 10 TST   [__r0],0x10
    19AC: AF F2    JZ    0x199F
(0173) 	nCS_LOW;
    19AE: 41 04 FB AND   REG[0x4],0xFB
(0174) 	SPIM_SendTxData(SPIRAM_WRITE);
    19B1: 10       PUSH  X
    19B2: 50 02    MOV   A,0x2
    19B4: 7C 08 A0 LCALL _SPIM_SendTxData
    19B7: 20       POP   X
(0175) 
(0176) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    19B8: 10       PUSH  X
    19B9: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    19BC: 20       POP   X
    19BD: 62 D0 00 MOV   REG[0xD0],0x0
    19C0: 53 61    MOV   [__r0],A
    19C2: 47 61 10 TST   [__r0],0x10
    19C5: AF F2    JZ    0x19B8
(0177) 	SPIM_SendTxData(hiAddr);
    19C7: 10       PUSH  X
    19C8: 52 02    MOV   A,[X+2]
    19CA: 7C 08 A0 LCALL _SPIM_SendTxData
    19CD: 20       POP   X
(0178) 
(0179) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    19CE: 10       PUSH  X
    19CF: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    19D2: 20       POP   X
    19D3: 62 D0 00 MOV   REG[0xD0],0x0
    19D6: 53 61    MOV   [__r0],A
    19D8: 47 61 20 TST   [__r0],0x20
    19DB: AF F2    JZ    0x19CE
(0180) 	SPIM_bReadRxData();
    19DD: 10       PUSH  X
    19DE: 7C 08 A3 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|bSPIM_ReadRxData|_SPIM_bReadRxData
    19E1: 20       POP   X
    19E2: 62 D0 00 MOV   REG[0xD0],0x0
(0181) 	
(0182) 	
(0183) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    19E5: 10       PUSH  X
    19E6: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    19E9: 20       POP   X
    19EA: 62 D0 00 MOV   REG[0xD0],0x0
    19ED: 53 61    MOV   [__r0],A
    19EF: 47 61 10 TST   [__r0],0x10
    19F2: AF F2    JZ    0x19E5
(0184) 	SPIM_SendTxData(loAddr);
    19F4: 10       PUSH  X
    19F5: 52 03    MOV   A,[X+3]
    19F7: 7C 08 A0 LCALL _SPIM_SendTxData
    19FA: 20       POP   X
(0185) 
(0186) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    19FB: 10       PUSH  X
    19FC: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    19FF: 20       POP   X
    1A00: 62 D0 00 MOV   REG[0xD0],0x0
    1A03: 53 61    MOV   [__r0],A
    1A05: 47 61 20 TST   [__r0],0x20
    1A08: AF F2    JZ    0x19FB
(0187) 	SPIM_bReadRxData();
    1A0A: 10       PUSH  X
    1A0B: 7C 08 A3 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|bSPIM_ReadRxData|_SPIM_bReadRxData
    1A0E: 20       POP   X
    1A0F: 62 D0 00 MOV   REG[0xD0],0x0
(0188) 
(0189) 	for (i = 0; i < count; i++ ){
    1A12: 56 01 00 MOV   [X+1],0x0
    1A15: 56 00 00 MOV   [X+0],0x0
    1A18: 80 3F    JMP   0x1A58
(0190) 			
(0191) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1A1A: 10       PUSH  X
    1A1B: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    1A1E: 20       POP   X
    1A1F: 62 D0 00 MOV   REG[0xD0],0x0
    1A22: 53 61    MOV   [__r0],A
    1A24: 47 61 10 TST   [__r0],0x10
    1A27: AF F2    JZ    0x1A1A
(0192) 	SPIM_SendTxData(out[i]);
    1A29: 52 01    MOV   A,[X+1]
    1A2B: 03 FA    ADD   A,[X-6]
    1A2D: 53 60    MOV   [__r1],A
    1A2F: 52 00    MOV   A,[X+0]
    1A31: 0B F9    ADC   A,[X-7]
    1A33: 60 D4    MOV   REG[0xD4],A
    1A35: 3E 60    MVI   A,[__r1]
    1A37: 10       PUSH  X
    1A38: 7C 08 A0 LCALL _SPIM_SendTxData
    1A3B: 20       POP   X
(0193) 	
(0194) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1A3C: 10       PUSH  X
    1A3D: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    1A40: 20       POP   X
    1A41: 62 D0 00 MOV   REG[0xD0],0x0
    1A44: 53 61    MOV   [__r0],A
    1A46: 47 61 20 TST   [__r0],0x20
    1A49: AF F2    JZ    0x1A3C
(0195) 	SPIM_bReadRxData();
    1A4B: 10       PUSH  X
    1A4C: 7C 08 A3 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|bSPIM_ReadRxData|_SPIM_bReadRxData
    1A4F: 20       POP   X
    1A50: 62 D0 00 MOV   REG[0xD0],0x0
(0196) 	}
    1A53: 77 01    INC   [X+1]
    1A55: 0F 00 00 ADC   [X+0],0x0
    1A58: 62 D0 00 MOV   REG[0xD0],0x0
    1A5B: 52 F8    MOV   A,[X-8]
    1A5D: 53 60    MOV   [__r1],A
    1A5F: 52 01    MOV   A,[X+1]
    1A61: 12 60    SUB   A,[__r1]
    1A63: 50 00    MOV   A,0x0
    1A65: 31 80    XOR   A,0x80
    1A67: 53 5E    MOV   [__rX],A
    1A69: 52 00    MOV   A,[X+0]
    1A6B: 31 80    XOR   A,0x80
    1A6D: 1A 5E    SBB   A,[__rX]
    1A6F: CF AA    JC    0x1A1A
(0197) 
(0198) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1A71: 10       PUSH  X
    1A72: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    1A75: 20       POP   X
    1A76: 62 D0 00 MOV   REG[0xD0],0x0
    1A79: 53 61    MOV   [__r0],A
    1A7B: 47 61 20 TST   [__r0],0x20
    1A7E: AF F2    JZ    0x1A71
(0199) 	SPIM_bReadRxData();
    1A80: 10       PUSH  X
    1A81: 7C 08 A3 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|bSPIM_ReadRxData|_SPIM_bReadRxData
    1A84: 20       POP   X
    1A85: 62 D0 00 MOV   REG[0xD0],0x0
(0200) 		
(0201) 	nCS_HIGH;
    1A88: 43 04 04 OR    REG[0x4],0x4
(0202) 
(0203) 	M8C_EnableGInt;
    1A8B: 71 01    OR    F,0x1
    1A8D: 38 FB    ADD   SP,0xFB
    1A8F: 20       POP   X
    1A90: 7F       RET   
(0204) }
(0205) 
(0206) // Read "count" bytes starting at address "addr" into array "in"
(0207) // The M8C is limited to 256 byte pages. This limits the maximum
(0208) // array size to 256 bytes, which means that "count" is only useful
(0209) // as a BYTE.
(0210) // NOTE: This function assumes the SRAM has already been put in Sequential Mode
(0211) void SPIRAM_ReadArray(WORD addr, BYTE *in, BYTE count)
(0212) {
_SPIRAM_ReadArray:
  b                    --> X+4
  loAddr               --> X+3
  hiAddr               --> X+2
  i                    --> X+0
  count                --> X-8
  in                   --> X-7
  addr                 --> X-5
    1A91: 10       PUSH  X
    1A92: 4F       MOV   X,SP
    1A93: 38 05    ADD   SP,0x5
(0213) 	BYTE hiAddr;
(0214) 	BYTE loAddr;
(0215) 	BYTE b;
(0216) 	int i;
(0217) 	// If some clown tries to write 0 bytes, just return.
(0218) 	// XXX - Always beware of clowns!
(0219) 	if (!count)
    1A95: 3D F8 00 CMP   [X-8],0x0
    1A98: B0 03    JNZ   0x1A9C
(0220) 		return;
    1A9A: 80 D4    JMP   0x1B6F
(0221) 	// Break the SRAM word address into two bytes
(0222) 	hiAddr = (BYTE)((addr >> 8) & 0x00ff);
    1A9C: 62 D0 00 MOV   REG[0xD0],0x0
    1A9F: 52 FB    MOV   A,[X-5]
    1AA1: 54 02    MOV   [X+2],A
(0223) 	loAddr = (BYTE)(addr & 0x00ff);
    1AA3: 52 FC    MOV   A,[X-4]
    1AA5: 54 03    MOV   [X+3],A
(0224) 	M8C_DisableGInt;
    1AA7: 70 FE    AND   F,0xFE
(0225) 	
(0226) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));	
    1AA9: 10       PUSH  X
    1AAA: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    1AAD: 20       POP   X
    1AAE: 62 D0 00 MOV   REG[0xD0],0x0
    1AB1: 53 61    MOV   [__r0],A
    1AB3: 47 61 10 TST   [__r0],0x10
    1AB6: AF F2    JZ    0x1AA9
(0227) 	nCS_LOW;
    1AB8: 41 04 FB AND   REG[0x4],0xFB
(0228) 	SPIM_SendTxData(SPIRAM_READ);
    1ABB: 10       PUSH  X
    1ABC: 50 03    MOV   A,0x3
    1ABE: 7C 08 A0 LCALL _SPIM_SendTxData
    1AC1: 20       POP   X
(0229) 	
(0230) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1AC2: 10       PUSH  X
    1AC3: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    1AC6: 20       POP   X
    1AC7: 62 D0 00 MOV   REG[0xD0],0x0
    1ACA: 53 61    MOV   [__r0],A
    1ACC: 47 61 10 TST   [__r0],0x10
    1ACF: AF F2    JZ    0x1AC2
(0231) 	SPIM_SendTxData(hiAddr);
    1AD1: 10       PUSH  X
    1AD2: 52 02    MOV   A,[X+2]
    1AD4: 7C 08 A0 LCALL _SPIM_SendTxData
    1AD7: 20       POP   X
(0232) 
(0233) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    1AD8: 10       PUSH  X
    1AD9: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    1ADC: 20       POP   X
    1ADD: 62 D0 00 MOV   REG[0xD0],0x0
    1AE0: 53 61    MOV   [__r0],A
    1AE2: 47 61 10 TST   [__r0],0x10
    1AE5: AF F2    JZ    0x1AD8
(0234) 	SPIM_SendTxData(loAddr);
    1AE7: 10       PUSH  X
    1AE8: 52 03    MOV   A,[X+3]
    1AEA: 7C 08 A0 LCALL _SPIM_SendTxData
    1AED: 20       POP   X
(0235) 	
(0236) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));	
    1AEE: 10       PUSH  X
    1AEF: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    1AF2: 20       POP   X
    1AF3: 62 D0 00 MOV   REG[0xD0],0x0
    1AF6: 53 61    MOV   [__r0],A
    1AF8: 47 61 10 TST   [__r0],0x10
    1AFB: AF F2    JZ    0x1AEE
(0237)     SPIM_SendTxData(SPIRAM_DUMMY_BYTE);
    1AFD: 10       PUSH  X
    1AFE: 50 00    MOV   A,0x0
    1B00: 7C 08 A0 LCALL _SPIM_SendTxData
    1B03: 20       POP   X
(0238) 	
(0239) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1B04: 10       PUSH  X
    1B05: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    1B08: 20       POP   X
    1B09: 62 D0 00 MOV   REG[0xD0],0x0
    1B0C: 53 61    MOV   [__r0],A
    1B0E: 47 61 20 TST   [__r0],0x20
    1B11: AF F2    JZ    0x1B04
(0240) 	SPIM_bReadRxData();		
    1B13: 10       PUSH  X
    1B14: 7C 08 A3 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|bSPIM_ReadRxData|_SPIM_bReadRxData
    1B17: 20       POP   X
    1B18: 62 D0 00 MOV   REG[0xD0],0x0
(0241) 	
(0242) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_SPI_COMPLETE));
    1B1B: 10       PUSH  X
    1B1C: 7C 08 A6 LCALL _SPIM_bReadStatus|bSPIM_ReadStatus|_bSPIM_ReadStatus
    1B1F: 20       POP   X
    1B20: 62 D0 00 MOV   REG[0xD0],0x0
    1B23: 53 61    MOV   [__r0],A
    1B25: 47 61 20 TST   [__r0],0x20
    1B28: AF F2    JZ    0x1B1B
(0243) 	
(0244) 	for (i = 0; i < count; i++ ){
    1B2A: 56 01 00 MOV   [X+1],0x0
    1B2D: 56 00 00 MOV   [X+0],0x0
    1B30: 80 20    JMP   0x1B51
(0245) 	in[i] = SPIM_bReadRxData();
    1B32: 10       PUSH  X
    1B33: 7C 08 A3 LCALL _bSPIM_ReadRxData|SPIM_bReadRxData|bSPIM_ReadRxData|_SPIM_bReadRxData
    1B36: 20       POP   X
    1B37: 62 D0 00 MOV   REG[0xD0],0x0
    1B3A: 53 61    MOV   [__r0],A
    1B3C: 52 01    MOV   A,[X+1]
    1B3E: 03 FA    ADD   A,[X-6]
    1B40: 53 5F    MOV   [__r3],A
    1B42: 52 00    MOV   A,[X+0]
    1B44: 0B F9    ADC   A,[X-7]
    1B46: 60 D5    MOV   REG[0xD5],A
    1B48: 51 61    MOV   A,[__r0]
    1B4A: 3F 5F    MVI   [__r3],A
(0246) 	}
    1B4C: 77 01    INC   [X+1]
    1B4E: 0F 00 00 ADC   [X+0],0x0
    1B51: 62 D0 00 MOV   REG[0xD0],0x0
    1B54: 52 F8    MOV   A,[X-8]
    1B56: 53 60    MOV   [__r1],A
    1B58: 52 01    MOV   A,[X+1]
    1B5A: 12 60    SUB   A,[__r1]
    1B5C: 50 00    MOV   A,0x0
    1B5E: 31 80    XOR   A,0x80
    1B60: 53 5E    MOV   [__rX],A
    1B62: 52 00    MOV   A,[X+0]
    1B64: 31 80    XOR   A,0x80
    1B66: 1A 5E    SBB   A,[__rX]
    1B68: CF C9    JC    0x1B32
(0247) 
(0248) 	nCS_HIGH;
    1B6A: 43 04 04 OR    REG[0x4],0x4
(0249) 	
(0250) 	M8C_EnableGInt;
    1B6D: 71 01    OR    F,0x1
    1B6F: 38 FB    ADD   SP,0xFB
    1B71: 20       POP   X
    1B72: 7F       RET   
