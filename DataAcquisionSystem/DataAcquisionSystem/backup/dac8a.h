//*****************************************************************************
//*****************************************************************************
//  FILENAME: DAC8A.h
//   Version: 2.2, Updated on 2015/3/4 at 22:25:12
//  Generated by PSoC Designer 5.4.3191
//
//  DESCRIPTION:  DAC8 User Module C language interface file.
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef DAC8A_INCLUDE
#define DAC8A_INCLUDE

#include <m8c.h>

//-------------------------------------------------
// Defines for DAC8A API's.
//-------------------------------------------------
// Power Setting Defines
#define DAC8A_OFF                 0
#define DAC8A_LOWPOWER            1
#define DAC8A_MEDPOWER            2
#define DAC8A_HIGHPOWER           3
#define DAC8A_FULLPOWER           3

// Define constants for declaring function prototypes based on DataFormat parameter
#define DAC8A_OffsetBinary            0x04
#define DAC8A_TwosComplement          0x02
#define DAC8A_SignAndMagnitude        0x01
#define DAC8A_RawRegister             0x00
#define DAC8A_DATAFORMAT          0x3
#define DAC8A_OFFSETBINARY        DAC8A_DATAFORMAT & DAC8A_OffsetBinary
#define DAC8A_TWOSCOMPLEMENT      DAC8A_DATAFORMAT & DAC8A_TwosComplement
#define DAC8A_SIGNANDMAGNITUDE    DAC8A_DATAFORMAT & DAC8A_SignAndMagnitude

// Declare function fastcall16 pragmas
#pragma fastcall16 DAC8A_Start
#pragma fastcall16 DAC8A_SetPower
#pragma fastcall16 DAC8A_Stop

//-------------------------------------------------
// Prototypes of the DAC8A API.
//-------------------------------------------------
extern void  DAC8A_Start(BYTE bPowerSetting);
extern void  DAC8A_SetPower(BYTE bPowerSetting);
extern void  DAC8A_Stop(void);

// Declare overloaded functions based on DataForamt parameter selected
#if DAC8A_OFFSETBINARY
   #pragma fastcall16 DAC8A_WriteBlind
   #pragma fastcall16 DAC8A_WriteStall
   extern void  DAC8A_WriteBlind(BYTE bOutputValue);
   extern void  DAC8A_WriteStall(BYTE bOutputValue);
#else
   #if DAC8A_TWOSCOMPLEMENT
      #pragma fastcall16 DAC8A_WriteBlind
      #pragma fastcall16 DAC8A_WriteStall
      extern void  DAC8A_WriteBlind(CHAR cOutputValue);
      extern void  DAC8A_WriteStall(CHAR cOutputValue);
   #else    //DAC8A_SIGNANDMAGNITUDE
      #pragma fastcall16 DAC8A_WriteBlind2B
      #pragma fastcall16 DAC8A_WriteStall2B
      extern void  DAC8A_WriteBlind2B(BYTE bLSB, BYTE bMSB);
      extern void  DAC8A_WriteStall2B(BYTE bLSB, BYTE bMSB);
   #endif
#endif

//-------------------------------------------------
// Hardware Register Definitions
//-------------------------------------------------

#pragma ioport  DAC8A_LSB_CR0:  0x084                      // LSB Analog control register 0
BYTE            DAC8A_LSB_CR0;
#pragma ioport  DAC8A_LSB_CR1:  0x085                      // LSB Analog control register 1
BYTE            DAC8A_LSB_CR1;
#pragma ioport  DAC8A_LSB_CR2:  0x086                      // LSB Analog control register 2
BYTE            DAC8A_LSB_CR2;
#pragma ioport  DAC8A_LSB_CR3:  0x087                      // LSB Analog control register 3
BYTE            DAC8A_LSB_CR3;

#pragma ioport  DAC8A_MSB_CR0:  0x094                      // MSB Analog control register 0
BYTE            DAC8A_MSB_CR0;
#pragma ioport  DAC8A_MSB_CR1:  0x095                      // MSB Analog control register 1
BYTE            DAC8A_MSB_CR1;
#pragma ioport  DAC8A_MSB_CR2:  0x096                      // MSB Analog control register 2
BYTE            DAC8A_MSB_CR2;
#pragma ioport  DAC8A_MSB_CR3:  0x097                      // MSB Analog control register 3
BYTE            DAC8A_MSB_CR3;

#endif
// end of file DAC8A.h
