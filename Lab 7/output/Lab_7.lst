FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 14 FF LJMP  _T_INT             (0145)     ljmp _T_INT
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 06 D8 LJMP  _UART_TX_ISR       (0157)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 06 D9 LJMP  _UART_RX_ISR       (0161)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
0030: 7D 13 70 LJMP  _TempReset         (0165)     ljmp _TempReset
0033: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0034: 7D 13 70 LJMP  _TempReset         (0169)     ljmp _TempReset
0037: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
0038: 7D 13 70 LJMP  _TempReset         (0173)     ljmp _TempReset
003B: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
0060: 7D 0C 00 LJMP  _I2CHW_ISR         (0213)     ljmp	_I2CHW_ISR
0063: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [configOutP+3],0x0 (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [configOutP+4],0x0 (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 06 6D LCALL 0x066D             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 05    MOV   A,0x5              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 66    MOV   X,0x66             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 F4    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 F4    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 F4    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 F3    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F F4    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 F4 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A F3    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 F3    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F F4    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 F4 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A F3    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0133: 62 E0 03 MOV   REG[0xE0],0x3      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013E: 7C 0E 54 LCALL __UserModules_end|_main|__text_start|_main(0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0141: 8F FF    JMP   0x0141             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0143: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0145: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
0568: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_lab5_Bank1
                                        (0019) export LoadConfigTBL_lab5_Bank0
                                        (0020) export LoadConfigTBL_lab5_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_lab5_Bank0:
                                        (0023) ;  Instance name Counter24, User Module Counter24
                                        (0024) ;       Instance name Counter24, Block Name CNTR24_ISB(DBB11)
                                        (0025) 	db		37h, 00h		;Counter24_CONTROL_ISB_REG(DBB11CR0)
                                        (0026) 	db		35h, 2ch		;Counter24_PERIOD_ISB_REG(DBB11DR1)
                                        (0027) 	db		36h, 2ch		;Counter24_COMPARE_ISB_REG(DBB11DR2)
                                        (0028) ;       Instance name Counter24, Block Name CNTR24_LSB(DBB10)
                                        (0029) 	db		33h, 00h		;Counter24_CONTROL_LSB_REG(DBB10CR0)
                                        (0030) 	db		31h, 7bh		;Counter24_PERIOD_LSB_REG(DBB10DR1)
                                        (0031) 	db		32h, 7ah		;Counter24_COMPARE_LSB_REG(DBB10DR2)
                                        (0032) ;       Instance name Counter24, Block Name CNTR24_MSB(DCB12)
                                        (0033) 	db		3bh, 00h		;Counter24_CONTROL_MSB_REG(DCB12CR0)
                                        (0034) 	db		39h, 01h		;Counter24_PERIOD_MSB_REG(DCB12DR1)
                                        (0035) 	db		3ah, 01h		;Counter24_COMPARE_MSB_REG(DCB12DR2)
                                        (0036) ;  Instance name I2CHW, User Module I2CHW
                                        (0037) ;  Instance name LCD, User Module LCD
                                        (0038) ;  Instance name UART, User Module UART
                                        (0039) ;       Instance name UART, Block Name RX(DCB03)
                                        (0040) 	db		2fh, 00h		;UART_RX_CONTROL_REG(DCB03CR0)
                                        (0041) 	db		2dh, 00h		;UART_(DCB03DR1)
                                        (0042) 	db		2eh, 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0043) ;       Instance name UART, Block Name TX(DCB02)
                                        (0044) 	db		2bh, 00h		;UART_TX_CONTROL_REG(DCB02CR0)
                                        (0045) 	db		29h, 00h		;UART_TX_BUFFER_REG (DCB02DR1)
                                        (0046) 	db		2ah, 00h		;UART_(DCB02DR2)
                                        (0047) ;  Global Register values Bank 0
                                        (0048) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0049) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0050) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0051) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0052) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0053) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0054) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0055) 	db		b0h, 30h		; Row_0_InputMux register (RDI0RI)
                                        (0056) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0057) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0058) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0059) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0060) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0061) 	db		b6h, 28h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0062) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0063) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0064) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0065) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0066) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0067) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0068) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0069) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0070) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0071) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0072) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0073) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0074) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0075) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0076) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0077) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0078) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0079) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0080) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0081) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0082) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0083) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0084) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0085) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0086) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0087) 	db		ffh
                                        (0088) LoadConfigTBL_lab5_Bank1:
                                        (0089) ;  Instance name Counter24, User Module Counter24
                                        (0090) ;       Instance name Counter24, Block Name CNTR24_ISB(DBB11)
                                        (0091) 	db		34h, 11h		;Counter24_FUNC_ISB_REG(DBB11FN)
                                        (0092) 	db		35h, 31h		;Counter24_INPUT_ISB_REG(DBB11IN)
                                        (0093) 	db		36h, 40h		;Counter24_OUTPUT_ISB_REG(DBB11OU)
                                        (0094) ;       Instance name Counter24, Block Name CNTR24_LSB(DBB10)
                                        (0095) 	db		30h, 11h		;Counter24_FUNC_LSB_REG(DBB10FN)
                                        (0096) 	db		31h, 11h		;Counter24_INPUT_LSB_REG(DBB10IN)
                                        (0097) 	db		32h, 40h		;Counter24_OUTPUT_LSB_REG(DBB10OU)
                                        (0098) ;       Instance name Counter24, Block Name CNTR24_MSB(DCB12)
                                        (0099) 	db		38h, 31h		;Counter24_FUNC_MSB_REG(DCB12FN)
                                        (0100) 	db		39h, 31h		;Counter24_INPUT_MSB_REG(DCB12IN)
                                        (0101) 	db		3ah, 40h		;Counter24_OUTPUT_MSB_REG(DCB12OU)
                                        (0102) ;  Instance name I2CHW, User Module I2CHW
                                        (0103) ;  Instance name LCD, User Module LCD
                                        (0104) ;  Instance name UART, User Module UART
                                        (0105) ;       Instance name UART, Block Name RX(DCB03)
                                        (0106) 	db		2ch, 05h		;UART_RX_FUNC_REG   (DCB03FN)
                                        (0107) 	db		2dh, e1h		;UART_RX_INPUT_REG  (DCB03IN)
                                        (0108) 	db		2eh, 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0109) ;       Instance name UART, Block Name TX(DCB02)
                                        (0110) 	db		28h, 1dh		;UART_TX_FUNC_REG   (DCB02FN)
                                        (0111) 	db		29h, 01h		;UART_TX_INPUT_REG  (DCB02IN)
                                        (0112) 	db		2ah, 47h		;UART_TX_OUTPUT_REG (DCB02OU)
                                        (0113) ;  Global Register values Bank 1
                                        (0114) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0115) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0116) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0117) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0118) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0119) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0120) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0121) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0122) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0123) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0124) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0125) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0126) 	db		e1h, 72h		; OscillatorControl_1 register (OSC_CR1)
                                        (0127) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0128) 	db		dfh, 26h		; OscillatorControl_3 register (OSC_CR3)
                                        (0129) 	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
                                        (0130) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0131) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0132) 	db		ffh
                                        (0133) AREA psoc_config(rom, rel)
                                        (0134) LoadConfigTBL_lab5_Ordered:
                                        (0135) ;  Ordered Global Register values
                                        (0136) 	M8C_SetBank0
056A: 62 00 00 MOV   REG[0x0],0x0       (0137) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
056D: 71 10    OR    F,0x10             
                                        (0138) 	M8C_SetBank1
056F: 62 00 00 MOV   REG[0x0],0x0       (0139) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
0572: 62 01 FF MOV   REG[0x1],0xFF      (0140) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0575: 70 EF    AND   F,0xEF             
                                        (0141) 	M8C_SetBank0
0577: 62 03 7F MOV   REG[0x3],0x7F      (0142) 	mov	reg[03h], 7fh		; Port_0_DriveMode_2 register (PRT0DM2)
057A: 62 02 00 MOV   REG[0x2],0x0       (0143) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
057D: 71 10    OR    F,0x10             
                                        (0144) 	M8C_SetBank1
057F: 62 02 80 MOV   REG[0x2],0x80      (0145) 	mov	reg[02h], 80h		; Port_0_IntCtrl_0 register (PRT0IC0)
0582: 62 03 80 MOV   REG[0x3],0x80      (0146) 	mov	reg[03h], 80h		; Port_0_IntCtrl_1 register (PRT0IC1)
0585: 70 EF    AND   F,0xEF             
                                        (0147) 	M8C_SetBank0
0587: 62 01 80 MOV   REG[0x1],0x80      (0148) 	mov	reg[01h], 80h		; Port_0_IntEn register (PRT0IE)
058A: 62 04 A0 MOV   REG[0x4],0xA0      (0149) 	mov	reg[04h], a0h		; Port_1_Data register (PRT1DR)
058D: 71 10    OR    F,0x10             
                                        (0150) 	M8C_SetBank1
058F: 62 04 AA MOV   REG[0x4],0xAA      (0151) 	mov	reg[04h], aah		; Port_1_DriveMode_0 register (PRT1DM0)
0592: 62 05 F5 MOV   REG[0x5],0xF5      (0152) 	mov	reg[05h], f5h		; Port_1_DriveMode_1 register (PRT1DM1)
0595: 70 EF    AND   F,0xEF             
                                        (0153) 	M8C_SetBank0
0597: 62 07 B5 MOV   REG[0x7],0xB5      (0154) 	mov	reg[07h], b5h		; Port_1_DriveMode_2 register (PRT1DM2)
059A: 62 06 40 MOV   REG[0x6],0x40      (0155) 	mov	reg[06h], 40h		; Port_1_GlobalSelect register (PRT1GS)
059D: 71 10    OR    F,0x10             
                                        (0156) 	M8C_SetBank1
059F: 62 06 00 MOV   REG[0x6],0x0       (0157) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
05A2: 62 07 00 MOV   REG[0x7],0x0       (0158) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
05A5: 70 EF    AND   F,0xEF             
                                        (0159) 	M8C_SetBank0
05A7: 62 05 00 MOV   REG[0x5],0x0       (0160) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
05AA: 62 08 00 MOV   REG[0x8],0x0       (0161) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
05AD: 71 10    OR    F,0x10             
                                        (0162) 	M8C_SetBank1
05AF: 62 08 FF MOV   REG[0x8],0xFF      (0163) 	mov	reg[08h], ffh		; Port_2_DriveMode_0 register (PRT2DM0)
05B2: 62 09 00 MOV   REG[0x9],0x0       (0164) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
05B5: 70 EF    AND   F,0xEF             
                                        (0165) 	M8C_SetBank0
05B7: 62 0B 00 MOV   REG[0xB],0x0       (0166) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
05BA: 62 0A 80 MOV   REG[0xA],0x80      (0167) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
05BD: 71 10    OR    F,0x10             
                                        (0168) 	M8C_SetBank1
05BF: 62 0A 00 MOV   REG[0xA],0x0       (0169) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
05C2: 62 0B 00 MOV   REG[0xB],0x0       (0170) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
05C5: 70 EF    AND   F,0xEF             
                                        (0171) 	M8C_SetBank0
05C7: 62 09 00 MOV   REG[0x9],0x0       (0172) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
05CA: 62 0C 00 MOV   REG[0xC],0x0       (0173) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
05CD: 71 10    OR    F,0x10             
                                        (0174) 	M8C_SetBank1
05CF: 62 0C 00 MOV   REG[0xC],0x0       (0175) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
05D2: 62 0D 00 MOV   REG[0xD],0x0       (0176) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
05D5: 70 EF    AND   F,0xEF             
                                        (0177) 	M8C_SetBank0
05D7: 62 0F 00 MOV   REG[0xF],0x0       (0178) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
05DA: 62 0E 00 MOV   REG[0xE],0x0       (0179) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
05DD: 71 10    OR    F,0x10             
                                        (0180) 	M8C_SetBank1
05DF: 62 0E 00 MOV   REG[0xE],0x0       (0181) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
05E2: 62 0F 00 MOV   REG[0xF],0x0       (0182) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
05E5: 70 EF    AND   F,0xEF             
                                        (0183) 	M8C_SetBank0
05E7: 62 0D 00 MOV   REG[0xD],0x0       (0184) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
05EA: 62 10 00 MOV   REG[0x10],0x0      (0185) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
05ED: 71 10    OR    F,0x10             
                                        (0186) 	M8C_SetBank1
05EF: 62 10 00 MOV   REG[0x10],0x0      (0187) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
05F2: 62 11 00 MOV   REG[0x11],0x0      (0188) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
05F5: 70 EF    AND   F,0xEF             
                                        (0189) 	M8C_SetBank0
05F7: 62 13 00 MOV   REG[0x13],0x0      (0190) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
05FA: 62 12 00 MOV   REG[0x12],0x0      (0191) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
05FD: 71 10    OR    F,0x10             
                                        (0192) 	M8C_SetBank1
05FF: 62 12 00 MOV   REG[0x12],0x0      (0193) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0602: 62 13 00 MOV   REG[0x13],0x0      (0194) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0605: 70 EF    AND   F,0xEF             
                                        (0195) 	M8C_SetBank0
0607: 62 11 00 MOV   REG[0x11],0x0      (0196) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
060A: 62 14 00 MOV   REG[0x14],0x0      (0197) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
060D: 71 10    OR    F,0x10             
                                        (0198) 	M8C_SetBank1
060F: 62 14 00 MOV   REG[0x14],0x0      (0199) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0612: 62 15 00 MOV   REG[0x15],0x0      (0200) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0615: 70 EF    AND   F,0xEF             
                                        (0201) 	M8C_SetBank0
0617: 62 17 00 MOV   REG[0x17],0x0      (0202) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
061A: 62 16 00 MOV   REG[0x16],0x0      (0203) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
061D: 71 10    OR    F,0x10             
                                        (0204) 	M8C_SetBank1
061F: 62 16 00 MOV   REG[0x16],0x0      (0205) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0622: 62 17 00 MOV   REG[0x17],0x0      (0206) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0625: 70 EF    AND   F,0xEF             
                                        (0207) 	M8C_SetBank0
0627: 62 15 00 MOV   REG[0x15],0x0      (0208) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
062A: 62 18 00 MOV   REG[0x18],0x0      (0209) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
062D: 71 10    OR    F,0x10             
                                        (0210) 	M8C_SetBank1
062F: 62 18 00 MOV   REG[0x18],0x0      (0211) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0632: 62 19 00 MOV   REG[0x19],0x0      (0212) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0635: 70 EF    AND   F,0xEF             
                                        (0213) 	M8C_SetBank0
0637: 62 1B 00 MOV   REG[0x1B],0x0      (0214) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
063A: 62 1A 00 MOV   REG[0x1A],0x0      (0215) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
063D: 71 10    OR    F,0x10             
                                        (0216) 	M8C_SetBank1
063F: 62 1A 00 MOV   REG[0x1A],0x0      (0217) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0642: 62 1B 00 MOV   REG[0x1B],0x0      (0218) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0645: 70 EF    AND   F,0xEF             
                                        (0219) 	M8C_SetBank0
0647: 62 19 00 MOV   REG[0x19],0x0      (0220) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
064A: 62 1C 00 MOV   REG[0x1C],0x0      (0221) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
064D: 71 10    OR    F,0x10             
                                        (0222) 	M8C_SetBank1
064F: 62 1C 00 MOV   REG[0x1C],0x0      (0223) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0652: 62 1D 00 MOV   REG[0x1D],0x0      (0224) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0655: 70 EF    AND   F,0xEF             
                                        (0225) 	M8C_SetBank0
0657: 62 1F 00 MOV   REG[0x1F],0x0      (0226) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
065A: 62 1E 00 MOV   REG[0x1E],0x0      (0227) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
065D: 71 10    OR    F,0x10             
                                        (0228) 	M8C_SetBank1
065F: 62 1E 00 MOV   REG[0x1E],0x0      (0229) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0662: 62 1F 00 MOV   REG[0x1F],0x0      (0230) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0665: 70 EF    AND   F,0xEF             
                                        (0231) 	M8C_SetBank0
0667: 62 1D 00 MOV   REG[0x1D],0x0      (0232) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
066A: 70 EF    AND   F,0xEF             
                                        (0233) 	M8C_SetBank0
066C: 7F       RET                      (0234) 	ret
                                        (0235) 
                                        (0236) 
                                        (0237) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_lab5
                                        (0026) export _LoadConfig_lab5
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
066D: 55 00 00 MOV   [0x0],0x0          (0065) 	mov		[Port_2_Data_SHADE], 0h
0670: 55 01 FF MOV   [0x1],0xFF         (0066) 	mov		[Port_2_DriveMode_0_SHADE], ffh
0673: 55 02 00 MOV   [0x2],0x0          (0067) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0068) 
0676: 7C 06 7D LCALL 0x067D             (0069) 	lcall	LoadConfig_lab5
0679: 7C 05 68 LCALL 0x0568             (0070) 	lcall	LoadConfigTBL_lab5_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
067C: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration lab5
                                        (0078) ;
                                        (0079) ;    Load configuration registers for lab5.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_lab5:
                                        (0096)  LoadConfig_lab5:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
067D: 10       PUSH  X                  (0099) 	push	x
067E: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
0680: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
0682: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
0683: 50 04    MOV   A,0x4              (0104)     mov     A, >LoadConfigTBL_lab5_Bank0
0685: 57 B6    MOV   X,0xB6             (0105)     mov     X, <LoadConfigTBL_lab5_Bank0
0687: 7C 06 98 LCALL 0x0698             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
068A: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
068C: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
068D: 50 05    MOV   A,0x5              (0111)     mov     A, >LoadConfigTBL_lab5_Bank1
068F: 57 23    MOV   X,0x23             (0112)     mov     X, <LoadConfigTBL_lab5_Bank1
0691: 7C 06 98 LCALL 0x0698             (0113)     lcall   LoadConfig              ; Load the bank 1 values
0694: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
0696: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
0697: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
0698: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
069A: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
069B: 08       PUSH  A                  (0143)     push    A
069C: 4F       MOV   X,SP               (0144)     mov     X, SP
069D: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
06A0: D0 04    JNC   0x06A5             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
06A2: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
06A5: 18       POP   A                  (0149)     pop     A
06A6: 20       POP   X                  (0150)     pop     X
06A7: 70 EF    AND   F,0xEF             
06A9: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
06AC: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
06AD: 08       PUSH  A                  (0156)     push    A
06AE: 28       ROMX                     (0157)     romx                            ; Load register address from table
06AF: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
06B1: A0 1F    JZ    0x06D1             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
06B3: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
06B4: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
06B7: A0 03    JZ    0x06BB             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
06B9: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
06BB: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
06BD: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
06BE: 20       POP   X                  (0167)     pop     X
06BF: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
06C0: 09 00    ADC   A,0x0              (0169)     adc     A, 0
06C2: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
06C3: 08       PUSH  A                  (0171)     push    A
06C4: 28       ROMX                     (0172)     romx                            ; load config data from the table
06C5: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
06C6: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
06C8: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
06CA: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
06CB: 20       POP   X                  (0177)     pop     X
06CC: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
06CD: 09 00    ADC   A,0x0              (0179)     adc     A, 0
06CF: 8F D7    JMP   0x06A7             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
06D1: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
06D3: 70 3F    AND   F,0x3F             
06D5: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
06D7: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2014/7/14 at 8:16:55
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
06D8: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
06D9: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
06DA: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
06DD: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2014/7/14 at 8:16:55
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
06E0: 7F       RET                      (0182)    ret
06E1: 41 E1 FB AND   REG[0xE1],0xFB     
06E4: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
06E7: 7F       RET                      (0214)    ret
06E8: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
06EA: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
06EC: A0 07    JZ    0x06F4             (0249)    jz    .SetModeRegEmpty
06EE: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
06F1: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
06F3: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
06F4: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
06F7: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
06F9: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
06FA: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
06FC: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
06FE: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0700: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0701: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
0704: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
0707: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0708: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
070A: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
070B: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
070D: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
070E: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0710: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0711: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
0713: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
0714: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
0716: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
0718: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
071A: A0 06    JZ    0x0721             (0492)    jz   .SetTxCmpMode
                                        (0493) 
071C: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
071F: 80 04    JMP   0x0724             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0721: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
0724: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
0726: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
0727: 08       PUSH  A                  (0536)    push A
0728: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
072A: A0 06    JZ    0x0731             (0538)    jz   .DisRxInt
072C: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
072F: 80 04    JMP   0x0734             (0541)    jmp  .CheckTxInt
0731: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
0734: 18       POP   A                  (0547)    pop  A
0735: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
0737: A0 06    JZ    0x073E             (0549)    jz   .DisTxInt
0739: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
073C: 80 04    JMP   0x0741             (0552)    jmp  .End_IntCntl
073E: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
0741: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0752: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0753: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
0754: 67       ASR   A                  (0603)    asr   A
0755: 67       ASR   A                  (0604)    asr   A
0756: 67       ASR   A                  (0605)    asr   A
0757: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
0759: FF E7    INDEX 0x0742             (0607)    index UART_HEX_STR                  ; Get Hex value
075B: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
075D: 18       POP   A                  (0609)    pop   A                             ; Restore value
075E: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
0760: FF E0    INDEX 0x0742             (0611)    index UART_HEX_STR                  ; Get Hex value
0762: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
0764: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
0765: 4B       SWAP  A,X                (0645)    swap  A,X
0766: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
0768: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
0769: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
076B: 7F       RET                      (0650)    ret
076C: 49 2B 10 TST   REG[0x2B],0x10     
076F: AF FC    JZ    _UART_PutChar      
0771: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0773: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
0774: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
0777: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
0779: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
077B: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
077C: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
077E: 08       PUSH  A                  (0756)    push A
077F: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0781: B0 04    JNZ   0x0786             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0783: 18       POP   A                  (0759)    pop  A
0784: 80 0B    JMP   0x0790             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
0786: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
0788: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
0789: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
078A: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
078C: B0 03    JNZ   0x0790             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
078E: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
078F: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
0790: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
0792: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0793: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0795: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
0797: 08       PUSH  A                  (0819)    push A
0798: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
079A: B0 07    JNZ   0x07A2             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
079C: 18       POP   A                  (0822)    pop  A
079D: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
079F: 4B       SWAP  A,X                (0824)    swap A,X
07A0: 80 07    JMP   0x07A8             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
07A2: 18       POP   A                  (0828)    pop  A
07A3: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
07A5: 4B       SWAP  A,X                (0830)    swap A,X
07A6: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
07A8: 7F       RET                      (0836)    ret
07A9: 70 BF    AND   F,0xBF             
07AB: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
07AD: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
07AF: A0 06    JZ    0x07B6             (0872)    jz    End_PutString                           ; Check for end of string
07B1: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
07B3: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
07B4: 8F F8    JMP   0x07AD             (0875)    jmp   .PutStringLoop                          ; Get next character
07B6: 70 3F    AND   F,0x3F             
07B8: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
07BA: 7F       RET                      (0879)    ret
07BB: 70 BF    AND   F,0xBF             
07BD: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
07C0: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
07C1: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
07C3: A0 1A    JZ    0x07DE             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
07C5: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
07C7: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
07C9: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
07CB: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
07CD: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
07CF: 49 2B 10 TST   REG[0x2B],0x10     
07D2: AF FC    JZ    0x07CF             
07D4: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
07D6: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
07D7: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
07DA: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
07DC: 8F E4    JMP   0x07C1             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
07DE: 70 3F    AND   F,0x3F             
07E0: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
07E2: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
07E3: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
07E4: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
07E7: B0 06    JNZ   0x07EE             (0980)    jnz   .CW_WRITEIT
07E9: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
07EC: A0 1D    JZ    0x080A             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
07EE: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
07EF: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
07F1: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
07F3: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
07F4: 49 2B 10 TST   REG[0x2B],0x10     
07F7: AF FC    JZ    0x07F4             
07F9: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
07FB: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
07FC: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
07FF: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
0802: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
0805: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
0808: 8F DB    JMP   0x07E4             (0995)    jmp   .CW_Loop
080A: 70 3F    AND   F,0x3F             
080C: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
080E: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
080F: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0810: 10       PUSH  X                  (1030)    push  X
0811: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
0812: A0 0B    JZ    0x081E             (1032)    jz    .End_CPutString
0814: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
0816: 20       POP   X                  (1034)    pop   X
0817: 18       POP   A                  (1035)    pop   A
0818: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0819: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
081B: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
081C: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
081E: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0820: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0821: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
0823: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
0825: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
0827: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0829: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2014/7/14 at 8:14:13
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
082A: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
082B: 10       PUSH  X                  (0209)     push  X
082C: 28       ROMX                     (0210)     romx                               ; Get character from ROM
082D: B0 04    JNZ   0x0832             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
082F: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0830: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0831: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0832: 90 44    CALL  _LCD_WriteData|_LCD_Write_Data|LCD_WriteData|LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
0834: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0835: 18       POP   A                  (0220)     pop   A
0836: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0837: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0839: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
083A: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
084C: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
084D: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
084E: 67       ASR   A                  (0262)     asr   A
084F: 67       ASR   A                  (0263)     asr   A
0850: 67       ASR   A                  (0264)     asr   A
0851: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0853: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
0855: 90 21    CALL  _LCD_WriteData|_LCD_Write_Data|LCD_WriteData|LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
0857: 18       POP   A                  (0268)     pop   A                            ; Restore value
0858: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
085A: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
085C: 90 1A    CALL  _LCD_WriteData|_LCD_Write_Data|LCD_WriteData|LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
085E: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
085F: 4B       SWAP  A,X                (0305)     swap  A,X
0860: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
0862: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0863: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0865: 7F       RET                      (0310)     ret
0866: 70 BF    AND   F,0xBF             
0868: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
086A: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
086C: A0 06    JZ    0x0873             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
086E: 90 08    CALL  _LCD_WriteData|_LCD_Write_Data|LCD_WriteData|LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
0870: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0871: 8F F8    JMP   0x086A             (0351)     jmp   .Loop_PrString               ; Go get next character
0873: 70 3F    AND   F,0x3F             
0875: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0877: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0878: 90 65    CALL  0x08DF             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
087A: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
087B: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
087C: 67       ASR   A                  (0390)     asr   A
087D: 67       ASR   A                  (0391)     asr   A
087E: 67       ASR   A                  (0392)     asr   A
087F: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0881: 90 3B    CALL  0x08BE             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0883: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0884: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0886: 40       NOP                      (0397)     nop
0887: 40       NOP                      (0398)     nop
0888: 40       NOP                      (0399)     nop
0889: 90 33    CALL  0x08BE             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
088B: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
088C: 90 51    CALL  0x08DF             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
088E: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
088F: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0890: 67       ASR   A                  (0436)     asr   A
0891: 67       ASR   A                  (0437)     asr   A
0892: 67       ASR   A                  (0438)     asr   A
0893: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0895: 90 09    CALL  0x08A0             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0897: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0898: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
089A: 40       NOP                      (0443)     nop
089B: 40       NOP                      (0444)     nop
089C: 40       NOP                      (0445)     nop
089D: 90 01    CALL  0x08A0             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
089F: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
08A0: 08       PUSH  A                  (0477)     push  A
08A1: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
08A4: 26 00 80 AND   [0x0],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
08A7: 51 00    MOV   A,[0x0]            (0480)     mov   A,[Port_2_Data_SHADE]
08A9: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
08AB: 18       POP   A                  (0483)     pop   A
08AC: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
08AE: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
08B0: 2A 00    OR    A,[0x0]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
08B2: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
08B4: 53 00    MOV   [0x0],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
08B6: 40       NOP                      (0489)     nop
08B7: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
08B9: 53 00    MOV   [0x0],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
08BB: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
08BD: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
08BE: 08       PUSH  A                  (0523)     push  A
08BF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
08C2: 26 00 80 AND   [0x0],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
08C5: 2E 00 20 OR    [0x0],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
08C8: 51 00    MOV   A,[0x0]            (0527)     mov   A,[Port_2_Data_SHADE]
08CA: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
08CC: 18       POP   A                  (0530)     pop   A
08CD: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
08CF: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
08D1: 2A 00    OR    A,[0x0]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
08D3: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
08D5: 53 00    MOV   [0x0],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
08D7: 40       NOP                      (0536)     NOP
08D8: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
08DA: 53 00    MOV   [0x0],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
08DC: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
08DE: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
08DF: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
08E0: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
08E3: 26 00 80 AND   [0x0],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
08E6: 51 00    MOV   A,[0x0]            (0574)     mov   A,[Port_2_Data_SHADE]
08E8: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
08EA: 26 01 F0 AND   [0x1],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
08ED: 51 01    MOV   A,[0x1]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
08EF: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
08F1: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
08F3: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
08F5: 2E 00 40 OR    [0x0],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
08F8: 51 00    MOV   A,[0x0]            (0584)     mov   A,[Port_2_Data_SHADE]
08FA: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
08FC: 40       NOP                      (0586)     NOP
                                        (0587) 
08FD: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
08FE: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0900: 2E 00 50 OR    [0x0],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0903: 51 00    MOV   A,[0x0]            (0593)     mov   A,[Port_2_Data_SHADE]
0905: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0907: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0908: 40       NOP                      (0597)     nop
0909: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
090B: 08       PUSH  A                  (0610)     push  A
090C: 26 00 C0 AND   [0x0],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
090F: 51 00    MOV   A,[0x0]            (0612)     mov   A,[Port_2_Data_SHADE]
0911: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0913: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0914: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0915: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0916: 2E 00 50 OR    [0x0],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0919: 51 00    MOV   A,[0x0]            (0620)     mov   A,[Port_2_Data_SHADE]
091B: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
091D: 40       NOP                      (0623)     nop
091E: 40       NOP                      (0624)     nop
                                        (0625) 
091F: 26 00 C0 AND   [0x0],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0922: 51 00    MOV   A,[0x0]            (0627)     mov   A,[Port_2_Data_SHADE]
0924: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0926: 18       POP   A                  (0630)     pop   A
0927: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0929: A0 04    JZ    0x092E             (0633)     jz    .UNLOCK
092B: 79       DEC   X                  (0634)     dec   X
092C: BF D3    JNZ   0x0900             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
092E: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
092F: 2E 01 7F OR    [0x1],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0932: 51 01    MOV   A,[0x1]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0934: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0936: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0938: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
093A: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
093B: 7F       RET                      (0646)     ret
093C: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
093F: 26 01 80 AND   [0x1],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0942: 2E 01 7F OR    [0x1],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0945: 26 02 80 AND   [0x2],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
0948: 51 01    MOV   A,[0x1]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
094A: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
094C: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
094E: 51 02    MOV   A,[0x2]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0950: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0952: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0954: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0956: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
0958: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
095A: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
095C: 50 03    MOV   A,0x3              (0701)     mov   A,03h
095E: 9F 40    CALL  0x08A0             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0960: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0962: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0964: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0966: 9F 38    CALL  0x08A0             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
0968: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
096A: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
096C: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
096E: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0970: 9F 2E    CALL  0x08A0             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0972: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0974: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0976: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0978: 9F 26    CALL  0x08A0             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
097A: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
097C: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
097E: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0980: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
0982: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0984: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0986: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0988: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
098A: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
098C: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
098E: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0990: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0992: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0994: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0996: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0998: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
099A: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
099C: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
099E: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
09A0: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
09A2: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
09A4: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
09A6: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
09A8: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
09AA: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
09AF: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
09B1: 10       PUSH  X                  (0791)     push  X                            ; Store COL
09B2: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
09B4: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
09B5: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
09B7: 20       POP   X                  (0795)     pop   X
                                        (0796) 
09B8: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
09BA: 70 3F    AND   F,0x3F             
09BC: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
09BE: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
09BF: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
09C1: 78       DEC   A                  (0828)     dec   A
09C2: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
09C4: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
09CD: 08       PUSH  A                  (0871)     push  A
09CE: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
09D0: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
09D2: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
09D4: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
09D6: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
09D8: D0 06    JNC   0x09DF             (0877)     jnc   .Delay50u_End
09DA: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
09DC: 78       DEC   A                  (0880)     dec   A                              ; [4]
09DD: BF FE    JNZ   0x09DC             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
09DF: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
09E0: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\i2chwrsrcinits.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHW.asm
                                        (0004) ;;  Version: 2.00, Updated on 2014/7/14 at 8:13:58
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) include "PSoCGPIOINT.inc"
                                        (0026) include "PSoCAPI.inc"
                                        (0027) 
                                        (0028) ;-----------------------------------------------
                                        (0029) ; include instance specific register definitions
                                        (0030) ;-----------------------------------------------
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ;  Global Symbols
                                        (0034) ;-----------------------------------------------
                                        (0035) ;-------------------------------------------------------------------
                                        (0036) ;  Declare the functions global for both assembler and C compiler.
                                        (0037) ;
                                        (0038) ;  Note that there are two names for each API. First name is
                                        (0039) ;  assembler reference. Name with underscore is name refence for
                                        (0040) ;  C compiler.  Calling function in C source code does not require
                                        (0041) ;  the underscore.
                                        (0042) ;-------------------------------------------------------------------
                                        (0043) 
                                        (0044) export    I2CHW_ResumeInt
                                        (0045) export   _I2CHW_ResumeInt
                                        (0046) export    I2CHW_EnableInt
                                        (0047) export   _I2CHW_EnableInt
                                        (0048) export    I2CHW_ClearInt
                                        (0049) export   _I2CHW_ClearInt
                                        (0050) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0051) export    I2CHW_EnableSlave
                                        (0052) export   _I2CHW_EnableSlave
                                        (0053) ENDIF
                                        (0054) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0055) export    I2CHW_EnableMstr
                                        (0056) export   _I2CHW_EnableMstr
                                        (0057) ENDIF
                                        (0058) export    I2CHW_Start
                                        (0059) export   _I2CHW_Start
                                        (0060) export    I2CHW_DisableInt
                                        (0061) export   _I2CHW_DisableInt
                                        (0062) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0063) export    I2CHW_DisableSlave
                                        (0064) export   _I2CHW_DisableSlave
                                        (0065) ENDIF
                                        (0066) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0067) export    I2CHW_DisableMstr
                                        (0068) export   _I2CHW_DisableMstr
                                        (0069) ENDIF
                                        (0070) export    I2CHW_Stop
                                        (0071) export   _I2CHW_Stop
                                        (0072) 
                                        (0073) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0074)  IF (I2CHW_CY8C22x45)
                                        (0075) export    I2CHW_EnableHWAddrCheck
                                        (0076) export   _I2CHW_EnableHWAddrCheck
                                        (0077) export    I2CHW_DisableHWAddrCheck
                                        (0078) export   _I2CHW_DisableHWAddrCheck
                                        (0079)  ENDIF
                                        (0080) ENDIF
                                        (0081) 
                                        (0082) AREA UserModules (ROM, REL)
                                        (0083) 
                                        (0084) .SECTION
                                        (0085) 
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;  FUNCTION NAME: I2CHW_Start
                                        (0088) ;
                                        (0089) ;  DESCRIPTION:
                                        (0090) ;   Initialize the I2CHW I2C bus interface.
                                        (0091) ;
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;
                                        (0094) ;  ARGUMENTS:
                                        (0095) ;
                                        (0096) ;  RETURNS: none
                                        (0097) ;
                                        (0098) ;  SIDE EFFECTS:
                                        (0099) ;    The A and X registers may be modified by this or future implementations
                                        (0100) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0101) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0102) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0103) ;    functions.
                                        (0104) ;          
                                        (0105)  I2CHW_Start:
                                        (0106) _I2CHW_Start:
                                        (0107)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0108) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0109)  IF (I2CHW_CY8C22x45)
                                        (0110)    M8C_SetBank1
                                        (0111)    mov   reg[I2CHW_ADDR], I2CHW_SLAVE_ADDR;I2CHW_HW_ADDR_EN
                                        (0112)    M8C_SetBank0
                                        (0113)  ENDIF
                                        (0114) ENDIF
                                        (0115)     RAM_EPILOGUE RAM_USE_CLASS_1
09E1: 7F       RET                      (0116)     ret
                                        (0117) .ENDSECTION
                                        (0118) 
                                        (0119) .SECTION
                                        (0120) ;-----------------------------------------------------------------------------
                                        (0121) ;  FUNCTION NAME: I2CHW_ResumeInt
                                        (0122) ;
                                        (0123) ;  DESCRIPTION:
                                        (0124) ;     reEnables SDA interrupt allowing start condition detection. 
                                        (0125) ;     Skips clearing INT_CLR3 by entering the EnableInt at ResumeIntEntry:.
                                        (0126) ;     Remember to call the global interrupt enable function by using
                                        (0127) ;     the macro: M8C_EnableGInt.
                                        (0128) ;-----------------------------------------------------------------------------
                                        (0129) ;  ARGUMENTS: none
                                        (0130) ;
                                        (0131) ;  RETURNS: none
                                        (0132) ;
                                        (0133) ;  SIDE EFFECTS:
                                        (0134) ;    The A and X registers may be modified by this or future implementations
                                        (0135) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0136) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0137) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0138) ;    functions.
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140)  I2CHW_ResumeInt:
                                        (0141) _I2CHW_ResumeInt:
                                        (0142)     RAM_PROLOGUE RAM_USE_CLASS_1
09E2: 80 04    JMP   0x09E7             (0143)     jmp ResumeIntEntry
09E4: 62 DD FE MOV   REG[0xDD],0xFE     
09E7: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0144)     
                                        (0145) ;-----------------------------------------------------------------------------
                                        (0146) ;  FUNCTION NAME: I2CHW_EnableInt
                                        (0147) ;
                                        (0148) ;  DESCRIPTION:
                                        (0149) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0150) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0151) ;
                                        (0152) ;-----------------------------------------------------------------------------
                                        (0153) ;
                                        (0154) ;  ARGUMENTS: none
                                        (0155) ;
                                        (0156) ;  RETURNS: none
                                        (0157) ;
                                        (0158) ;  SIDE EFFECTS:
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165)  I2CHW_EnableInt:
                                        (0166) _I2CHW_EnableInt:
                                        (0167)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)     ;first clear any pending interrupts
                                        (0169)     M8C_ClearIntFlag INT_CLR3, I2CHW_INT_MASK
                                        (0170) ResumeIntEntry:
                                        (0171)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_1
09EA: 7F       RET                      (0173)     ret
09EB: 62 DD FE MOV   REG[0xDD],0xFE     
                                        (0174) 
                                        (0175) .ENDSECTION
                                        (0176) 
                                        (0177) .SECTION
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;  FUNCTION NAME: I2CHW_ClearInt
                                        (0180) ;
                                        (0181) ;  DESCRIPTION:
                                        (0182) ;     Clears only the I2C interrupt in the INT_CLR3 register.
                                        (0183) ;
                                        (0184) ;-----------------------------------------------------------------------------
                                        (0185) ;
                                        (0186) ;  ARGUMENTS: none
                                        (0187) ;
                                        (0188) ;  RETURNS: none
                                        (0189) ;
                                        (0190) ;  SIDE EFFECTS:
                                        (0191) ;    The A and X registers may be modified by this or future implementations
                                        (0192) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0193) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0194) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0195) ;    functions.
                                        (0196) ;          
                                        (0197)  I2CHW_ClearInt:
                                        (0198) _I2CHW_ClearInt:
                                        (0199)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0200)     M8C_ClearIntFlag INT_CLR3, I2CHW_INT_MASK
                                        (0201)     RAM_EPILOGUE RAM_USE_CLASS_1
09EE: 7F       RET                      (0202)     ret
09EF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0203)     
                                        (0204) .ENDSECTION
                                        (0205) 
                                        (0206) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))	
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: I2CHW_EnableMstr
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0213) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0214) ;
                                        (0215) ;-----------------------------------------------------------------------------
                                        (0216) ;
                                        (0217) ;  ARGUMENTS: none
                                        (0218) ;
                                        (0219) ;  RETURNS: none
                                        (0220) ;
                                        (0221) ;  SIDE EFFECTS:
                                        (0222) ;    The A and X registers may be modified by this or future implementations
                                        (0223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0225) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0226) ;    functions.
                                        (0227) ;          
                                        (0228)  I2CHW_EnableMstr:
                                        (0229) _I2CHW_EnableMstr:
                                        (0230)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0231) 	;;CDT 28399
                                        (0232) 	RAM_SETPAGE_CUR >I2CHW_bStatus
09F2: 26 03 7F AND   [0x3],0x7F         (0233) 	and [I2CHW_bStatus], ~0x80 ;; ~I2CHW_ISR_ACTIVE
09F5: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0234) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
09F8: 26 05 7F AND   [0x5],0x7F         (0235)     and    [I2CHW_RsrcStatus], ~0x80;;~I2CHW_ISR_ACTIVE        ; Make sure internal control variables weren't corrupted previous to start.
09FB: 43 D6 02 OR    REG[0xD6],0x2      
                                        (0236)     BitSetI2CHW_CFG I2C_M_EN                                         ;Enable SDA interupt
                                        (0237)     RAM_EPILOGUE RAM_USE_CLASS_1
09FE: 7F       RET                      (0238)     ret
09FF: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) ENDIF
                                        (0242) 
                                        (0243) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0244) .SECTION
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  FUNCTION NAME: I2CHW_EnableSlave
                                        (0247) ;
                                        (0248) ;  DESCRIPTION:
                                        (0249) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0250) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0251) ;
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS: none
                                        (0255) ;
                                        (0256) ;  RETURNS: none
                                        (0257) ;
                                        (0258) ;  SIDE EFFECTS:
                                        (0259) ;    The A and X registers may be modified by this or future implementations
                                        (0260) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0261) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0262) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0263) ;    functions.
                                        (0264) ;          
                                        (0265)  I2CHW_EnableSlave:
                                        (0266) _I2CHW_EnableSlave:
                                        (0267)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0268)     
                                        (0269)     M8C_SetBank1 ;The SDA and SCL pins are setting to Hi-z drive mode
                                        (0270)     and reg[I2CHWSDA_DriveMode_0_ADDR],~(I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0271)     or  reg[I2CHWSDA_DriveMode_1_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0272)     M8C_SetBank0
                                        (0273)     or  reg[I2CHWSDA_DriveMode_2_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0274)    
                                        (0275)     BitSetI2CHW_CFG I2C_S_EN                                         ;Enable SDA interrupt
                                        (0276)     nop
                                        (0277)     nop
                                        (0278)     nop
                                        (0279)     nop
                                        (0280)     nop
                                        (0281)    
                                        (0282)     M8C_SetBank1 ;The SDA and SCL pins are restored to Open Drain Low drive mode
                                        (0283)     or reg[I2CHWSDA_DriveMode_0_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0284)     or reg[I2CHWSDA_DriveMode_1_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0285)     M8C_SetBank0
                                        (0286)     or reg[I2CHWSDA_DriveMode_2_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0287)     
                                        (0288)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0289)     ret
                                        (0290) 
                                        (0291) .ENDSECTION
                                        (0292) ENDIF
                                        (0293) 
                                        (0294) .SECTION
                                        (0295) ;-----------------------------------------------------------------------------
                                        (0296) ;  FUNCTION NAME: I2CHW_DisableInt
                                        (0297) ;  FUNCTION NAME: I2CHW_Stop
                                        (0298) ;
                                        (0299) ;  DESCRIPTION:
                                        (0300) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0301) ;
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;
                                        (0304) ;  ARGUMENTS: none
                                        (0305) ;
                                        (0306) ;  RETURNS: none
                                        (0307) ;
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0311) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0312) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0313) ;    functions.
                                        (0314) ;          
                                        (0315)  I2CHW_DisableInt:
                                        (0316) _I2CHW_DisableInt:
                                        (0317)  I2CHW_Stop:
                                        (0318) _I2CHW_Stop:
                                        (0319)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0320)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0321)     RAM_EPILOGUE RAM_USE_CLASS_1
0A02: 7F       RET                      (0322)     ret
0A03: 41 D6 FD AND   REG[0xD6],0xFD     
                                        (0323) 
                                        (0324) .ENDSECTION
                                        (0325) 
                                        (0326) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0327) .SECTION
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;  FUNCTION NAME: I2CHW_DisableSlave
                                        (0330) ;
                                        (0331) ;  DESCRIPTION:
                                        (0332) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0333) ;
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;
                                        (0336) ;  ARGUMENTS: none
                                        (0337) ;
                                        (0338) ;  RETURNS: none
                                        (0339) ;
                                        (0340) ;  SIDE EFFECTS:
                                        (0341) ;    The A and X registers may be modified by this or future implementations
                                        (0342) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0343) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0344) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0345) ;    functions.
                                        (0346) ;          
                                        (0347)  I2CHW_DisableSlave:
                                        (0348) _I2CHW_DisableSlave:
                                        (0349)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0350)     BitClrI2CHW_CFG I2C_S_EN                                         ;Disable the Slave
                                        (0351)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0352)     ret
                                        (0353) 
                                        (0354) .ENDSECTION
                                        (0355) ENDIF
                                        (0356) 
                                        (0357) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0358) .SECTION
                                        (0359) ;-----------------------------------------------------------------------------
                                        (0360) ;  FUNCTION NAME: I2CHW_DisableMstr
                                        (0361) ;
                                        (0362) ;  DESCRIPTION:
                                        (0363) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0364) ;
                                        (0365) ;-----------------------------------------------------------------------------
                                        (0366) ;
                                        (0367) ;  ARGUMENTS: none
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378)  I2CHW_DisableMstr:
                                        (0379) _I2CHW_DisableMstr:
                                        (0380)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0381)     BitClrI2CHW_CFG I2C_M_EN                                         ;Disable the Master
                                        (0382)     RAM_EPILOGUE RAM_USE_CLASS_1
0A06: 7F       RET                      (0383)    ret
                                        (0384) 
                                        (0385) .ENDSECTION
                                        (0386) ENDIF
                                        (0387) 
                                        (0388) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0389)  IF (I2CHW_CY8C22x45)
                                        (0390)  .SECTION
                                        (0391) ;-----------------------------------------------------------------------------
                                        (0392) ;  FUNCTION NAME: void  I2CHW_EnableHWAddrCheck(void)
                                        (0393) ;
                                        (0394) ;  DESCRIPTION:
                                        (0395) ;   Set respective bit to engage the HardWare Address Recognition 
                                        (0396) ;   feature in I2C slave block.
                                        (0397) ;
                                        (0398) ;-----------------------------------------------------------------------------
                                        (0399) ;
                                        (0400) ;  ARGUMENTS: none
                                        (0401) ;
                                        (0402) ;  RETURNS: none
                                        (0403) ;
                                        (0404) ;  SIDE EFFECTS:
                                        (0405) ;    If the HardWare Address Recognition feature is enabled, the ROM registers reading does not work.
                                        (0406) ;    The HardWare Address Recognition feature should be disabled for using ROM registers.
                                        (0407) ;
                                        (0408) ;    The A and X registers may be modified by this or future implementations
                                        (0409) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0410) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0411) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0412) ;    functions.
                                        (0413) ;
                                        (0414)  I2CHW_EnableHWAddrCheck:
                                        (0415) _I2CHW_EnableHWAddrCheck:
                                        (0416)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0417)    M8C_SetBank1
                                        (0418)    or    reg[I2CHW_ADDR], I2CHW_HW_ADDR_EN
                                        (0419)    M8C_SetBank0
                                        (0420)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0421)    ret
                                        (0422) .ENDSECTION
                                        (0423) 
                                        (0424) .SECTION
                                        (0425) ;-----------------------------------------------------------------------------
                                        (0426) ;  FUNCTION NAME: void  I2CHW_DisableHWAddrCheck(void)
                                        (0427) ;
                                        (0428) ;  DESCRIPTION:
                                        (0429) ;   Clear respective bit to disengage the HardWare Address Recognition 
                                        (0430) ;   feature in I2C slave block.
                                        (0431) ;
                                        (0432) ;-----------------------------------------------------------------------------
                                        (0433) ;
                                        (0434) ;  ARGUMENTS: none
                                        (0435) ;
                                        (0436) ;  RETURNS: none
                                        (0437) ;
                                        (0438) ;  SIDE EFFECTS:
                                        (0439) ;    The A and X registers may be modified by this or future implementations
                                        (0440) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0441) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0442) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0443) ;    functions.
                                        (0444) ;
                                        (0445)  I2CHW_DisableHWAddrCheck:
                                        (0446) _I2CHW_DisableHWAddrCheck:
                                        (0447)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0448)    M8C_SetBank1
                                        (0449)    and   reg[I2CHW_ADDR], ~I2CHW_HW_ADDR_EN
                                        (0450)    M8C_SetBank0
                                        (0451)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0452)    ret
                                        (0453) .ENDSECTION
                                        (0454)  ENDIF
                                        (0455) ENDIF
                                        (0456) 
                                        (0457) ; End of File I2CHW.asm
FILE: lib\i2chwmstr.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0A07: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME: I2CHWMSTR.asm
                                        (0004) ;;   Version: 2.00, Updated on 2014/7/14 at 8:13:58
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: <UMName> User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) include "I2CHWMstr.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) 
                                        (0031) export   I2CHW_fSendRepeatStart
                                        (0032) export  _I2CHW_fSendRepeatStart
                                        (0033) export   I2CHW_fSendStart
                                        (0034) export  _I2CHW_fSendStart
                                        (0035) export   I2CHW_SendStop
                                        (0036) export  _I2CHW_SendStop
                                        (0037) ; export the following 3 functions for C-implementations large or small mem models 
                                        (0038) export  _I2CHW_fReadBytes
                                        (0039) export  _I2CHW_bWriteBytes
                                        (0040) export  _I2CHW_bWriteCBytes
                                        (0041) 
                                        (0042) export   I2CHW_fWrite
                                        (0043) export  _I2CHW_fWrite
                                        (0044) 
                                        (0045) export   I2CHW_bRead
                                        (0046) export  _I2CHW_bRead
                                        (0047) 
                                        (0048) export    I2CHW_bReadBusStatus
                                        (0049) export   _I2CHW_bReadBusStatus
                                        (0050) 
                                        (0051) 
                                        (0052) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0053) 
                                        (0054) export   I2CHW_fReadBytes
                                        (0055) export   I2CHW_bWriteBytes
                                        (0056) export   I2CHW_bWriteCBytes
                                        (0057) 
                                        (0058) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (0059) 
                                        (0060) ;-------------------------------------------------------------------
                                        (0061) ;  Declare the varables for both the assembler and C compiler.
                                        (0062) ;
                                        (0063) ;-------------------------------------------------------------------
                                        (0064) export  I2CHW_bStatus
                                        (0065) export _I2CHW_bStatus
                                        (0066) 
                                        (0067) ;-----------------------------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;-----------------------------------------------
                                        (0070) area InterruptRAM(RAM, REL, CON)
                                        (0071) 
                                        (0072) _I2CHW_bStatus:
                                        (0073)  I2CHW_bStatus:                        blk   1  ; Status during transfers
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) ;-----------------------------------------------
                                        (0077) ;  EQUATES
                                        (0078) ;-----------------------------------------------
                                        (0079) I2CHW_SLAVE_ACKed:                     equ 0x01 ; This bit set if Slave ACKed Master
                                        (0080) I2CHW_SEND_ACK:                        equ 0x10 ; If this flag set, Master should send ACK
                                        (0081) 
                                        (0082) 
                                        (0083) .SECTION
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;  FUNCTION NAME: I2CHW_fReadBytes
                                        (0086) ;
                                        (0087) ;  DESCRIPTION:
                                        (0088) ;       Read Multiple bytes from a slave.  Use the ISR to perform operation.
                                        (0089) ;-----------------------------------------------------------------------------
                                        (0090) ;
                                        (0091) ;  ARGUMENTS:
                                        (0092) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0093) ;           to determine if:
                                        (0094) ;             0x01 => Use RepeatStart instead of Start
                                        (0095) ;             0x02 => Don't send Stop
                                        (0096) ;  [SP-6]=> Count of bytes to read.
                                        (0097) ;  [SP-5]=> MSB of Array address to put data in (ignorned for small mem model)
                                        (0098) ;  [SP-4]=> LSB of Array address to put data in 
                                        (0099) ;  [SP-3]=> Address of slave
                                        (0100) ;
                                        (0101) ;  RETURNS:       None
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;          
                                        (0110) ;    Currently only the page pointer registers listed below are modified: 
                                        (0111) ;          CUR_PP
                                        (0112) ;
                                        (0113) ;  THEORY of OPERATION or PROCEDURE:
                                        (0114) ;    I2C and block must be operational.
                                        (0115) ;    This routine will enable the I2C interrupt!
                                        (0116) ;    If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already running this routine will
                                        (0117) ;    pend on the ISR_ACTIVE bit until it can run
                                        (0118) ;
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) IF	(TOOLCHAIN & HITECH)
                                        (0121) RxMode:         set  -7
                                        (0122) RxCnt:          set  -6
                                        (0123) RxArrayHI:      set  -5
                                        (0124) RxArrayLO:      set  -4
                                        (0125) RxSlaveAddr:    set  -3
                                        (0126) ELSE
                                        (0127) RxMode:         equ  -7
                                        (0128) RxCnt:          equ  -6
                                        (0129) RxArrayHI:      equ  -5
                                        (0130) RxArrayLO:      equ  -4
                                        (0131) RxSlaveAddr:    equ  -3
                                        (0132) ENDIF
                                        (0133) 
                                        (0134) _I2CHW_fReadBytes:			      
                                        (0135)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0136)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0137) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0A0A: 4F       MOV   X,SP               (0138) 	mov   X, SP
                                        (0139) I2CMSCR_NotReady1:
0A0B: 51 05    MOV   A,[0x5]            (0140)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0A0D: 47 05 80 TST   [0x5],0x80         (0141)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0142)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0143)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0144)           ;For multi master operations, a pening start or restart
                                        (0145)           ;request might be OK, the master might be waiting to
                                        (0146)           ;acquire the bus from another master
0A10: BF FA    JNZ   0x0A0B             (0147)     jnz   I2CMSCR_NotReady1
0A12: 2E 05 80 OR    [0x5],0x80         (0148)     or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE             ; flag set here and cleared by ISR
                                        (0149)     ;get the address from the parameters on the stack
0A15: 52 FD    MOV   A,[X-3]            (0150)     mov   A, [X + RxSlaveAddr]
0A17: 64       ASL   A                  (0151)     asl   A                                                ; Shift address to the left to make
                                        (0152)                                                            ; a complete byte with the R/W bit.
0A18: 29 01    OR    A,0x1              (0153)     or    A,0x01                                           ; OR the address with the Read bit.
0A1A: 53 04    MOV   [0x4],A            (0154)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
0A1C: 60 D8    MOV   REG[0xD8],A        (0155)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
0A1E: 55 03 00 MOV   [0x3],0x0          (0156)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0A21: 52 F9    MOV   A,[X-7]            (0157)     mov   A, [X+RxMode]                                    ; place the RxMode in status so ISR can access it
0A23: 53 03    MOV   [0x3],A            (0158)     mov   [I2CHW_bStatus],A
                                        (0159)     ;
                                        (0160)     ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0161)     ;
0A25: 10       PUSH  X                  (0162)     push   X                                               ;preserve since it's used later
0A26: 52 FA    MOV   A,[X-6]            (0163)     mov    A, [X+RxCnt]                                    ;get the write buf size
0A28: 08       PUSH  A                  (0164)     push   A
0A29: 52 FB    MOV   A,[X-5]            (0165)     mov    A, [X+RxArrayHI]                                ;get the write addrHI
0A2B: 08       PUSH  A                  (0166)     push   A										   
0A2C: 52 FC    MOV   A,[X-4]            (0167)     mov    A, [X+RxArrayLO]							                         ;get the write addrLO
0A2E: 08       PUSH  A                  (0168)     push   A                                               ;this will be ignored
0A2F: 93 0C    CALL  _I2CHW_InitWrite   (0169)     call  I2CHW_InitWrite                                  ;sets the addr and byte count to write to
0A31: 38 FD    ADD   SP,0xFD            (0170)     add    SP, -3
0A33: 20       POP   X                  (0171)     pop    X                                               ;restore X to be used for the rest of this routine
                                        (0172)     
0A34: 51 04    MOV   A,[0x4]            (0173)     mov   A,[I2CHW_SlaveAddr]
0A36: 48 F9 01 TST   [X-7],0x1          (0174)     tst   [x+RxMode],I2CHW_RepStart
0A39: B0 0A    JNZ   0x0A44             (0175)     jnz   DoRestartRx
0A3B: 49 D7 01 TST   REG[0xD7],0x1      (0176)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0A3E: B0 05    JNZ   0x0A44             (0177)     jnz   DoRestartRx
0A40: 91 2E    CALL  0x0B70             (0178)     call  I2C_DoStart                                      ; Send a start and address.
0A42: 80 03    JMP   0x0A46             (0179)     jmp   CheckRxAck
                                        (0180) DoRestartRx:
0A44: 90 93    CALL  0x0AD9             (0181)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
0A46: 70 3F    AND   F,0x3F             
0A48: 71 C0    OR    F,0xC0             
                                        (0182)         ;note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
                                        (0183)         ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
                                        (0184)         ; as a whole be able to detect that a stop has not been sent previously in this transmission.
                                        (0185) 
                                        (0186) CheckRxAck:                                                ; Test to see if Slave ACKed
                                        (0187)         ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
                                        (0188)         ;is finished.
                                        (0189) End_RD:
                                        (0190)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0191)     RAM_EPILOGUE RAM_USE_CLASS_4
0A4A: 7F       RET                      (0192)     ret
0A4B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0193) 
                                        (0194) .ENDSECTION
                                        (0195) 
                                        (0196) .SECTION
                                        (0197) ;-----------------------------------------------------------------------------
                                        (0198) ;  FUNCTION NAME: I2CHW_bWriteBytes
                                        (0199) ;
                                        (0200) ;  DESCRIPTION:
                                        (0201) ;    Write multiple data bits to slave device.
                                        (0202) ;
                                        (0203) ;-----------------------------------------------------------------------------
                                        (0204) ;
                                        (0205) ;  ARGUMENTS:
                                        (0206) ; [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0207) ;          to determine if:
                                        (0208) ;              0x01 => Use RePeatStart instead of Start
                                        (0209) ;              0x02 => Don't send Stop
                                        (0210) ; [SP-6]=> Count of bytes to write.
                                        (0211) ; [SP-5]=> MSB of Array address to put data in (ignored small mem model).
                                        (0212) ; [SP-4]=> LSB of Array address to put data in.
                                        (0213) ; [SP-3]=> Address of slave
                                        (0214) ;
                                        (0215) ;
                                        (0216) ;  RETURNS:     None
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS:
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;          
                                        (0225) ;    Currently only the page pointer registers listed below are modified: 
                                        (0226) ;          CUR_PP
                                        (0227) ;
                                        (0228) ;  THEORY of OPERATION or PROCEDURE:
                                        (0229) ;
                                        (0230) ;-----------------------------------------------------------------------------
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232) TxMode:       set  -7
                                        (0233) TxByteCount:  set  -6
                                        (0234) TxArrayHI:    set  -5
                                        (0235) TxArrayLO:    set  -4
                                        (0236) TxSlaveAddr:  set  -3
                                        (0237) ELSE
                                        (0238) TxMode:       equ  -7
                                        (0239) TxByteCount:  equ  -6
                                        (0240) TxArrayHI:    equ  -5
                                        (0241) TxArrayLO:    equ  -4
                                        (0242) TxSlaveAddr:  equ  -3
                                        (0243) ENDIF
                                        (0244) 
                                        (0245) _I2CHW_bWriteBytes:
                                        (0246)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0247)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0248) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
                                        (0249) 
0A4E: 4F       MOV   X,SP               (0250) 	mov   X, SP
                                        (0251) I2CMSCR_NotReady2:
0A4F: 51 05    MOV   A,[0x5]            (0252)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0A51: 47 05 80 TST   [0x5],0x80         (0253)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0254)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0255)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0256)           ;For multi master operations, a pening start or restart
                                        (0257)           ;request might be OK, the master might be waiting to
                                        (0258)           ;acquire the bus from another master
0A54: BF FA    JNZ   0x0A4F             (0259)     jnz   I2CMSCR_NotReady2
0A56: 2E 05 80 OR    [0x5],0x80         (0260)     or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE             ; flag set here and cleared at end of ISR
0A59: 52 FD    MOV   A,[X-3]            (0261)     mov   A, [X + TxSlaveAddr]
0A5B: 64       ASL   A                  (0262)     asl   A                                                ; Shift address to the left to make
                                        (0263)                                                            ; a complete byte with the R/W bit.
                                        (0264)                                                            ; The ASL takes care of clearing bit 0.
0A5C: 55 03 00 MOV   [0x3],0x0          (0265)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0A5F: 53 04    MOV   [0x4],A            (0266)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
0A61: 60 D8    MOV   REG[0xD8],A        (0267)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
0A63: 52 F9    MOV   A,[X-7]            (0268)     mov   A, [X+TxMode]                                    ; place the TxMode in status so ISR can access it
0A65: 53 03    MOV   [0x3],A            (0269)     mov   [I2CHW_bStatus],A
                                        (0270)     ;
                                        (0271)     ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0272)     ;
0A67: 10       PUSH  X                  (0273)         push   X                                                ;preserve since it's used later
0A68: 77 FA    INC   [X-6]              (0274)         inc    [X+TxByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (0275) 
0A6A: 52 FA    MOV   A,[X-6]            (0276)         mov    A, [X+TxByteCount]                               ;get the write buf size
0A6C: 08       PUSH  A                  (0277)         push   A
0A6D: 52 FB    MOV   A,[X-5]            (0278)         mov    A, [X+TxArrayHI]                                 ;get the write buf addr
0A6F: 08       PUSH  A                  (0279)         push   A                                                                                            ;this will be ignored
0A70: 52 FC    MOV   A,[X-4]            (0280)         mov    A, [X+TxArrayLO]                                 ;get the write buf addr
0A72: 08       PUSH  A                  (0281)         push   A
0A73: 93 06    CALL  _I2CHW_InitRamRead (0282)         call  I2CHW_InitRamRead                            ;sets the addr and byte count to write to
0A75: 38 FD    ADD   SP,0xFD            (0283)         add SP, -3
0A77: 20       POP   X                  (0284)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (0285)     ;and  [I2CHW_RsrcStatus],~I2C_READFLASH                ;shouldn't be needed should have been taken care of in InitRamRead routine
                                        (0286) 
                                        (0287) 
0A78: 51 04    MOV   A,[0x4]            (0288)     mov   A,[I2CHW_SlaveAddr]
0A7A: 48 F9 01 TST   [X-7],0x1          (0289)     tst   [x+TxMode],I2CHW_RepStart
0A7D: B0 0A    JNZ   0x0A88             (0290)     jnz   DoRestartTx
0A7F: 49 D7 01 TST   REG[0xD7],0x1      (0291)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0A82: BF C1    JNZ   0x0A44             (0292)     jnz   DoRestartRx
0A84: 90 EA    CALL  0x0B70             (0293)     call  I2C_DoStart                                      ; Send a start and address.
0A86: 80 03    JMP   0x0A8A             (0294)     jmp   DoTxAck
                                        (0295) DoRestartTx:
0A88: 90 4F    CALL  0x0AD9             (0296)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
0A8A: 70 3F    AND   F,0x3F             
0A8C: 71 C0    OR    F,0xC0             
                                        (0297) DoTxAck:
                                        (0298) 
                                        (0299) 
                                        (0300) WriteSlaveAck:
                                        (0301)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0302) 	RAM_EPILOGUE RAM_USE_CLASS_4
0A8E: 7F       RET                      (0303)     ret
0A8F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0304) 
                                        (0305) .ENDSECTION
                                        (0306) 
                                        (0307) .SECTION
                                        (0308) ;-----------------------------------------------------------------------------
                                        (0309) ;  FUNCTION NAME: I2CHW_bWriteCBytes
                                        (0310) ;
                                        (0311) ;  DESCRIPTION:
                                        (0312) ;    Write multiple data bits to slave device from ROM
                                        (0313) ;
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;
                                        (0316) ;  ARGUMENTS:
                                        (0317) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0318) ;            to determine if:
                                        (0319) ;               0x01 => Use RepeatStart instead of Start
                                        (0320) ;               0x02 => Don't send Stop
                                        (0321) ;  [SP-6]=> Count of bytes to write.
                                        (0322) ;  [SP-5]=> MSB of ROM Array address to get data from
                                        (0323) ;  [SP-4]=> LSB of ROM Array address to get data from.
                                        (0324) ;  [SP-3]=> Address of slave
                                        (0325) ;
                                        (0326) ;  RETURNS:
                                        (0327) ;    None
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;
                                        (0339) ;  THEORY of OPERATION or PROCEDURE:
                                        (0340) ;
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) IF	(TOOLCHAIN & HITECH)
                                        (0343) TxCMode:       set  -7
                                        (0344) TxCByteCount:  set  -6
                                        (0345) TxCArrayMSB:   set  -5
                                        (0346) TxCArrayLSB:   set  -4
                                        (0347) ;TxSlaveAddr:  set  -3	  ;defined above this line if for reference only
                                        (0348) ELSE
                                        (0349) TxCMode:       equ  -7
                                        (0350) TxCByteCount:  equ  -6
                                        (0351) TxCArrayMSB:   equ  -5
                                        (0352) TxCArrayLSB:   equ  -4
                                        (0353) ;TxSlaveAddr:  equ  -3	  ;defined above this line if for reference only
                                        (0354) ENDIF
                                        (0355) 
                                        (0356) _I2CHW_bWriteCBytes:
                                        (0357)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0358) 	RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0359) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0A92: 4F       MOV   X,SP               (0360) 	mov   X, SP
                                        (0361) I2CMSCR_NotReady3:
0A93: 51 05    MOV   A,[0x5]            (0362)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
0A95: 47 05 80 TST   [0x5],0x80         (0363)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0364)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0365)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0366)           ;For multi master operations, a pening start or restart
                                        (0367)           ;request might be OK, the master might be waiting to
                                        (0368)           ;acquire the bus from another master
0A98: BF FA    JNZ   0x0A93             (0369)         jnz   I2CMSCR_NotReady3
0A9A: 2E 05 80 OR    [0x5],0x80         (0370)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ;lag set here but cleared in ISRf
0A9D: 52 FD    MOV   A,[X-3]            (0371)     mov   A, [X + TxSlaveAddr]
0A9F: 64       ASL   A                  (0372)     asl   A                                                ; Shift address to the left to make
                                        (0373)                                                            ; a complete byte with the R/W bit.
                                        (0374)                                                            ; The ASL takes care of clearing bit 0.
0AA0: 55 03 00 MOV   [0x3],0x0          (0375)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0AA3: 53 04    MOV   [0x4],A            (0376)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
0AA5: 60 D8    MOV   REG[0xD8],A        (0377)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
0AA7: 52 F9    MOV   A,[X-7]            (0378)     mov   A, [X+TxCMode]                                                             ; place the RxMode in status so ISR can access it
0AA9: 53 03    MOV   [0x3],A            (0379)     mov   [I2CHW_bStatus],A
                                        (0380)     ;
                                        (0381)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0382)         ;
0AAB: 10       PUSH  X                  (0383)         push   X                                                ;preserve X since it's used later
                                        (0384) 
0AAC: 50 00    MOV   A,0x0              (0385)          mov    A, 0                                             ;get the write buf size (this is the hi order part)
0AAE: 77 FA    INC   [X-6]              (0386)         inc    [X+TxCByteCount]                                 ;increase this by one since the init routine will decrement it by 1
0AB0: D0 02    JNC   0x0AB3             (0387)         jnc    . + 3                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
0AB2: 74       INC   A                  (0388)         inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
0AB3: 08       PUSH  A                  (0389)         push   A
0AB4: 52 FA    MOV   A,[X-6]            (0390)         mov    A, [X+TxCByteCount]                              ;initFlasRead needs a 2 byte count this is the low ord byte
0AB6: 08       PUSH  A                  (0391)         push   A
0AB7: 52 FB    MOV   A,[X-5]            (0392)         mov    A, [X+TxCArrayMSB]                               ;get the write buf addr
0AB9: 08       PUSH  A                  (0393)         push   A                                                                                        ;this will be ignored
0ABA: 52 FC    MOV   A,[X-4]            (0394)         mov    A, [X+TxCArrayLSB]                               ;get the write buf addr
0ABC: 08       PUSH  A                  (0395)         push   A
                                        (0396) 
0ABD: 92 E9    CALL  _I2CHW_InitFlashRead(0397)         call  I2CHW_InitFlashRead                          ;sets the addr and byte count to write to
0ABF: 38 FC    ADD   SP,0xFC            (0398)         add SP, -4
0AC1: 20       POP   X                  (0399)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (0400) 
                                        (0401)     ;or  [I2CHW_RsrcStatus],I2C_READFLASH
0AC2: 51 04    MOV   A,[0x4]            (0402)     mov   A,[I2CHW_SlaveAddr]
0AC4: 48 F9 01 TST   [X-7],0x1          (0403)     tst   [x+TxMode],I2CHW_RepStart                        ; Check if a Start or RepeatStart
0AC7: B0 0A    JNZ   0x0AD2             (0404)     jnz   DoCRestartTx                                     ; should executed.
0AC9: 49 D7 01 TST   REG[0xD7],0x1      (0405)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0ACC: BF 77    JNZ   0x0A44             (0406)     jnz   DoRestartRx
0ACE: 90 A0    CALL  0x0B70             (0407)     call  I2C_DoStart                                      ; Send a start and address.
0AD0: 80 03    JMP   0x0AD4             (0408)     jmp   DoCTxAck
                                        (0409) DoCRestartTx:
0AD2: 90 05    CALL  0x0AD9             (0410)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
0AD4: 70 3F    AND   F,0x3F             
0AD6: 71 C0    OR    F,0xC0             
                                        (0411) 
                                        (0412) DoCTxAck:                                                  ; Test to see if Slave is ACKed
                                        (0413) 
                                        (0414) CWriteSlaveAck:
                                        (0415)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0416)     RAM_EPILOGUE RAM_USE_CLASS_4
0AD8: 7F       RET                      (0417)     ret
0AD9: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0418) 
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: I2CHW_DoBufferRepeatStart
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;    Send repeated start condition and send slave address for buffered transfers.
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     This routine is called internally only.  It is not exported or intended as an API
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;    None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS:
                                        (0437) ;    The A and X registers may be modified by this or future implementations
                                        (0438) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0439) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0440) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0441) ;    functions.
                                        (0442) ;          
                                        (0443) ;  THEORY of OPERATION or PROCEDURE:
                                        (0444) ;    This is similar to the I2C_DoRepeatStart entry point but this function does not
                                        (0445) ;    wait for the byte_complete flag.  That is this is not polled and is therefore compatible
                                        (0446) ;    with the buffered read and write functions (above).
                                        (0447) ;
                                        (0448) ;-----------------------------------------------------------------------------
                                        (0449) 
                                        (0450) I2CHW_DoBufferRepeatStart:
                                        (0451)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0452) 	RAM_SETPAGE_CUR >I2CHW_SlaveAddr
                                        (0453)     ;here the path through the routine is dependent on the previous transmission.
                                        (0454)         ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
                                        (0455)         ; I2C interrupt
                                        (0456)         ; 2a. the master must NAK the byte if he is reading from the slave.
                                        (0457)         ; We do have to look at the status of the I2C block to see what is going on because if there was a
                                        (0458)         ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
                                        (0459)         ; by setting the master restart bit and clearing to I2C_SCR (I2C_TX)
                                        (0460)         ; 2b. if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
                                        (0461)         ; I2C_SCR reg.  (same as if we were writing to slave).
                                        (0462)         ; 3. once the ISR starts it will figure out which direction we are going with data (sending/receiving)
                                        (0463)         ;
0ADC: 60 D8    MOV   REG[0xD8],A        (0464)     mov   reg[I2CHW_DR], A
0ADE: 53 04    MOV   [0x4],A            (0465)         mov   [I2CHW_SlaveAddr], A
                                        (0466)         ;tst      reg[I2CHW_MSCR], I2CM_MASTEROP           ;do we even have control of the bus?
                                        (0467)         ;jz    notBusMasterErr
0AE0: 5D D9    MOV   A,REG[0xD9]        (0468)     mov   A, reg[I2CHW_MSCR]                               ;read the mscr register to look for pending master operations
0AE2: 21 0F    AND   A,0xF              (0469)     and   A, 0x0f                                          ;only look at the lower bits
0AE4: A0 11    JZ    0x0AF6             (0470)         jz    BusIdleSendStart
0AE6: 62 D9 02 MOV   REG[0xD9],0x2      
                                        (0471)         ; for a single master system this should not be an issue,
                                        (0472)         ; so we'll go ahead and request the restart.  If a stop condition was already generated
                                        (0473)         ; the state machine will automatically generate a start instead.
                                        (0474) 
                                        (0475)         ;SetI2CHW_SCR I2CM_RESTRT
                                        (0476)     ;mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0477)         ;SetI2CHW_SCR          I2C_TX                                ;even though the restart has been requested the state
                                        (0478)         ;mov      reg[I2CHW_SCR], I2C_TX                   ;even though the restart has been requested the state
                                        (0479) 
                                        (0480) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0481)         SetI2CHW_MSCR I2CM_RESTRT
                                        (0482) ;ELSE
                                        (0483) ;    mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0484) ;ENDIF
0AE9: 49 D7 04 TST   REG[0xD7],0x4      (0485)     tst   reg[I2CHW_SCR], I2C_TX
0AEC: B0 05    JNZ   0x0AF2             (0486)     jnz   I2C_RestartRecieve
0AEE: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0487) 
                                        (0488) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0489)     SetI2CHW_SCR I2C_TX                                    ;even though the restart has been requested the state
                                        (0490) ;ELSE
                                        (0491) ;    mov   reg[I2CHW_SCR], I2C_TX                          ;send Ack
                                        (0492) ;ENDIF
                                        (0493) 
                                        (0494)     RAM_EPILOGUE RAM_USE_CLASS_4
0AF1: 7F       RET                      (0495)     ret
0AF2: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0496) I2C_RestartRecieve:
                                        (0497) 
                                        (0498) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0499)     SetI2CHW_SCR 0                                         ;even though the restart has been requested the state
                                        (0500) ;ELSE
                                        (0501) ;    mov   reg[I2CHW_SCR], 0                               ;send Ack
                                        (0502) ;ENDIF
                                        (0503) 
                                        (0504)    RAM_EPILOGUE RAM_USE_CLASS_4
0AF5: 7F       RET                      (0505)    ret
                                        (0506) 
                                        (0507) BusIdleSendStart:
0AF6: 51 04    MOV   A,[0x4]            (0508)    mov    A, [I2CHW_SlaveAddr]
0AF8: 90 76    CALL  0x0B70             (0509)    call   I2C_DoStart
                                        (0510)    ;Since something appears to be messed up do the next best thing to a repeat start, send a start.
                                        (0511)    RAM_EPILOGUE RAM_USE_CLASS_4
0AFA: 7F       RET                      (0512)    ret
0AFB: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0513) 
                                        (0514) .ENDSECTION
                                        (0515) 
                                        (0516) .SECTION
                                        (0517) 
                                        (0518) ;-----------------------------------------------------------------------------
                                        (0519) ;  FUNCTION NAME: I2CHW_fSendRepeatStart
                                        (0520) ;
                                        (0521) ;  DESCRIPTION:
                                        (0522) ;    Send repeated start condition and send slave address.
                                        (0523) ;
                                        (0524) ;-----------------------------------------------------------------------------
                                        (0525) ;
                                        (0526) ;  ARGUMENTS:
                                        (0527) ;    I2CHW_bAddr - Contains the slave address and transfer direction.
                                        (0528) ;
                                        (0529) ;  RETURNS:
                                        (0530) ;    I2CHW_bSTatus - nonZero if a slave responds to a request. Zero otherwise
                                        (0531) ;    Acc register contains non zero value for success (contents of the i2C_SCR reg)  0 indicates failure
                                        (0532) ;    Returns a zero if the repeat start results in a NAK by an addressed device.
                                        (0533) ;
                                        (0534) ;  SIDE EFFECTS:
                                        (0535) ;    The A and X registers may be modified by this or future implementations
                                        (0536) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0537) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0538) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0539) ;    functions.
                                        (0540) ;          
                                        (0541) ;    Currently only the page pointer registers listed below are modified: 
                                        (0542) ;          CUR_PP
                                        (0543) ;
                                        (0544) ;  THEORY of OPERATION or PROCEDURE:
                                        (0545) ;    Prepare to send start by setting SCl and SDA high.
                                        (0546) ;    must be followed directly by I2CHW_start.
                                        (0547) ;
                                        (0548) ;-----------------------------------------------------------------------------
                                        (0549)  I2CHW_fSendRepeatStart:
                                        (0550) _I2CHW_fSendRepeatStart:
                                        (0551)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0552) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0553)     ;wait if the bus is already busy...
0AFE: 08       PUSH  A                  (0554)     push  A
0AFF: 55 03 00 MOV   [0x3],0x0          (0555)     mov   [I2CHW_bStatus], 0x00
                                        (0556) I2CMSCR_NotReady4:
0B02: 51 05    MOV   A,[0x5]            (0557)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0B04: 47 05 80 TST   [0x5],0x80         (0558)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0559)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0560)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0561)           ;For multi master operations, a pening start or restart
                                        (0562)           ;request might be OK, the master might be waiting to
                                        (0563)           ;acquire the bus from another master
0B07: BF FA    JNZ   0x0B02             (0564)     jnz   I2CMSCR_NotReady4
0B09: 18       POP   A                  (0565)     pop   A
                                        (0566) 
                                        (0567) 
0B0A: 64       ASL   A                  (0568)     asl   a                                                ; Shift address to the left
0B0B: 79       DEC   X                  (0569)     dec   x                                                ; If zero, C flag will be set
0B0C: C0 03    JC    0x0B10             (0570)     jc    I2C_DoRepeatStart                                ; Do a write if zero
0B0E: 29 01    OR    A,0x1              (0571)     or    a,0x01                                           ; Set Read flag
                                        (0572) 
                                        (0573) I2C_DoRepeatStart:
                                        (0574)     ;here the path through the routine is dependent on the previous transmission.
                                        (0575)         ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
                                        (0576)         ; I2C interrupt
                                        (0577)         ; 2. the master must NAK the byte if he is reading from the slave.
                                        (0578)         ; We don't have to look at the status of the I2C block to see what is going on because if there was a
                                        (0579)         ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
                                        (0580)         ; by setting the master restart bit and writing to I2C_SCR (I2C_TX)
                                        (0581)         ; if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
                                        (0582)         ; I2C_SCR reg.  (same as if we were writing to slave).
                                        (0583)         ;
0B10: 60 D8    MOV   REG[0xD8],A        (0584)     mov   reg[I2CHW_DR], A
0B12: 53 04    MOV   [0x4],A            (0585)     mov   [I2CHW_SlaveAddr], A
0B14: 49 D9 04 TST   REG[0xD9],0x4      (0586)     tst       reg[I2CHW_MSCR], I2CM_MASTEROP               ;do we even have control of the bus?
0B17: A0 1C    JZ    0x0B34             (0587)     jz    notBusMaster1
0B19: 62 D9 02 MOV   REG[0xD9],0x2      
0B1C: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0588)     ;SetI2CHW_MSCR  I2CM_RESTRT
                                        (0589)     ;mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0590)     ;SetI2CHW_SCR         I2C_TX                           ;even though the restart has been requested the state
                                        (0591)     ;mov      reg[I2CHW_SCR], I2C_TX                       ;even though the restart has been requested the state
                                        (0592)                                                                 ; machine is stalling the SCL and has to be 'released'
                                        (0593) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0594)     SetI2CHW_MSCR I2CM_RESTRT
                                        (0595)     SetI2CHW_SCR  0                                        ;getting a restart out requires a 0 into the SCR reg
                                        (0596) ;ELSE
                                        (0597) ;    mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0598) ;    mov   reg[I2CHW_SCR], 0                               ;getting a restart out requires a 0 into the SCR reg
                                        (0599) ;ENDIF
                                        (0600) 
                                        (0601) WaitRepStrtCompl:
0B1F: 5D D7    MOV   A,REG[0xD7]        (0602)     mov   A,  reg[I2CHW_SCR]
0B21: 49 D7 01 TST   REG[0xD7],0x1      (0603)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0B24: AF FA    JZ    0x0B1F             (0604)     jz    WaitRepStrtCompl
0B26: 49 D7 02 TST   REG[0xD7],0x2      (0605)     tst   reg[I2CHW_SCR], I2C_LST_BIT
0B29: B0 07    JNZ   0x0B31             (0606)     jnz   Err_Exit_RepStart
0B2B: 55 03 01 MOV   [0x3],0x1          (0607)     mov   [I2CHW_bStatus], 0x01
0B2E: 50 01    MOV   A,0x1              (0608)     mov   A, 01
                                        (0609)     RAM_EPILOGUE RAM_USE_CLASS_4
0B30: 7F       RET                      (0610)     ret
                                        (0611) 
                                        (0612) Err_Exit_RepStart:
0B31: 50 00    MOV   A,0x0              (0613)     mov   A, 0
                                        (0614)     RAM_EPILOGUE RAM_USE_CLASS_4
0B33: 7F       RET                      (0615)     ret
                                        (0616) 
                                        (0617)  notBusMaster1:
                                        (0618)     ;SetI2CHW_MSCR 0
                                        (0619)     ;mov reg[I2CHW_MSCR], 0                                ;we certainly cant restart if we've not Master
                                        (0620)     ;WHAT else should be done for this case?  Some sort of improper operation is being attempted.
0B34: 50 00    MOV   A,0x0              (0621)     mov   A, 0
                                        (0622)     RAM_EPILOGUE RAM_USE_CLASS_4
0B36: 7F       RET                      (0623)     ret
0B37: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0624) 
                                        (0625) .ENDSECTION
                                        (0626) 
                                        (0627) .SECTION
                                        (0628) ;-----------------------------------------------------------------------------
                                        (0629) ;  FUNCTION NAME: I2CHW_fSendStart
                                        (0630) ;
                                        (0631) ;  DESCRIPTION:
                                        (0632) ;    Generates start condition and sends slave address.
                                        (0633) ;
                                        (0634) ;-----------------------------------------------------------------------------
                                        (0635) ;
                                        (0636) ;  ARGUMENTS:
                                        (0637) ;    A => Contains the slave address.
                                        (0638) ;
                                        (0639) ;  RETURNS:
                                        (0640) ;    I2CHW_bSTatus - nonZero if a slave responds to a request. Zero otherwise
                                        (0641) ;    Acc register contains non zero value for success (contents of the i2C_SCR reg)  0 indicates failure
                                        (0642) ;    Returns a zero if the repeat start results in a NAK by an addressed device.
                                        (0643) ;
                                        (0644) ;  SIDE EFFECTS:
                                        (0645) ;    The A and X registers may be modified by this or future implementations
                                        (0646) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0647) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0648) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0649) ;    functions.
                                        (0650) ;          
                                        (0651) ;    Currently only the page pointer registers listed below are modified: 
                                        (0652) ;          CUR_PP
                                        (0653) ;
                                        (0654) ;  THEORY of OPERATION or PROCEDURE:
                                        (0655) ;   Send start by setting SDA low while SCL is high. Set
                                        (0656) ;   SCL low in preparation to send address. 
                                        (0657) ;   Sends address, waits for byte complete
                                        (0658) ;   An address must be followed by a read or write of data if it was acked by a slave
                                        (0659) ;
                                        (0660) ;  WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0661) ;   flag is set to return.
                                        (0662) ;
                                        (0663) ;
                                        (0664) ;-----------------------------------------------------------------------------
                                        (0665)  I2CHW_fSendStart:
                                        (0666) _I2CHW_fSendStart:
                                        (0667)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0668) 	RAM_SETPAGE_CUR >I2CHW_bStatus 
                                        (0669)     ;wait if the bus is already busy...
0B3A: 08       PUSH  A                  (0670)     push  A
0B3B: 55 03 00 MOV   [0x3],0x0          (0671)     mov   [I2CHW_bStatus], 0x00
                                        (0672) I2CMSCR_NotReady5:
0B3E: 51 05    MOV   A,[0x5]            (0673)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0B40: 47 05 80 TST   [0x5],0x80         (0674)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0675)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0676)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0677)           ;For multi master operations, a pening start or restart
                                        (0678)           ;request might be OK, the master might be waiting to
                                        (0679)           ;acquire the bus from another master
0B43: BF FA    JNZ   0x0B3E             (0680)     jnz   I2CMSCR_NotReady5
0B45: 18       POP   A                  (0681)     pop   A
0B46: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0682) 
                                        (0683) 
                                        (0684)     ; disable the interrupt
                                        (0685)         ; *** NOT REENABLED ***
                                        (0686)         ;
                                        (0687)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0B49: 49 D7 01 TST   REG[0xD7],0x1      (0688)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ;If there is a pending BYTE_COMPL here
                                        (0689)                                                                 ;it is highly probable that a start is not the
                                        (0690)                                                                                                                     ;correct thing to do.
                                        (0691)                                                                                                                     ;leaving
0B4C: B0 20    JNZ   0x0B6D             (0692)     jnz   Err_Exit_Start
                                        (0693) 
0B4E: 64       ASL   A                  (0694)     asl   a                                                ; Shift address to the left
0B4F: 79       DEC   X                  (0695)     dec   x                                                ; If zero, C flag will be set
0B50: C0 03    JC    0x0B54             (0696)     jc    I2C_SndWRStart                                   ; Do a write if zero
0B52: 29 01    OR    A,0x1              (0697)     or    a,0x01                                           ; Set Read flag
                                        (0698) I2C_SndWRStart:
0B54: 60 D8    MOV   REG[0xD8],A        (0699)     mov   reg[I2CHW_DR], A
0B56: 53 04    MOV   [0x4],A            (0700)     mov   [I2CHW_SlaveAddr], A
0B58: 62 D9 01 MOV   REG[0xD9],0x1      
                                        (0701)     ;SetI2CHW_MSCR, I2CM_SNDSTRT
                                        (0702)     ;mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0703) 
                                        (0704) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0705)     SetI2CHW_MSCR I2CM_SNDSTRT
                                        (0706) ;ELSE
                                        (0707) ;    mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0708) ;ENDIF
                                        (0709) 
                                        (0710) 
                                        (0711) WaitStrtByteCompl:
0B5B: 5D D7    MOV   A,REG[0xD7]        (0712)     mov   A,  reg[I2CHW_SCR]
0B5D: 49 D7 01 TST   REG[0xD7],0x1      (0713)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0B60: AF FA    JZ    0x0B5B             (0714)     jz    WaitStrtByteCompl
0B62: 49 D7 02 TST   REG[0xD7],0x2      (0715)     tst   reg[I2CHW_SCR], I2C_LST_BIT
0B65: B0 07    JNZ   0x0B6D             (0716)     jnz   Err_Exit_Start
0B67: 55 03 01 MOV   [0x3],0x1          (0717)     mov   [I2CHW_bStatus], 0x01
0B6A: 50 01    MOV   A,0x1              (0718)     mov   A, 01
                                        (0719)     RAM_EPILOGUE RAM_USE_CLASS_4
0B6C: 7F       RET                      (0720)     ret
                                        (0721) Err_Exit_Start:
0B6D: 50 00    MOV   A,0x0              (0722)     mov   A, 0
                                        (0723)     RAM_EPILOGUE RAM_USE_CLASS_4
0B6F: 7F       RET                      (0724)     ret
0B70: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0725) 
                                        (0726) I2C_DoStart:
                                        (0727)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0728)     RAM_SETPAGE_CUR >I2CHW_SlaveAddr
                                        (0729)     ;here we are not required to test for master operation since we are only attempting to gain control of the bus
                                        (0730)     ; by attempting to assert a Start
                                        (0731)     
0B73: 60 D8    MOV   REG[0xD8],A        (0732)     mov   reg[I2CHW_DR], A
0B75: 53 04    MOV   [0x4],A            (0733)     mov   [I2CHW_SlaveAddr], A
0B77: 62 D9 01 MOV   REG[0xD9],0x1      
                                        (0734)     ;SetI2CHW_MSCR  I2CM_SNDSTRT
                                        (0735)     ;mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0736) 
                                        (0737) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0738)     SetI2CHW_MSCR I2CM_SNDSTRT
                                        (0739) ;ELSE
                                        (0740) ;    mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0741) ;ENDIF
                                        (0742)     RAM_EPILOGUE RAM_USE_CLASS_4
0B7A: 7F       RET                      (0743)     ret
0B7B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0744) ;
                                        (0745) ;   DO NOT PLACE
                                        (0746) ;   .SECTION
                                        (0747) ;   .ENDSECTION
                                        (0748) ;   _fSendStart USES CODE BELOW
                                        (0749) ;
                                        (0750) ;-----------------------------------------------------------------------------
                                        (0751) ;  FUNCTION NAME: I2CHW_fWrite
                                        (0752) ;
                                        (0753) ;  DESCRIPTION:
                                        (0754) ;    Writes a byte to the I2C master bus.
                                        (0755) ;
                                        (0756) ;-----------------------------------------------------------------------------
                                        (0757) ;
                                        (0758) ;  ARGUMENTS:
                                        (0759) ;    A contains Data to be written to I2C slave.
                                        (0760) ;
                                        (0761) ;  RETURNS:
                                        (0762) ;    1 If ACKed, else 0
                                        (0763) ;
                                        (0764) ;  SIDE EFFECTS:
                                        (0765) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0766) ;
                                        (0767) ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0768) ;
                                        (0769) ;  FUNCTION NAME: I2CHW_fWrite
                                        (0770) ;
                                        (0771) ;  DESCRIPTION:
                                        (0772) ;    Writes a data byte to the I2C master bus. 
                                        (0773) ;
                                        (0774) ;  ARGUMENTS:
                                        (0775) ;    Reg A contains slave address.
                                        (0776) ;    I2CHW_bData - Contains data to be transmitted.
                                        (0777) ;
                                        (0778) ;  RETURNS:
                                        (0779) ;    I2CHW_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0780) ;
                                        (0781) ;  SIDE EFFECTS:
                                        (0782) ;    The A and X registers may be modified by this or future implementations
                                        (0783) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0784) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0785) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0786) ;    functions.
                                        (0787) ;          
                                        (0788) ;    Currently only the page pointer registers listed below are modified: 
                                        (0789) ;          CUR_PP
                                        (0790) ;
                                        (0791) ;    Send data byte to slave. .
                                        (0792) ;
                                        (0793) ;   WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0794) ;    flag is set to return.
                                        (0795) ;
                                        (0796)  I2CHW_fWrite:
                                        (0797) _I2CHW_fWrite:
                                        (0798)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0799) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0800)     ; disable the interrupt
                                        (0801)         ; *** NOT REENABLED ***
                                        (0802)         ;
0B7E: 60 D8    MOV   REG[0xD8],A        (0803)     mov   reg[I2CHW_DR],A                                  ; Put data in Data Reg
0B80: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0804)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0B83: 5D D9    MOV   A,REG[0xD9]        (0805)     mov   A,  reg[I2CHW_MSCR]                              ;MSCR into A incase there is an error here
0B85: 49 D9 04 TST   REG[0xD9],0x4      (0806)     tst   reg[I2CHW_MSCR],I2CM_MASTEROP                    ;Do we have control of the bus?
0B88: A0 19    JZ    0x0BA2             (0807)     jz    Err_Exit_fWrite
                                        (0808) 
0B8A: 55 03 00 MOV   [0x3],0x0          (0809)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
0B8D: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0810)     ;SetI2CHW_SCR I2C_TX
                                        (0811)     ;mov   reg[I2CHW_SCR], I2C_TX                          ; Put data in Data Reg
                                        (0812) 
                                        (0813) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0814)         SetI2CHW_SCR I2C_TX                                ; Put data in Data Reg
                                        (0815) ;ELSE
                                        (0816) ;    mov   reg[I2CHW_SCR], I2C_TX                          ; Put data in Data Reg
                                        (0817) ;ENDIF
                                        (0818) 
                                        (0819) 
                                        (0820) I2CHW_write:
                                        (0821) _I2CHW_write:
                                        (0822) ;    mov   reg[I2CHW_SCR],A                                ; Put data in bData
                                        (0823) ;   jmp   I2CHW_get_ack                                    ; This jump is not required since it falls
                                        (0824) 
                                        (0825) WaitTXByteCompl:
0B90: 5D D7    MOV   A,REG[0xD7]        (0826)     mov   A, reg[I2CHW_SCR]
0B92: 49 D7 01 TST   REG[0xD7],0x1      (0827)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0B95: AF FA    JZ    0x0B90             (0828)     jz    WaitTXByteCompl
0B97: 49 D7 02 TST   REG[0xD7],0x2      (0829)     tst   reg[I2CHW_SCR], I2C_LST_BIT
0B9A: B0 07    JNZ   0x0BA2             (0830)     jnz   Err_Exit_fWrite
0B9C: 55 03 FF MOV   [0x3],0xFF         (0831)     mov   [I2CHW_bStatus], 0xff
0B9F: 50 01    MOV   A,0x1              (0832)     mov   A, 01
                                        (0833)     RAM_EPILOGUE RAM_USE_CLASS_4
0BA1: 7F       RET                      (0834)     ret
                                        (0835) 
                                        (0836) Err_Exit_fWrite:
0BA2: 50 00    MOV   A,0x0              (0837)     mov   A, 0
0BA4: 53 03    MOV   [0x3],A            (0838)     mov   [I2CHW_bStatus], A
                                        (0839)     RAM_EPILOGUE RAM_USE_CLASS_4
0BA6: 7F       RET                      (0840)     ret
0BA7: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0841) 
                                        (0842) .ENDSECTION
                                        (0843) 
                                        (0844) .SECTION
                                        (0845) ;-----------------------------------------------------------------------------
                                        (0846) ;  FUNCTION NAME: I2CHW_get_ack
                                        (0847) ;
                                        (0848) ;  DESCRIPTION:
                                        (0849) ;    Get slave acknowledge response. Used to poll for I2C_BYTE_COMPL and then test Ack (I2C_LST_BIT)
                                        (0850) ;
                                        (0851) ;-----------------------------------------------------------------------------
                                        (0852) ;
                                        (0853) ;  ARGUMENTS:
                                        (0854) ;
                                        (0855) ;  RETURNS:
                                        (0856) ;    Sets flag in I2CHW_bStatus if ACKed by Slave.  !!!
                                        (0857) ;
                                        (0858) ;  SIDE EFFECTS:
                                        (0859) ;    The A and X registers may be modified by this or future implementations
                                        (0860) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0861) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0862) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0863) ;    functions.
                                        (0864) ;          
                                        (0865) ;    Currently only the page pointer registers listed below are modified: 
                                        (0866) ;          CUR_PP
                                        (0867) ;
                                        (0868) ;    Do the ack clock and check for Slave ACK
                                        (0869) ;
                                        (0870) I2CHW_get_ack:
                                        (0871) _I2CHW_get_ack:
                                        (0872)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0873) 	RAM_SETPAGE_CUR >I2CHW_bStatus
0BAA: 26 03 FE AND   [0x3],0xFE         (0874)     and [I2CHW_bStatus], ~I2CHW_SLAVE_ACKed
0BAD: 49 D7 01 TST   REG[0xD7],0x1      (0875)     tst reg[I2CHW_SCR], I2C_BYTE_COMPL
0BB0: BF F6    JNZ   0x0BA7             (0876)     jnz I2CHW_get_ack
0BB2: 49 D7 02 TST   REG[0xD7],0x2      (0877)     tst reg[I2CHW_SCR], I2C_LST_BIT
0BB5: B0 04    JNZ   0x0BBA             (0878)     jnz notAcked
0BB7: 2E 03 01 OR    [0x3],0x1          (0879)     or [I2CHW_bStatus], I2CHW_SLAVE_ACKed
                                        (0880) notAcked:
                                        (0881)     RAM_EPILOGUE RAM_USE_CLASS_4
0BBA: 7F       RET                      (0882)     ret
0BBB: 62 D0 00 MOV   REG[0xD0],0x0      
0BBE: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0883) 
                                        (0884) .ENDSECTION
                                        (0885) 
                                        (0886) .SECTION
                                        (0887) 
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;  FUNCTION NAME: I2CHW_bRead
                                        (0890) ;
                                        (0891) ;  DESCRIPTION:
                                        (0892) ;    Reads 1 data byte from the I2C master bus.
                                        (0893) ;
                                        (0894) ;-----------------------------------------------------------------------------
                                        (0895) ;
                                        (0896) ;  ARGUMENTS:
                                        (0897) ;    Reg A Contains the Slave Address.
                                        (0898) ;    I2CHW_bStatus - Set for no ack to be followed by stop.
                                        (0899) ;    Clear for ack to indicate more data to follow.
                                        (0900) ;
                                        (0901) ;  RETURNS:
                                        (0902) ;    I2CHW_bData - Contains received data.
                                        (0903) ;
                                        (0904) ;  SIDE EFFECTS:
                                        (0905) ;    The A and X registers may be modified by this or future implementations
                                        (0906) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0907) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0908) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0909) ;    functions.
                                        (0910) ;          
                                        (0911) ;    Currently only the page pointer registers listed below are modified: 
                                        (0912) ;          CUR_PP
                                        (0913) ;
                                        (0914) ;    Must be followed by I2CHW_put_ack.
                                        (0915) ;    The I2CHW interrupt should be disabled since this routine will poll the
                                        (0916) ;    reg[I2CHW_SCR] to determine when a byte is available
                                        (0917) ;
                                        (0918) ;   WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0919) ;    flag is set to return.
                                        (0920) ;
                                        (0921) I2CHW_bRead:
                                        (0922) _I2CHW_bRead:
                                        (0923)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0924) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0925)     ; disable the interrupt
                                        (0926)     ; *** NOT REENABLED ***
                                        (0927)     ;
                                        (0928)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0BC1: 49 D9 04 TST   REG[0xD9],0x4      (0929)     tst       reg[I2CHW_MSCR], I2CM_MASTEROP               ;do we even have control of the bus?
0BC4: A0 28    JZ    0x0BED             (0930)     jz    notBusMaster2
                                        (0931) 
0BC6: 55 03 00 MOV   [0x3],0x0          (0932)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
                                        (0933)     ;or    I2CHW_SEND_ACK                                  ; Set ACK flag
                                        (0934) ;
                                        (0935) ; Check for the special case of the first read after and address is sent
                                        (0936) ;
                                        (0937) 
0BC9: 08       PUSH  A                  (0938)     push  A                                                ;preserve the information about wether to ACK or NAK this byte
0BCA: 5D D7    MOV   A,REG[0xD7]        (0939)     mov   A, reg[I2CHW_SCR]
0BCC: 49 D7 08 TST   REG[0xD7],0x8      (0940)     tst   reg[I2CHW_SCR], I2C_ADDRIN
0BCF: A0 04    JZ    0x0BD4             (0941)     jz    WaitRXByteCompl                                  ;addr bit not set then this is a normal read
0BD1: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0942)     ;SetI2CHW_SCR 0
                                        (0943)     ;mov   reg[I2CHW_SCR], 0                               ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0944) 
                                        (0945) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0946)     SetI2CHW_SCR 0                                         ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0947) ;ELSE
                                        (0948) ;    mov   reg[I2CHW_SCR], 0                               ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0949) ;ENDIF
                                        (0950)                                                            ; through to I2CHW_put_ack.
                                        (0951) 
                                        (0952)     ;must DROP through to send an Ack and another byte,
                                        (0953)     ;to stop reading we NAK the slave
                                        (0954) WaitRXByteCompl:
0BD4: 49 D7 01 TST   REG[0xD7],0x1      (0955)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0BD7: AF FC    JZ    0x0BD4             (0956)     jz    WaitRXByteCompl
                                        (0957) 
0BD9: 18       POP   A                  (0958)     pop   A                                                ;recover the saved ACK/NAK flag
0BDA: 21 FF    AND   A,0xFF             (0959)     and   A,0xFF                                           ; Is Ack flag set"
0BDC: A0 0A    JZ    0x0BE7             (0960)     jz    exit_bRead_NOACK                                 ; Don't ACK
                                        (0961) 
                                        (0962)         ;now if the ACK flag was set, Ack the data which will release the bus and start the next byte in
                                        (0963)         ;otherwise do NOTHING to the SCR reg.  This will allow the calling routine to generate a repeat start
                                        (0964)         ;or a stop depending on it's preference.
                                        (0965) 
                                        (0966) 
0BDE: 5D D8    MOV   A,REG[0xD8]        (0967)     mov   A, reg[I2CHW_DR]                                 ; Record data received
0BE0: 62 D7 10 MOV   REG[0xD7],0x10     
                                        (0968)     ;SetI2CHW_SCR I2C_ACKOUT
                                        (0969)     ;mov   reg[I2CHW_SCR], I2C_ACKOUT                      ; Record data received
                                        (0970) 
                                        (0971) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0972)     SetI2CHW_SCR I2C_ACKOUT                                ; Record data received
                                        (0973) ;ELSE
                                        (0974) ;    mov   reg[I2CHW_SCR], I2C_ACKOUT                      ; Record data received
                                        (0975) ;ENDIF
                                        (0976) 
0BE3: 55 03 01 MOV   [0x3],0x1          (0977)     mov   [I2CHW_bStatus],0x01                             ; Clear ACK flag
                                        (0978)     RAM_EPILOGUE RAM_USE_CLASS_4
0BE6: 7F       RET                      (0979)     ret
                                        (0980) 
                                        (0981) exit_bRead_NOACK:
0BE7: 5D D8    MOV   A,REG[0xD8]        (0982)     mov   A, reg[I2CHW_DR]                                 ; Record data received
                                        (0983)     ; send no Ack or Nak, the calling routine will have to decide to NAK or execute a repeat start.
                                        (0984)     ; sending nothing leaves the bus held in wait until a decision is made.
0BE9: 55 03 00 MOV   [0x3],0x0          (0985)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
                                        (0986)     RAM_EPILOGUE RAM_USE_CLASS_4
0BEC: 7F       RET                      (0987)     ret
                                        (0988) 
                                        (0989) notBusMaster2:
0BED: 55 03 FF MOV   [0x3],0xFF         (0990)    mov   [I2CHW_bStatus], 0xff
                                        (0991)    ;SetI2CHW_SCR 0
                                        (0992)    ;mov          reg[I2CHW_MSCR], 0                        ;we certainly cant restart if we've not Master
                                        (0993)    ;WHAT else should be done for this case?  Some sort of improper operation is being attempted.
                                        (0994)    RAM_EPILOGUE RAM_USE_CLASS_4
0BF0: 7F       RET                      (0995)    ret
                                        (0996) 
                                        (0997) .ENDSECTION
                                        (0998) 
                                        (0999) 
                                        (1000) .SECTION
                                        (1001) ;-----------------------------------------------------------------------------
                                        (1002) ;  FUNCTION NAME: I2CHW_SendStop
                                        (1003) ;
                                        (1004) ;  DESCRIPTION:
                                        (1005) ;    Assert stop condition.
                                        (1006) ;
                                        (1007) ;-----------------------------------------------------------------------------
                                        (1008) ;
                                        (1009) ;  ARGUMENTS: none
                                        (1010) ;
                                        (1011) ;  RETURNS: none
                                        (1012) ;
                                        (1013) ;  SIDE EFFECTS:
                                        (1014) ;    The A and X registers may be modified by this or future implementations
                                        (1015) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1016) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1017) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1018) ;    functions.
                                        (1019) ;
                                        (1020) ;  THEORY of OPERATION or PROCEDURE:
                                        (1021) ;     Send stop by releasing SDA high while SCL high. When in Master Read Mode, this
                                        (1022) ;     is done by nak'ing a read from the slave, in Master Write Mode this is done by clearing
                                        (1023) ;     the I2C_TX bit in  reg[I2CHW_SCR].  In either case this is a zero written to
                                        (1024) ;     reg[I2CHW_SCR].
                                        (1025) ;
                                        (1026)  I2CHW_SendStop:
                                        (1027) _I2CHW_SendStop:
                                        (1028)     RAM_PROLOGUE RAM_USE_CLASS_1
0BF1: 49 D9 04 TST   REG[0xD9],0x4      (1029)     tst   reg[I2CHW_MSCR], I2CM_MASTEROP                   ;do we even have control of the bus?
0BF4: A0 04    JZ    0x0BF9             (1030)     jz    notBusMaster3
0BF6: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (1031)     ;SetI2CHW_SCR 0
                                        (1032)     ;mov  reg[I2CHW_SCR], 0
                                        (1033) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (1034)     SetI2CHW_SCR 0                                         ; Put data in Data Reg
                                        (1035) ;ELSE
                                        (1036) ;    mov   reg[I2CHW_SCR], 0                               ; Put data in Data Reg
                                        (1037) ;ENDIF
                                        (1038) 
                                        (1039) notBusMaster3:
                                        (1040)     RAM_EPILOGUE RAM_USE_CLASS_1
0BF9: 7F       RET                      (1041)     ret
0BFA: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1042) .ENDSECTION
                                        (1043) 
                                        (1044) .SECTION
                                        (1045) ;-----------------------------------------------------------------------------
                                        (1046) ;  FUNCTION NAME: I2CHW_bReadBusStatus
                                        (1047) ;
                                        (1048) ;  DESCRIPTION:
                                        (1049) ;     Returns the Status bits in the bStatus Register
                                        (1050) ;
                                        (1051) ;-----------------------------------------------------------------------------
                                        (1052) ;
                                        (1053) ;  ARGUMENTS:
                                        (1054) ;
                                        (1055) ;  RETURNS:
                                        (1056) ;     BYTE  bStatus -  Bus status data.  Use the following defined bits
                                        (1057) ;     returned in A.
                                        (1058) ;       I2CHW_RepStart:                     equ  0x01
                                        (1059) ;       I2CHW_NoStop:                       equ  0x02
                                        (1060) ;       I2CHW_NAKnextWr:                    equ  0x04
                                        (1061) ;
                                        (1062) ;  SIDE EFFECTS:
                                        (1063) ;    The A and X registers may be modified by this or future implementations
                                        (1064) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1065) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1066) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1067) ;    functions.
                                        (1068) ;          
                                        (1069) ;  THEORY of OPERATION or PROCEDURE:
                                        (1070) ;     Read the Bus Status register.
                                        (1071) ;
                                        (1072) 
                                        (1073)  I2CHW_bReadBusStatus:
                                        (1074) _I2CHW_bReadBusStatus:
                                        (1075)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1076)    RAM_SETPAGE_CUR >I2CHW_bStatus				                      ;Set the Page Pointer for LMM
0BFD: 51 03    MOV   A,[0x3]            (1077)    mov   A, [I2CHW_bStatus]                      ;return the status in A
                                        (1078)    RAM_EPILOGUE RAM_USE_CLASS_4
0BFF: 7F       RET                      (1079)    ret
                                        (1080) 
                                        (1081) .ENDSECTION
                                        (1082) 
                                        (1083) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1084) .SECTION
                                        (1085) ;-----------------------------------------------------------------------------
                                        (1086) ;  FUNCTION NAME: I2CHW_fReadBytes
                                        (1087) ;
                                        (1088) ;  DESCRIPTION:
                                        (1089) ;
                                        (1090) ;-----------------------------------------------------------------------------
                                        (1091) ;
                                        (1092) ;  ARGUMENTS:
                                        (1093) ;      A => Address of slave
                                        (1094) ;      X => Pointer to other arguments.
                                        (1095) ;    [x] => LSB of Array address to put data in.
                                        (1096) ;  [X-1] => MSB of Array address to put data in (ignorned)
                                        (1097) ;  [X-2] => Count of bytes to read.
                                        (1098) ;  [X-3] => Mode flags that allow the programmer to set flags
                                        (1099) ;           to determine if:
                                        (1100) ;             0x01 => Use RepeatStart instead of Start
                                        (1101) ;             0x02 => Don't send Stop
                                        (1102) ;
                                        (1103) ;  RETURNS:       None
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;    I2C and block must be operational.
                                        (1117) ;    This routine will enable the I2C interrupt!
                                        (1118) ;    If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already running this routine will
                                        (1119) ;    pend on the ISR_ACTIVE bit until it can run
                                        (1120) ;
                                        (1121) IF	(TOOLCHAIN & HITECH)
                                        (1122) RxArray:      set   0
                                        (1123) RxByteCount:  set  -2
                                        (1124) RxMode:       set  -3
                                        (1125) ELSE
                                        (1126) RxArray:      equ   0
                                        (1127) RxByteCount:  equ  -2
                                        (1128) RxMode:       equ  -3
                                        (1129) ENDIF
                                        (1130) 
                                        (1131) 
                                        (1132)  I2CHW_fReadBytes:
                                        (1133)     push  A
                                        (1134) I2CMSCR_NotReady1Smm:
                                        (1135)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1136)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1137)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1138)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1139)           ;For multi master operations, a pening start or restart
                                        (1140)           ;request might be OK, the master might be waiting to
                                        (1141)           ;acquire the bus from another master
                                        (1142)         jnz   I2CMSCR_NotReady1Smm
                                        (1143)     pop   A
                                        (1144)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ; flag set here and cleared by ISR
                                        (1145)     asl   A                                                ; Shift address to the left to make
                                        (1146)                                                            ; a complete byte with the R/W bit.
                                        (1147)     or    A,0x01                                           ; OR the address with the Read bit.
                                        (1148)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1149)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1150)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1151)     mov   A, [X+RxMode]                                                             ; place the RxMode in status so ISR can access it
                                        (1152)     mov   [I2CHW_bStatus],A
                                        (1153)     ;
                                        (1154)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1155)         ;
                                        (1156)         push   X                                                ;preserve since it's used later
                                        (1157)         mov    A, [X+RxByteCount]                               ;get the write buf size
                                        (1158)         push   A
                                        (1159)         push   A                                                                                            ;this will be ignored
                                        (1160)         mov    A, [X+RxArray]                                   ;get the write buf addr
                                        (1161)         push   A
                                        (1162)         mov    X, sp
                                        (1163)         dec    X
                                        (1164)         call  I2CHW_InitWrite                              ;sets the addr and byte count to write to
                                        (1165)         add SP, -3
                                        (1166)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (1167) 
                                        (1168)     mov   A,[I2CHW_SlaveAddr]
                                        (1169)     tst   [x+RxMode],I2CHW_RepStart
                                        (1170)     jnz   DoRestartRxSmm
                                        (1171)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1172)     jnz   DoRestartRxSmm
                                        (1173)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1174)     jmp   CheckRxAckSmm
                                        (1175) DoRestartRxSmm:
                                        (1176)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1177)         ;note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
                                        (1178)         ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
                                        (1179)         ; as a whole be able to detect that a stop has not been sent previously in this transmission.
                                        (1180) 
                                        (1181) CheckRxAckSmm:                                                ; Test to see if Slave ACKed
                                        (1182)         ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
                                        (1183)         ;is finished.
                                        (1184) ;End_RD:
                                        (1185)     ret
                                        (1186) 
                                        (1187) .ENDSECTION
                                        (1188) 
                                        (1189) .SECTION
                                        (1190) ;-----------------------------------------------------------------------------
                                        (1191) ;  FUNCTION NAME: I2CHW_bWriteBytes
                                        (1192) ;
                                        (1193) ;  DESCRIPTION:
                                        (1194) ;    Write multiple data bits to slave device.
                                        (1195) ;
                                        (1196) ;-----------------------------------------------------------------------------
                                        (1197) ;
                                        (1198) ;  ARGUMENTS:
                                        (1199) ;     A => Address of slave
                                        (1200) ;     X => Pointer to other arguments.
                                        (1201) ;   [x] => LSB of Array address to put data in.
                                        (1202) ; [X-1] => MSB of Array address to put data in (ignorned)
                                        (1203) ; [X-2] => Count of bytes to write.
                                        (1204) ; [X-3] => Mode flags that allow the programmer to set flags
                                        (1205) ;          to determine if:
                                        (1206) ;              0x01 => Use RePeatStart instead of Start
                                        (1207) ;              0x02 => Don't send Stop
                                        (1208) ;
                                        (1209) ;
                                        (1210) ;  RETURNS:     None
                                        (1211) ;
                                        (1212) ;  SIDE EFFECTS:
                                        (1213) ;    The A and X registers may be modified by this or future implementations
                                        (1214) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1215) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1216) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1217) ;    functions.
                                        (1218) ;          
                                        (1219) IF	(TOOLCHAIN & HITECH)
                                        (1220) TxArray:      set   0
                                        (1221) TxByteCount:  set  -2
                                        (1222) TxMode:       set  -3
                                        (1223) ELSE
                                        (1224) TxArray:      equ   0
                                        (1225) TxByteCount:  equ  -2
                                        (1226) TxMode:       equ  -3
                                        (1227) ENDIF
                                        (1228) 
                                        (1229)  I2CHW_bWriteBytes:
                                        (1230)     push  A
                                        (1231) I2CMSCR_NotReady2Smm:
                                        (1232)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1233)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1234)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1235)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1236)           ;For multi master operations, a pening start or restart
                                        (1237)           ;request might be OK, the master might be waiting to
                                        (1238)           ;acquire the bus from another master
                                        (1239)         jnz   I2CMSCR_NotReady2Smm
                                        (1240)     pop   A
                                        (1241)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ; flag set here and cleared at end of ISR
                                        (1242)     asl   A                                                ; Shift address to the left to make
                                        (1243)                                                            ; a complete byte with the R/W bit.
                                        (1244)                                                            ; The ASL takes care of clearing bit 0.
                                        (1245)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1246)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1247)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1248)     mov   A, [X+TxMode]                                                             ; place the TxMode in status so ISR can access it
                                        (1249)     mov   [I2CHW_bStatus],A
                                        (1250)     ;
                                        (1251)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1252)         ;
                                        (1253)         push   X                                                ;preserve since it's used later
                                        (1254)         inc    [X+TxByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (1255)                                                                 ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
                                        (1256)         mov    A, [X+TxByteCount]                               ;get the write buf size
                                        (1257)         push   A
                                        (1258)         push   A                                                                                            ;this will be ignored
                                        (1259)         mov    A, [X+TxArray]                                   ;get the write buf addr
                                        (1260)         push   A
                                        (1261)         mov    X, sp
                                        (1262)         dec    X
                                        (1263)         call  I2CHW_InitRamRead                            ;sets the addr and byte count to write to
                                        (1264)         add    SP, -3
                                        (1265)         pop    X                                                ;restore X to be used for the rest of this routine
                                        (1266)     ;and  [I2CHW_RsrcStatus],~I2C_READFLASH                ;shouldn't be needed should have been taken care of in InitRamRead routine
                                        (1267) 
                                        (1268) 
                                        (1269)     mov   A,[I2CHW_SlaveAddr]
                                        (1270)     tst   [x+TxMode],I2CHW_RepStart
                                        (1271)     jnz   DoRestartTxSmm
                                        (1272)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1273)     jnz   DoRestartRxSmm
                                        (1274)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1275)     jmp   DoTxAckSmm
                                        (1276) DoRestartTxSmm:
                                        (1277)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1278) DoTxAckSmm:
                                        (1279) 
                                        (1280) 
                                        (1281) ;WriteSlaveAck:
                                        (1282)     ret
                                        (1283) 
                                        (1284) .ENDSECTION
                                        (1285) 
                                        (1286) .SECTION
                                        (1287) ;-----------------------------------------------------------------------------
                                        (1288) ;  FUNCTION NAME: I2CHW_bWriteCBytes
                                        (1289) ;
                                        (1290) ;  DESCRIPTION:
                                        (1291) ;    Write multiple data bits to slave device from ROM
                                        (1292) ;
                                        (1293) ;-----------------------------------------------------------------------------
                                        (1294) ;
                                        (1295) ;  ARGUMENTS:
                                        (1296) ;      A => Address of slave
                                        (1297) ;      X => Pointer to other arguments.
                                        (1298) ;     [x] => LSB of ROM Array address to put data in.
                                        (1299) ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                                        (1300) ;   [X-2] => Count of bytes to write.
                                        (1301) ;   [X-3] => Mode flags that allow the programmer to set flags
                                        (1302) ;            to determine if:
                                        (1303) ;               0x01 => Use RepeatStart instead of Start
                                        (1304) ;               0x02 => Don't send Stop
                                        (1305) ;
                                        (1306) ;  RETURNS:
                                        (1307) ;    None
                                        (1308) ;
                                        (1309) ;  SIDE EFFECTS:
                                        (1310) ;    The A and X registers may be modified by this or future implementations
                                        (1311) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1313) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1314) ;    functions.
                                        (1315) ;          
                                        (1316) IF	(TOOLCHAIN & HITECH)
                                        (1317) TxCArrayLSB:   set   0
                                        (1318) TxCArrayMSB:   set  -1
                                        (1319) TxCByteCount:  set  -2
                                        (1320) TxCMode:       set  -3
                                        (1321) ELSE
                                        (1322) TxCArrayLSB:   equ   0
                                        (1323) TxCArrayMSB:   equ  -1
                                        (1324) TxCByteCount:  equ  -2
                                        (1325) TxCMode:       equ  -3
                                        (1326) ENDIF
                                        (1327) 
                                        (1328)  I2CHW_bWriteCBytes:
                                        (1329)     push  A
                                        (1330) I2CMSCR_NotReady3Smm:
                                        (1331)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1332)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1333)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1334)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1335)           ;For multi master operations, a pening start or restart
                                        (1336)           ;request might be OK, the master might be waiting to
                                        (1337)           ;acquire the bus from another master
                                        (1338)         jnz   I2CMSCR_NotReady3Smm
                                        (1339)     pop   A
                                        (1340)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ;lag set here but cleared in ISRf
                                        (1341)         asl   A                                                 ; Shift address to the left to make
                                        (1342)                                                            ; a complete byte with the R/W bit.
                                        (1343)                                                            ; The ASL takes care of clearing bit 0.
                                        (1344)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1345)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1346)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1347)         mov   A, [X+RxMode]                                                             ; place the RxMode in status so ISR can access it
                                        (1348)     mov   [I2CHW_bStatus],A
                                        (1349)     ;
                                        (1350)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1351)         ;
                                        (1352)         push   X                                                ;preserve X since it's used later
                                        (1353)         mov    A, 0                                             ;get the write buf size (this is the hi order part)
                                        (1354)         inc    [X+TxCByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (1355)         jnc     . + 3                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
                                        (1356)         inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
                                        (1357)         push   A
                                        (1358)         mov    A, [X+TxCByteCount]                              ;initFlasRead needs a 2 byte count this is the low ord byte
                                        (1359)         push   A
                                        (1360)         mov    A, [X+TxCArrayMSB]                               ;get the write buf addr
                                        (1361)         push   A                                                                                        ;this will be ignored
                                        (1362)         mov    A, [X+TxCArrayLSB]                               ;get the write buf addr
                                        (1363)         push   A
                                        (1364)         mov    X, sp
                                        (1365)         dec    X
                                        (1366)         call  I2CHW_InitFlashRead                          ;sets the addr and byte count to write to
                                        (1367)         add SP, -4
                                        (1368)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (1369)     ;or  [I2CHW_RsrcStatus],I2C_READFLASH
                                        (1370)     mov   A,[I2CHW_SlaveAddr]
                                        (1371)     tst   [x+TxMode],I2CHW_RepStart                        ; Check if a Start or RepeatStart
                                        (1372)     jnz   DoCRestartTxSmm                                      ; should executed.
                                        (1373)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1374)     jnz   DoRestartRxSmm
                                        (1375)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1376)     jmp   DoCTxAckSmm
                                        (1377) DoCRestartTxSmm:
                                        (1378)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1379) 
                                        (1380) DoCTxAckSmm:                                                   ; Test to see if Slave is ACKed
                                        (1381) 
                                        (1382) ;CWriteSlaveAck:
                                        (1383)         ret
                                        (1384) 
                                        (1385) .ENDSECTION
                                        (1386) 
                                        (1387) 
                                        (1388) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (1389) 
                                        (1390) ; End of File I2CHW.asm
                                        (1391) 
                                        (1392) 
FILE: lib\i2chwint.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHWINT.asm
                                        (0004) ;;   Version: 2.00, Updated on 2014/7/14 at 8:13:58
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2CHW Master Interrupt Service Routine
                                        (0008) ;;  This is the interrupt service routine for the Single Master I2C function.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "I2CHWCommon.inc"
                                        (0017) include "I2CHWMstr.inc"
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export     I2CHW_Read_Count
                                        (0024) export    _I2CHW_Read_Count
                                        (0025) export     I2CHW_Write_Count
                                        (0026) export    _I2CHW_Write_Count
                                        (0027) 
                                        (0028) export    pI2CHW_Read_BufLO
                                        (0029) export   _pI2CHW_Read_BufLO
                                        (0030) export    pI2CHW_Write_BufLO
                                        (0031) export   _pI2CHW_Write_BufLO
                                        (0032) export    I2CHW_RsrcStatus
                                        (0033) export   _I2CHW_RsrcStatus
                                        (0034) export    I2CHW_SlaveAddr
                                        (0035) export   _I2CHW_SlaveAddr
                                        (0036) 
                                        (0037) ;-----------------------------------------------
                                        (0038) ; WARNING: The variables below are deprecated
                                        (0039) ; and have been replaced with Read_BufLO
                                        (0040) ; and Write_BufLO
                                        (0041) ;-----------------------------------------------
                                        (0042) export    pI2CHW_Read_Buf
                                        (0043) export   _pI2CHW_Read_Buf
                                        (0044) export    pI2CHW_Write_Buf
                                        (0045) export   _pI2CHW_Write_Buf
                                        (0046) ;-----------------------------------------------
                                        (0047) ; END WARNING
                                        (0048) ;-----------------------------------------------
                                        (0049)  
                                        (0050) area InterruptRAM(RAM, REL, CON)
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ; Variable Allocation
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056)   I2CHW_SlaveAddr:
                                        (0057)  _I2CHW_SlaveAddr:                           blk      1
                                        (0058)   I2CHW_RsrcStatus:
                                        (0059)  _I2CHW_RsrcStatus:                          blk     1
                                        (0060)   I2CHW_Write_Count:
                                        (0061)  _I2CHW_Write_Count:                         blk    1
                                        (0062) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0063) export    pI2CHW_Write_BufHI
                                        (0064) export   _pI2CHW_Write_BufHI
                                        (0065) 
                                        (0066)  pI2CHW_Write_BufHI:
                                        (0067) _pI2CHW_Write_BufHI:                         blk     1
                                        (0068) ENDIF
                                        (0069) ;-----------------------------------------------
                                        (0070) ; WARNING: The variable below is deprecated
                                        (0071) ; and has been replaced Write_BufLO
                                        (0072) ;-----------------------------------------------
                                        (0073)  pI2CHW_Write_Buf:
                                        (0074) _pI2CHW_Write_Buf:
                                        (0075) ;-----------------------------------------------
                                        (0076) ; END WARNING
                                        (0077) ;-----------------------------------------------
                                        (0078)  pI2CHW_Write_BufLO:
                                        (0079) _pI2CHW_Write_BufLO:                         blk      1
                                        (0080) 
                                        (0081) IF I2CHW_READ_FLASH
                                        (0082) export    pI2CHW_Read_BufHI
                                        (0083) export   _pI2CHW_Read_BufHI
                                        (0084) 
                                        (0085)  pI2CHW_Read_BufHI:
                                        (0086) _pI2CHW_Read_BufHI:                          blk     1
                                        (0087) ELSE
                                        (0088) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0089) export    pI2CHW_Read_BufHI
                                        (0090) export   _pI2CHW_Read_BufHI
                                        (0091) 
                                        (0092)  pI2CHW_Read_BufHI:
                                        (0093) _pI2CHW_Read_BufHI:                          blk     1
                                        (0094) ENDIF
                                        (0095) ENDIF
                                        (0096) 
                                        (0097) ;-----------------------------------------------
                                        (0098) ; WARNING: The variable below is deprecated
                                        (0099) ; and has been replaced Read_BufLO
                                        (0100) ;-----------------------------------------------
                                        (0101)  pI2CHW_Read_Buf:
                                        (0102) _pI2CHW_Read_Buf:
                                        (0103) ;-----------------------------------------------
                                        (0104) ; END WARNING
                                        (0105) ;-----------------------------------------------
                                        (0106)  pI2CHW_Read_BufLO:
                                        (0107) _pI2CHW_Read_BufLO:                          blk       1
                                        (0108) 
                                        (0109) IF I2CHW_READ_FLASH
                                        (0110) export    I2CHW_Read_CountHI
                                        (0111) export   _I2CHW_Read_CountHI
                                        (0112) 
                                        (0113)  I2CHW_Read_CountHI:
                                        (0114) _I2CHW_Read_CountHI:                         blk    1
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)  I2CHW_Read_Count:
                                        (0118) _I2CHW_Read_Count:                           blk      1
                                        (0119) 
                                        (0120) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0121) ;---------------------------------------------------
                                        (0122) ; Insert your custom declarations below this banner
                                        (0123) ;---------------------------------------------------
                                        (0124) 
                                        (0125) ;------------------------
                                        (0126) ; Includes
                                        (0127) ;------------------------
                                        (0128) 
                                        (0129) 	
                                        (0130) ;------------------------
                                        (0131) ;  Constant Definitions
                                        (0132) ;------------------------
                                        (0133) 
                                        (0134) 
                                        (0135) ;------------------------
                                        (0136) ; Variable Allocation
                                        (0137) ;------------------------
                                        (0138) 
                                        (0139) 
                                        (0140) ;---------------------------------------------------
                                        (0141) ; Insert your custom declarations above this banner
                                        (0142) ;---------------------------------------------------
                                        (0143) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0144) 
                                        (0145) 
                                        (0146) 
                                        (0147) AREA UserModules (ROM, REL)
                                        (0148) 
                                        (0149) 
                                        (0150) export _I2CHW_ISR
                                        (0151) ;;****************************************************
                                        (0152) ;; I2C_MASTER  main entry point from vector 60h
                                        (0153) ;;
                                        (0154) ;;****************************************************
                                        (0155) 
                                        (0156) 
                                        (0157) _I2CHW_ISR:
0C00: 08       PUSH  A                  (0158)     push A
0C01: 10       PUSH  X                  (0159)     push X
0C02: 5D D3    MOV   A,REG[0xD3]        
0C04: 08       PUSH  A                  
                                        (0160) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0161)     REG_PRESERVE IDX_PP
                                        (0162) ENDIF
                                        (0163)     
                                        (0164)     ; Stop trap is not recommended because the stop bit cannot be cleared
                                        (0165)     ; User may choose to enable it
                                        (0166)     ; Add code to handle stop condition here
                                        (0167) 
0C05: 49 D7 08 TST   REG[0xD7],0x8      (0168)     tst reg[I2CHW_SCR], I2C_ADDRIN
0C08: A0 18    JZ    0x0C21             (0169)     jz DataState
                                        (0170)     ;test for a start condition sent out, or bus error, ack from slave, or (lost arb & addr)
                                        (0171) AddrState:
0C0A: 49 D9 01 TST   REG[0xD9],0x1      (0172)     tst reg[I2CHW_MSCR], I2CM_SNDSTRT
0C0D: B0 2F    JNZ   0x0C3D             (0173)     jnz NoStart
0C0F: 49 D7 02 TST   REG[0xD7],0x2      (0174)     tst reg[I2CHW_SCR], ( I2C_LST_BIT )                    ;must be a zero or no slave answered
0C12: B0 1E    JNZ   0x0C31             (0175)     jnz SlaveAddrNAK
                                        (0176)                                                            ;slave must have acked here
                                        (0177)                                                            
0C14: 47 04 01 TST   [0x4],0x1          (0178)     tst [I2CHW_SlaveAddr], 01                              ;bit 0 = 1 then read (from slave and put it in RAM,
                                        (0179)                                                            ;bit 0 = 0 then write to slave and get it from RAM or Flash
0C17: B0 2E    JNZ   0x0C46             (0180)     jnz I2C_ReadSlave1stByte                               ;bit 0 was 1
0C19: 80 A7    JMP   0x0CC1             (0181)     jmp I2C_WriteSlave1stByte                              ;bit 0 was 0
0C1B: 18       POP   A                  
0C1C: 60 D3    MOV   REG[0xD3],A        
                                        (0182) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0183)     REG_RESTORE IDX_PP
                                        (0184) ENDIF
0C1E: 20       POP   X                  (0185)     pop X
0C1F: 18       POP   A                  (0186)     pop A
0C20: 7E       RETI                     (0187)     reti
                                        (0188) 
                                        (0189) DataState:
0C21: 2E 05 80 OR    [0x5],0x80         (0190)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
0C24: 47 04 01 TST   [0x4],0x1          (0191)     tst [I2CHW_SlaveAddr], 01                              ;bit 0 = 1 then read, bit 0 = 0 then write
0C27: B0 2D    JNZ   0x0C55             (0192)     jnz I2C_ReadSlave                                      ;bit 0 was 1
                                        (0193) 
                                        (0194) StillDataToWrite:
0C29: 80 9D    JMP   0x0CC7             (0195)     jmp I2C_WriteSlave                                     ;bit 0 was 0
0C2B: 18       POP   A                  
0C2C: 60 D3    MOV   REG[0xD3],A        
                                        (0196) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0197)     REG_RESTORE IDX_PP
                                        (0198) ENDIF
0C2E: 20       POP   X                  (0199)     pop X
0C2F: 18       POP   A                  (0200)     pop A
0C30: 7E       RETI                     (0201)     reti
0C31: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0202) 
                                        (0203) 
                                        (0204) SlaveAddrNAK:
                                        (0205)     ;;
                                        (0206)     ;; all there is to do here is to return, the slave didn't respond so it's not there or needs
                                        (0207)     ;; to be tried later.
                                        (0208)     ;;
                                        (0209) ;@PSoC_UserCode_BODY4@ (Do not change this line.)
                                        (0210) ;---------------------------------------------------
                                        (0211) ; Insert your custom code below this banner
                                        (0212) ; to modify the way a NAK from a slave is handled
                                        (0213) ; possibly set a user defined status
                                        (0214) ;---------------------------------------------------
                                        (0215) 
                                        (0216) ;********************************************************
                                        (0217) ; End user I2C Buffered WRITE (to RAM) Customization
                                        (0218) ;********************************************************
                                        (0219) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0220) ;
                                        (0221) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0222) ;
                                        (0223)     SetI2CHW_SCR 0     ;sets the tx/rx bit to receive, generates a stop without sending any data
                                        (0224) 
0C34: 26 05 7F AND   [0x5],0x7F         (0225)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0C37: 18       POP   A                  
0C38: 60 D3    MOV   REG[0xD3],A        
                                        (0226) 
                                        (0227) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0228)     REG_RESTORE IDX_PP
                                        (0229) ENDIF
0C3A: 20       POP   X                  (0230)     pop X
0C3B: 18       POP   A                  (0231)     pop A
0C3C: 7E       RETI                     (0232)     reti
                                        (0233) 
                                        (0234) NoStart:
                                        (0235)     ;here might test loss of arbitration and the presence of an address bit indicating that the
                                        (0236)     ;Master is being addressed as a slave.
                                        (0237)     ;;
                                        (0238)     ;; there may be a need to indicate that there was a Master transmission
                                        (0239)     ;; failure or an unsuccessful attempt.
                                        (0240)     ;;
0C3D: 26 05 7F AND   [0x5],0x7F         (0241)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0C40: 18       POP   A                  
0C41: 60 D3    MOV   REG[0xD3],A        
                                        (0242) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0243)     REG_RESTORE IDX_PP
                                        (0244) ENDIF
0C43: 20       POP   X                  (0245)     pop X
0C44: 18       POP   A                  (0246)     pop A
0C45: 7E       RETI                     (0247)     reti
                                        (0248) 
                                        (0249) I2C_ReadSlave1stByte:
0C46: 2E 05 80 OR    [0x5],0x80         (0250)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
0C49: 26 05 FB AND   [0x5],0xFB         (0251)     and [I2CHW_RsrcStatus], ~I2CHW_RD_COMPLETE
0C4C: 62 D7 00 MOV   REG[0xD7],0x0      
0C4F: 18       POP   A                  
0C50: 60 D3    MOV   REG[0xD3],A        
                                        (0252) 
                                        (0253) ;read normal data in from slave immediately after the address is sent, there is no data to read
                                        (0254) ;but the bus is stalled at byte complete
                                        (0255) 
                                        (0256) ;
                                        (0257) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0258) ;
                                        (0259)     SetI2CHW_SCR 0     ;sets the tx/rx bit to receive, and clocks a byte in
                                        (0260) 
                                        (0261) 
                                        (0262) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0263)     REG_RESTORE IDX_PP
                                        (0264) ENDIF
0C52: 20       POP   X                  (0265)     pop X
0C53: 18       POP   A                  (0266)     pop A
0C54: 7E       RETI                     (0267)     reti
                                        (0268) 
                                        (0269) I2C_ReadSlave:                                             ;this is just a normal read
                                        (0270) 
                                        (0271) 
                                        (0272) ;;code snipped from old SW I2C below
                                        (0273) ;
                                        (0274) ; MASTER READ from SLAVE
                                        (0275) ; (and writing to it's own RAM--Write_Buf and Write_Cnt)
                                        (0276) ;
                                        (0277) ;@PSoC_UserCode_BODY1_V1.2@ (Do not change this line.)
                                        (0278) ;---------------------------------------------------
                                        (0279) ; Insert your custom code below this banner
                                        (0280) ;---------------------------------------------------
                                        (0281) 
                                        (0282) ;********************************************************
                                        (0283) ; By modifying the section from here down to the next comment block
                                        (0284) ; a user could process data for a custom I2C Master Read (write to RAM) application
                                        (0285) ; NOTE: I2C handshakes (ACK/NAK may be effected by any introduced bugs)
                                        (0286) ;********************************************************
0C55: 47 03 04 TST   [0x3],0x4          (0287)    tst   [I2CHW_bStatus], fI2C_NAKnextWr
0C58: B0 14    JNZ   0x0C6D             (0288)    jnz   InStoreData
                                        (0289)    ;
                                        (0290)    ;process write data here
                                        (0291)    ;
0C5A: 7A 06    DEC   [0x6]              (0292)    dec   [I2CHW_Write_Count]
0C5C: C0 4F    JC    0x0CAC             (0293)    jc    CompleteRDXfer                                              ; carry set if value became -1
                                        (0294)    ;jz    InStoreData                                                                                             ;In theory overflow cant happen but stop the transaction anyway.
0C5E: 3C 06 00 CMP   [0x6],0x0          (0295)    cmp   [I2CHW_Write_Count], 00                                     ;set nak flag, dec count, and store data
0C61: A0 03    JZ    0x0C65             (0296)    jz    InNakNextByte
0C63: 80 06    JMP   0x0C6A             (0297)    jmp   InNotBufEnd
                                        (0298) InNakNextByte:                                                       ;set the nakflag in I2CHW_bStatus
0C65: 2E 03 04 OR    [0x3],0x4          (0299)    or    [I2CHW_bStatus], fI2C_NAKnextWr
0C68: 80 04    JMP   0x0C6D             (0300)    jmp   InStoreData
                                        (0301) InNotBufEnd:
0C6A: 26 03 FB AND   [0x3],0xFB         (0302)    and   [I2CHW_bStatus], ~fI2C_NAKnextWr                            ;clear the nak flag in case it was set from a previous operation
                                        (0303) InStoreData:
                                        (0304)    ;This is the ONLY place this bit is set  This bit should never be cleared by the isr ONLY by the API ClrWrStatus()
0C6D: 2E 05 10 OR    [0x5],0x10         (0305)    or    [I2CHW_RsrcStatus], I2CHW_WR_NOERR                          ;set current status
                                        (0306) IF SYSTEM_LARGE_MEMORY_MODEL
0C70: 51 07    MOV   A,[0x7]            (0307)    mov   A, [pI2CHW_Write_BufHI]
0C72: 60 D3    MOV   REG[0xD3],A        
                                        (0308) ENDIF
                                        (0309)    RAM_SETPAGE_IDX A
0C74: 58 08    MOV   X,[0x8]            (0310)    mov   X, [pI2CHW_Write_BufLO]
0C76: 5D D8    MOV   A,REG[0xD8]        (0311)    mov   A, reg[I2CHW_DR]
0C78: 70 3F    AND   F,0x3F             
0C7A: 71 80    OR    F,0x80             
                                        (0312)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0C7C: 54 00    MOV   [X+0],A            (0313)    mov   [X], A
0C7E: 70 3F    AND   F,0x3F             
0C80: 71 00    OR    F,0x0              
                                        (0314)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0C82: 76 08    INC   [0x8]              (0315)    inc   [pI2CHW_Write_BufLO]
                                        (0316) 
0C84: 47 03 04 TST   [0x3],0x4          (0317)    tst   [I2CHW_bStatus], fI2C_NAKnextWr
0C87: B0 0A    JNZ   0x0C92             (0318)    jnz   NAK_this_one
0C89: 62 D7 10 MOV   REG[0xD7],0x10     
0C8C: 18       POP   A                  
0C8D: 60 D3    MOV   REG[0xD3],A        
                                        (0319) 
                                        (0320) ;********************************************************
                                        (0321) ; End user I2C Buffered WRITE (to RAM) Customization
                                        (0322) ;********************************************************
                                        (0323) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0324) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0325) 
                                        (0326) ;
                                        (0327) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0328) ;
                                        (0329)     SetI2CHW_SCR I2C_ACKOUT                                          ;send Ack
                                        (0330) 
                                        (0331) 
                                        (0332) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0333)     REG_RESTORE IDX_PP
                                        (0334) ENDIF
0C8F: 20       POP   X                  (0335)     pop X
0C90: 18       POP   A                  (0336)     pop A
0C91: 7E       RETI                     (0337)     reti
                                        (0338) 
                                        (0339) NAK_this_one:
                                        (0340) 
0C92: 26 03 FB AND   [0x3],0xFB         (0341)     and  [I2CHW_bStatus], ~fI2C_NAKnextWr
                                        (0342) 
                                        (0343)     ; *****
                                        (0344)     ; here we may need to look at the mode that this was called under
                                        (0345)     ; what does the user want done on the last byte.  Could be a send restart...
                                        (0346)     ; ******
0C95: 26 05 F8 AND   [0x5],0xF8         (0347)     and   [I2CHW_RsrcStatus], ~0x07                                  ;clear the read status bits
0C98: 2E 05 01 OR    [0x5],0x1          (0348)     or    [I2CHW_RsrcStatus], I2CHW_RD_NOERR
0C9B: 2E 05 04 OR    [0x5],0x4          (0349)     or    [I2CHW_RsrcStatus], I2CHW_RD_COMPLETE
                                        (0350) 
0C9E: 26 03 03 AND   [0x3],0x3          (0351)     and [I2CHW_bStatus], (I2CHW_RepStart | I2CHW_NoStop)
0CA1: A0 0A    JZ    0x0CAC             (0352)     jz      CompleteRDXfer
0CA3: 26 05 7F AND   [0x5],0x7F         (0353)     and   [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0CA6: 18       POP   A                  
0CA7: 60 D3    MOV   REG[0xD3],A        
                                        (0354) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0355)     REG_RESTORE IDX_PP
                                        (0356) ENDIF
0CA9: 20       POP   X                  (0357)     pop X
0CAA: 18       POP   A                  (0358)     pop A
0CAB: 7E       RETI                     (0359)     reti
0CAC: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0360)     ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
                                        (0361)     ;The NAK (not I2C_SNDACK) bit in I2C_SCR below will automatically generate a stop
                                        (0362) 
                                        (0363) CompleteRDXfer:
                                        (0364) 
                                        (0365) ;
                                        (0366) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0367) ;
                                        (0368)     SetI2CHW_SCR 0                                                   ;send Ack
                                        (0369) 
                                        (0370) 
0CAF: 26 05 7F AND   [0x5],0x7F         (0371)     and   [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0CB2: 18       POP   A                  
0CB3: 60 D3    MOV   REG[0xD3],A        
                                        (0372) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0373)     REG_RESTORE IDX_PP
                                        (0374) ENDIF
0CB5: 20       POP   X                  (0375)     pop X
0CB6: 18       POP   A                  (0376)     pop A
0CB7: 7E       RETI                     (0377)     reti                                                             ;return and wait for the next interrupt (on data)
0CB8: 62 D7 10 MOV   REG[0xD7],0x10     
0CBB: 18       POP   A                  
0CBC: 60 D3    MOV   REG[0xD3],A        
                                        (0378) 
                                        (0379) AckTheRead:
                                        (0380) 
                                        (0381) ;
                                        (0382) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0383) ;
                                        (0384)     SetI2CHW_SCR I2C_ACKOUT                                          ;send Ack
                                        (0385) 
                                        (0386) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0387)     REG_RESTORE IDX_PP
                                        (0388) ENDIF
0CBE: 20       POP   X                  (0389)     pop X
0CBF: 18       POP   A                  (0390)     pop A
0CC0: 7E       RETI                     (0391)     reti
                                        (0392) 
                                        (0393) 
                                        (0394) I2C_WriteSlave1stByte:
                                        (0395) ;write normal data to slave
0CC1: 26 05 BF AND   [0x5],0xBF         (0396)     and [I2CHW_RsrcStatus], ~I2CHW_WR_COMPLETE
0CC4: 2E 05 80 OR    [0x5],0x80         (0397)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0398) 
                                        (0399) 
                                        (0400) I2C_WriteSlave:
                                        (0401) 
0CC7: 49 D7 02 TST   REG[0xD7],0x2      (0402)     tst reg[I2CHW_SCR], ( I2C_LST_BIT )                    ;must be a zero or no slave answered
0CCA: B0 4C    JNZ   0x0D17             (0403)     jnz SlaveDataNAK
0CCC: 50 04    MOV   A,0x4              (0404)     mov A, (I2C_TX)
0CCE: 08       PUSH  A                  (0405)     push A
                                        (0406) 
                                        (0407) ;
                                        (0408) ;MASTER is WRITING TO SLAVE (& reading data from ram or flash buffer)
                                        (0409) ;
                                        (0410) ;;code snipped from SW I2C below
                                        (0411) 
                                        (0412) I2C_ObtainOutData:
                                        (0413) 
                                        (0414) 
                                        (0415) ;********************************************************
                                        (0416) ; here we need to get the next data to output (master-read)
                                        (0417) ; also set the status byte for use on exit
                                        (0418) ;********************************************************
                                        (0419) IF I2CHW_READ_FLASH
                                        (0420) ;@PSoC_UserCode_BODY2_V1.2@ (Do not change this line.)
                                        (0421) ;---------------------------------------------------
                                        (0422) ; Insert your custom code below this banner
                                        (0423) ; to modify the way a master might read non-volitile data
                                        (0424) ; to send.
                                        (0425) ;---------------------------------------------------
                                        (0426) 
                                        (0427)     tst  [I2CHW_RsrcStatus],I2CHW_READFLASH
                                        (0428)     jz   ReadOutData
                                        (0429) 
                                        (0430)     ;
                                        (0431)     ;get the data
                                        (0432)     ;
                                        (0433)     mov  X, [pI2CHW_Read_BufLO]
                                        (0434)     mov  A, [pI2CHW_Read_BufHI]
                                        (0435)     romx
                                        (0436)     mov  reg[I2CHW_DR],A
                                        (0437)     dec  [I2CHW_Read_Count]                                          ;calc addr lsb
                                        (0438)     jnc  NoDecHighCount
                                        (0439)     dec  [I2CHW_Read_CountHI]
                                        (0440) 
                                        (0441)     jc   MstrWRComplete
                                        (0442) 
                                        (0443) NoDecHighCount:
                                        (0444) 
                                        (0445)     inc  [pI2CHW_Read_BufLO]                                         ;set the next flash address to read
                                        (0446)     jnc  NoIncHiAddr
                                        (0447)     inc  [pI2CHW_Read_BufHI]
                                        (0448) NoIncHiAddr:
                                        (0449)    jmp   I2CNormalOutput
                                        (0450) ;
                                        (0451) ;****** THERE SHOULD BE NO WAY TO REACH THIS STATE WE'LL JUST TERMINATE THE ACTIVITY SINCE WERE THE MASTER
                                        (0452) ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
                                        (0453) ;
                                        (0454) ;FlashRdOverflow:
                                        (0455)     ;deal with the over flow cond by resending last data byte (dec the low addr)
                                        (0456) 
                                        (0457) ;   or    [I2CHW_RsrcStatus], I2CHW_RD_OVERFLOW
                                        (0458) ;                                                                      ;set count back to 0
                                        (0459) ;   mov   [I2CHW_Read_CountHI], 0                                    ;functionally the same as incrementing ffff and less instructions
                                        (0460) ;   mov   [I2CHW_Read_Count], 0
                                        (0461) ;   jmp   I2CNormalRead
                                        (0462) 
                                        (0463) ;---------------------------------------------------
                                        (0464) ; Insert your custom code above this banner
                                        (0465) ;---------------------------------------------------
                                        (0466) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0467) 
                                        (0468) ENDIF
                                        (0469) ;@PSoC_UserCode_BODY3@ (Do not change this line.)
                                        (0470) ;---------------------------------------------------
                                        (0471) ; Insert your custom code below this banner
                                        (0472) ; to modify the way a master might read RAM data to send
                                        (0473) ; to an I2C device
                                        (0474) ; By replacing the section from here down to the next block
                                        (0475) ; a user could process data for a custom I2C READ application
                                        (0476) ;---------------------------------------------------
                                        (0477) ReadOutData:
                                        (0478)    ;read the current data byte
                                        (0479) IF SYSTEM_LARGE_MEMORY_MODEL
0CCF: 51 09    MOV   A,[0x9]            (0480)    mov   A, [pI2CHW_Read_BufHI]
0CD1: 60 D3    MOV   REG[0xD3],A        
                                        (0481) ENDIF
                                        (0482)    RAM_SETPAGE_IDX A
0CD3: 58 0A    MOV   X,[0xA]            (0483)    mov   X, [pI2CHW_Read_BufLO]
0CD5: 70 3F    AND   F,0x3F             
0CD7: 71 80    OR    F,0x80             
                                        (0484)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0CD9: 52 00    MOV   A,[X+0]            (0485)    mov   A, [X]
0CDB: 70 3F    AND   F,0x3F             
0CDD: 71 00    OR    F,0x0              
                                        (0486)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0CDF: 60 D8    MOV   REG[0xD8],A        (0487)    mov   reg[I2CHW_DR], A
0CE1: 7A 0B    DEC   [0xB]              (0488)    dec   [I2CHW_Read_Count]
                                        (0489) 
0CE3: C0 0E    JC    0x0CF2             (0490)    jc    MstrWRComplete
0CE5: 76 0A    INC   [0xA]              (0491)    inc   [pI2CHW_Read_BufLO]
0CE7: 80 01    JMP   0x0CE9             (0492)    jmp   I2CNormalOutput
                                        (0493) ;
                                        (0494) ;ram read overflow detected here, just resend the last location in the buffer
                                        (0495) ;
                                        (0496) ;********        THERE SHOULD BE NO WAY TO OVERFLOW FOR THIS CASE
                                        (0497) ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
                                        (0498) ;
                                        (0499) ;RamRDOverflow:
                                        (0500) ;   or    [I2CHW_RsrcStatus], I2CHW_RD_OVERFLOW
                                        (0501) ;   inc   [I2CHW_Read_Count]                                         ; set back to zero
                                        (0502) 
                                        (0503) ;---------------------------------------------------
                                        (0504) ; End user I2C MASTER WRITE TO SLAVE /READ buffer customization section
                                        (0505) ; Insert your custom code above this banner
                                        (0506) ;---------------------------------------------------
                                        (0507) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0508) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0509) I2CNormalOutput:
                                        (0510) 
                                        (0511)     ;load the bits to set in the I2C_ISR from the stack, The proper bit pattern was previously determined
                                        (0512)     ;and place there based on whether or not the previous transmission was our I2C address.
0CE9: 18       POP   A                  (0513)     pop   A
0CEA: 60 D7    MOV   REG[0xD7],A        
0CEC: 18       POP   A                  
0CED: 60 D3    MOV   REG[0xD3],A        
                                        (0514) 
                                        (0515) ;
                                        (0516) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0517) ;
                                        (0518)     SetI2CHW_SCR A                                                   ;Sets the I2C_TX bit in the I2C_SCR reg.
                                        (0519) 
                                        (0520) 
                                        (0521) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0522)     REG_RESTORE IDX_PP
                                        (0523) ENDIF
0CEF: 20       POP   X                  (0524)     pop X
0CF0: 18       POP   A                  (0525)     pop A
0CF1: 7E       RETI                     (0526)     reti ;return and wait for the next interrupt (on data)
                                        (0527) 
                                        (0528) MstrWRComplete:
0CF2: 26 05 8F AND   [0x5],0x8F         (0529)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the write status bits
0CF5: 2E 05 40 OR    [0x5],0x40         (0530)     or    [I2CHW_RsrcStatus], I2CHW_WR_COMPLETE
0CF8: 2E 05 10 OR    [0x5],0x10         (0531)     or    [I2CHW_RsrcStatus], I2CHW_WR_NOERR
                                        (0532) 
                                        (0533)     ; *****
                                        (0534)     ; here we may need to look at the mode that this was called under
                                        (0535)     ; what does the user want done on the last byte.  Could be a send restart...
                                        (0536)     ; ******
0CFB: 26 03 03 AND   [0x3],0x3          (0537)     and [I2CHW_bStatus], (I2CHW_RepStart | I2CHW_NoStop)
0CFE: A0 0B    JZ    0x0D0A             (0538)     jz      CompleteWRXfer
0D00: 18       POP   A                  (0539)     pop  A                                                           ;clear the stack for return
0D01: 26 05 7F AND   [0x5],0x7F         (0540)     and  [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0D04: 18       POP   A                  
0D05: 60 D3    MOV   REG[0xD3],A        
                                        (0541) 
                                        (0542) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0543)     REG_RESTORE IDX_PP
                                        (0544) ENDIF
0D07: 20       POP   X                  (0545)     pop X
0D08: 18       POP   A                  (0546)     pop A
0D09: 7E       RETI                     (0547)     reti
                                        (0548)     ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
                                        (0549)     ; The release of the I2C_TX bit in I2C_SCR below will automatically generate a stop
                                        (0550) 
                                        (0551) CompleteWRXfer:
                                        (0552) 
0D0A: 18       POP   A                  (0553)     pop   A
0D0B: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0554) 
                                        (0555) ;
                                        (0556) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0557) ;
                                        (0558)     SetI2CHW_SCR 0                                                   ;this will release the bus and generate a stop condition
                                        (0559) 
0D0E: 26 05 7F AND   [0x5],0x7F         (0560)    and  [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0D11: 18       POP   A                  
0D12: 60 D3    MOV   REG[0xD3],A        
                                        (0561) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0562)    REG_RESTORE IDX_PP
                                        (0563) ENDIF
0D14: 20       POP   X                  (0564)    pop X
0D15: 18       POP   A                  (0565)    pop A
0D16: 7E       RETI                     (0566)    reti
                                        (0567) 
                                        (0568) SlaveDataNAK:
                                        (0569) ;must also fix up the data buffer.  While it is marginally safe to nak a byte as a slave and 
                                        (0570) ;store it.  It is NEVER safe as a master to notice that a written byte has been nak'ed by a 
                                        (0571) ;slave and fail to resend it.
                                        (0572) ;this piece of code fixes up the count and buffer that the master is using to get data from
                                        (0573) ;to re-transmit the byte when the next master write is done.
0D17: 76 0B    INC   [0xB]              (0574)     inc  [I2CHW_Read_Count]                          ;calc addr lsb
                                        (0575) IF I2CHW_READ_FLASH
                                        (0576)     jnc  NoIncHighCount
                                        (0577)     inc  [I2CHW_Read_CountHI]
                                        (0578) 
                                        (0579) NoIncHighCount:
                                        (0580) ENDIF
0D19: 7A 0A    DEC   [0xA]              (0581)     dec  [pI2CHW_Read_BufLO]                         ;set the next flash address to read
                                        (0582) IF SYSTEM_LARGE_MEMORY_MODEL
0D1B: D0 03    JNC   0x0D1F             (0583)     jnc  NoDecHiAddr
0D1D: 7A 09    DEC   [0x9]              (0584)     dec  [pI2CHW_Read_BufHI]
0D1F: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0585) NoDecHiAddr:
                                        (0586) ELSE
                                        (0587) IF I2CHW_READ_FLASH
                                        (0588)     jnc  NoDecHiCAddr
                                        (0589)     dec  [pI2CHW_Read_BufHI]
                                        (0590) NoDecHiCAddr:
                                        (0591) ENDIF
                                        (0592) ENDIF
                                        (0593) 
                                        (0594) ;;
                                        (0595) ;; all there is to do here is to return & set status, the slave didn't want any more data
                                        (0596) ;;
                                        (0597) ; no pop needed because the nak is detected before the push happens above
                                        (0598) 
                                        (0599) ;
                                        (0600) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0601) ;
                                        (0602)     SetI2CHW_SCR 0                                                   ;this will release the bus and generate a stop condition
                                        (0603) 
0D22: 26 05 7F AND   [0x5],0x7F         (0604)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0D25: 26 05 8F AND   [0x5],0x8F         (0605)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the write status bits
0D28: 2E 05 40 OR    [0x5],0x40         (0606)     or    [I2CHW_RsrcStatus], I2CHW_WR_COMPLETE
0D2B: 2E 05 20 OR    [0x5],0x20         (0607)     or    [I2CHW_RsrcStatus], I2CHW_WR_OVERFLOW
0D2E: 18       POP   A                  
0D2F: 60 D3    MOV   REG[0xD3],A        
                                        (0608) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0609)     REG_RESTORE IDX_PP
                                        (0610) ENDIF
0D31: 20       POP   X                  (0611)     pop X
0D32: 18       POP   A                  (0612)     pop A
0D33: 7E       RETI                     (0613)    reti
                                        (0614) 
                                        (0615) STOPTRAP:
                                        (0616)     ;
                                        (0617)     ;   If interrupt on STOP condition is enabled:
                                        (0618)     ;   Add user code to process stop (not recommended becuase I2C bus is NOT stalled and ISR
                                        (0619)     ;   may block reception of ongoing transactions/addresses
                                        (0620)     ;   STOP condition is never detected when a repeat start is used by the master.
                                        (0621)     ;
0D34: 26 05 7F AND   [0x5],0x7F         (0622)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0D37: 18       POP   A                  
0D38: 60 D3    MOV   REG[0xD3],A        
                                        (0623) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0624)     REG_RESTORE IDX_PP
                                        (0625) ENDIF
0D3A: 20       POP   X                  (0626)     pop X
0D3B: 18       POP   A                  (0627)     pop A
0D3C: 7E       RETI                     (0628)     reti
                                        (0629) 
                                        (0630) ; end of file I2CHWINT.asm
FILE: lib\i2chwcommon.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHWCommon.asm
                                        (0004) ;;   Version: 2.00, Updated on 2014/7/14 at 8:13:58
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ; include instance specific register definitions
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ;  Global Symbols
                                        (0032) ;-----------------------------------------------
                                        (0033) ;-------------------------------------------------------------------
                                        (0034) ;  Declare the functions global for both assembler and C compiler.
                                        (0035) ;
                                        (0036) ;  Note that there are two names for each API. First name is
                                        (0037) ;  assembler reference. Name with underscore is name refence for
                                        (0038) ;  C compiler.  Calling function in C source code does not require
                                        (0039) ;  the underscore.
                                        (0040) ;-------------------------------------------------------------------
                                        (0041) 
                                        (0042) export    I2CHW_InitWrite
                                        (0043) export   _I2CHW_InitWrite
                                        (0044) export    I2CHW_InitRamRead
                                        (0045) export   _I2CHW_InitRamRead
                                        (0046) export    I2CHW_InitFlashRead
                                        (0047) export   _I2CHW_InitFlashRead
                                        (0048) export    I2CHW_bReadI2CStatus
                                        (0049) export   _I2CHW_bReadI2CStatus
                                        (0050) export    I2CHW_ClrRdStatus
                                        (0051) export   _I2CHW_ClrRdStatus
                                        (0052) export    I2CHW_ClrWrStatus
                                        (0053) export   _I2CHW_ClrWrStatus
                                        (0054) 
                                        (0055) 
                                        (0056) AREA UserModules (ROM, REL)
                                        (0057) 
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: I2CHW_InitWrite
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Initializes a data buffer pointer for the slave to use to deposit data, and
                                        (0065) ;     zeroes the value of a count byte for the same buffer.
                                        (0066) ;
                                        (0067) ;-----------------------------------------------------------------------------
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  [SP-5]   -- count of bytes to write
                                        (0070) ;              [SP-4]   -- Hi order part of address Wrbuf
                                        (0071) ;              [SP-3]   -- Low order part of the address Wrbuf 
                                        (0072) ;
                                        (0073) ;  RETURNS:  none
                                        (0074) ;
                                        (0075) ;    Write Status bits are cleared
                                        (0076) ;
                                        (0077) ;  SIDE EFFECTS:
                                        (0078) ;    The A and X registers may be modified by this or future implementations
                                        (0079) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0080) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0081) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0082) ;    functions.
                                        (0083) ;          
                                        (0084) ;    Currently only the page pointer registers listed below are modified: 
                                        (0085) ;          CUR_PP
                                        (0086) ;
                                        (0087) ;    Write Status bits are cleared
                                        (0088) ;
                                        (0089) ;  THEORY of OPERATION or PROCEDURE:
                                        (0090) ;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
                                        (0091) ;     the accumulator.  X register is the low order pointer.
                                        (0092) ;     IF a one byte buffer is established, set a flag to NAK the first written data byte.
                                        (0093) ;
                                        (0094) 
                                        (0095)  I2CHW_InitWrite:
                                        (0096) _I2CHW_InitWrite:
                                        (0097) 
                                        (0098) WrCnt:   equ -5
                                        (0099) WrBufHi: equ -4
                                        (0100) WrBufLo: equ -3
                                        (0101) 
                                        (0102) 	RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0103)     RAM_PROLOGUE RAM_USE_CLASS_2
0D3D: 10       PUSH  X                  (0104) 	push  X
0D3E: 4F       MOV   X,SP               (0105) 	mov   X, SP
0D3F: 79       DEC   X                  (0106)     dec   X                                                          ;set up the pointer for correct param access
0D40: 08       PUSH  A                  (0107)     push  A
0D41: 5D DE    MOV   A,REG[0xDE]        (0108)     mov   A, reg[I2CHW_INT_REG]
0D43: 08       PUSH  A                  (0109)     push  A                                                           ;preserve flags prior to disabling int
0D44: 41 DE FE AND   REG[0xDE],0xFE     
0D47: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0110)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0111) 
                                        (0112)     RAM_SETPAGE_CUR >I2CHW_bStatus						                             ;Set the Page Pointer for LMM
0D4A: 26 03 FB AND   [0x3],0xFB         (0113)     and    [I2CHW_bStatus], ~fI2C_NAKnextWr                          ;reset the nak-next-written-byte flag.
                                        (0114) IF SYSTEM_LARGE_MEMORY_MODEL
0D4D: 52 FC    MOV   A,[X-4]            (0115)     mov   A, [X + WrBufHi]                                           ;move wrbuf addr to A
0D4F: 53 07    MOV   [0x7],A            (0116)     mov   [pI2CHW_Write_BufHI], A
                                        (0117) ENDIF
0D51: 52 FD    MOV   A,[X-3]            (0118)     mov   A, [X + WrBufLo]                                           ;move wrbuf addr to A
0D53: 53 08    MOV   [0x8],A            (0119)     mov   [pI2CHW_Write_BufLO], A
0D55: 52 FB    MOV   A,[X-5]            (0120)     mov   A, [X + WrCnt]                                               ;move Write_count to A
0D57: 53 06    MOV   [0x6],A            (0121)     mov   [I2CHW_Write_Count], A
0D59: 39 01    CMP   A,0x1              (0122)     cmp   A, 01                                                        ;if data buffer is one byte long or less
0D5B: A0 08    JZ    0x0D64             (0123)     jz    I2CHW_SetNak
0D5D: C0 06    JC    0x0D64             (0124)     jc    I2CHW_SetNak
0D5F: 26 05 8F AND   [0x5],0x8F         (0125)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the 0x10, 0x20 (Write status bits)
0D62: 80 09    JMP   0x0D6C             (0126)     jmp   I2Cs_1_ResetFlgs
                                        (0127) 
                                        (0128) I2CHW_SetNak:
0D64: 2E 03 04 OR    [0x3],0x4          (0129)     or    [I2CHW_bStatus], fI2C_NAKnextWr                            ;set the nak-next-written-byte flag.
0D67: 26 05 8F AND   [0x5],0x8F         (0130)     and   [I2CHW_RsrcStatus], ~0x70                                  ; clear the 0x10, 0x20 (Write status bits)
0D6A: 80 01    JMP   0x0D6C             (0131)     jmp   I2Cs_1_ResetFlgs
                                        (0132) 
                                        (0133) I2Cs_1_ResetFlgs:
0D6C: 18       POP   A                  (0134)     pop A
0D6D: 21 01    AND   A,0x1              (0135)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
0D6F: A0 04    JZ    0x0D74             (0136)     jz  . + 5
0D71: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0137)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0D74: 18       POP   A                  (0138)     pop A
0D75: 20       POP   X                  (0139)     pop X
0D76: 70 3F    AND   F,0x3F             
0D78: 71 C0    OR    F,0xC0             
                                        (0140) 	RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0141)     RAM_EPILOGUE RAM_USE_CLASS_2
0D7A: 7F       RET                      (0142)     ret
0D7B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0143) 
                                        (0144) .ENDSECTION
                                        (0145) 
                                        (0146) .SECTION
                                        (0147) ;-----------------------------------------------------------------------------
                                        (0148) ;  FUNCTION NAME: I2CHW_InitRamRead
                                        (0149) ;
                                        (0150) ;  DESCRIPTION:
                                        (0151) ;     Initializes a data buffer pointer for the slave to use to retrieve data from,
                                        (0152) ;     and zeroes the value of a count byte for the same buffer.
                                        (0153) ;
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:  [SP-5]  -- count of bytes to read
                                        (0157) ;              [SP-4]  -- Hi order part of addr to ReadBuf
                                        (0158) ;              [SP-3]  -- Low order part of the address to ReadBuf
                                        (0159) ;
                                        (0160) ;  RETURNS: none
                                        (0161) ;
                                        (0162) ;  SIDE EFFECTS:
                                        (0163) ;    The A and X registers may be modified by this or future implementations
                                        (0164) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0165) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0166) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0167) ;    functions.
                                        (0168) ;          
                                        (0169) ;    Currently only the page pointer registers listed below are modified: 
                                        (0170) ;          CUR_PP
                                        (0171) ;
                                        (0172) ;     Read Status bits are cleared
                                        (0173) ;
                                        (0174) ;  THEORY of OPERATION or PROCEDURE:
                                        (0175) ;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
                                        (0176) ;     the accumulator.  X register is the low order pointer.
                                        (0177) ;
                                        (0178) 
                                        (0179)  I2CHW_InitRamRead:
                                        (0180) _I2CHW_InitRamRead:
                                        (0181) 
                                        (0182) RdCnt:     equ   -5
                                        (0183) RdBufHi:   equ   -4
                                        (0184) RdBufLo:   equ   -3
                                        (0185) 
                                        (0186)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0187) 	RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0188) 	RAM_SETPAGE_CUR >I2CHW_Read_Count
0D7E: 10       PUSH  X                  (0189)     push  X
0D7F: 4F       MOV   X,SP               (0190) 	mov   X, SP
0D80: 79       DEC   X                  (0191)     dec   X                                                          ;set up the pointer for correct param access
0D81: 08       PUSH  A                  (0192)     push  A
0D82: 5D DE    MOV   A,REG[0xDE]        (0193)     mov   A, reg[I2CHW_INT_REG]
0D84: 08       PUSH  A                  (0194)     push  A                                                            ;preserve flags prior to disabling int
0D85: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0195)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0196) 
                                        (0197) IF SYSTEM_LARGE_MEMORY_MODEL
0D88: 52 FC    MOV   A,[X-4]            (0198)     mov   A, [X + RdBufHi]                                           ;move wrbuf addr to A
0D8A: 53 09    MOV   [0x9],A            (0199)     mov   [pI2CHW_Read_BufHI], A
                                        (0200) ENDIF
0D8C: 52 FD    MOV   A,[X-3]            (0201)     mov   A, [X + RdBufLo]                                             ; move rdbuf addr to A
0D8E: 53 0A    MOV   [0xA],A            (0202)     mov   [pI2CHW_Read_BufLO], A
0D90: 52 FB    MOV   A,[X-5]            (0203)     mov   A, [X + RdCnt]                                               ; move RamRead_count to A
0D92: 53 0B    MOV   [0xB],A            (0204)     mov   [I2CHW_Read_Count], A
0D94: 7A 0B    DEC   [0xB]              (0205)     dec   [I2CHW_Read_Count]                                         ; since we decrement through zero...
0D96: 26 05 F0 AND   [0x5],0xF0         (0206)     and   [I2CHW_RsrcStatus], ~0x0f                                  ; clear the lower 4 (read status bits)
                                        (0207) 
0D99: 18       POP   A                  (0208)     pop A
0D9A: 21 01    AND   A,0x1              (0209)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
0D9C: A0 04    JZ    0x0DA1             (0210)     jz  . + 5
0D9E: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0211)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0DA1: 18       POP   A                  (0212)     pop A
0DA2: 20       POP   X                  (0213)     pop X
0DA3: 70 3F    AND   F,0x3F             
0DA5: 71 C0    OR    F,0xC0             
                                        (0214) 
                                        (0215)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0216)     RAM_EPILOGUE RAM_USE_CLASS_2
0DA7: 7F       RET                      (0217)     ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) .SECTION
                                        (0222) ;-----------------------------------------------------------------------------
                                        (0223) ;  FUNCTION NAME: I2CHW_InitFlashRead
                                        (0224) ;
                                        (0225) ;  DESCRIPTION:
                                        (0226) ;     Initializes a flash data buffer pointer for the slave to use to retrieve
                                        (0227) ;     data from, and zeroes the value of a count byte for the same buffer.
                                        (0228) ;
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:  [SP-6]   -- Hi order part of flash Read count
                                        (0232) ;              [SP-5]   -- Low order part of flashRead counts
                                        (0233) ;              [SP-4]   -- Hi order part of the flash buf address
                                        (0234) ;              [SP-3]   -- Lo order part of flash buf address
                                        (0235) ;
                                        (0236) ;  RETURNS:
                                        (0237) ;
                                        (0238) ;  SIDE EFFECTS:
                                        (0239) ;    The A and X registers may be modified by this or future implementations
                                        (0240) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0241) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0242) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0243) ;    functions.
                                        (0244) ;          
                                        (0245) ;    Currently only the page pointer registers listed below are modified: 
                                        (0246) ;          CUR_PP
                                        (0247) ;
                                        (0248) ;    Read Status bits are cleared
                                        (0249) ;
                                        (0250) ;  THEORY of OPERATION or PROCEDURE:
                                        (0251) ;     The C compiler will place the upper order address of the buffer in Acc.
                                        (0252) ;     X register is the low order pointer.  A user module parameter is used to conserve code
                                        (0253) ;     if flash buffers are un-needed.  The API call is left defined and capable of returning in
                                        (0254) ;     either case
                                        (0255) ;
                                        (0256)  I2CHW_InitFlashRead:
                                        (0257) _I2CHW_InitFlashRead:
                                        (0258) 
                                        (0259) FlRdCntHI:     equ   -6
                                        (0260) FlRdCntLO:     equ   -5
                                        (0261) FlBufAdrHI:    equ   -4
                                        (0262) FlBufAdrLO:    equ   -3
                                        (0263) 
                                        (0264) IF I2CHW_READ_FLASH
                                        (0265)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0266)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0267)     RAM_SETPAGE_CUR >pI2CHW_Read_BufLO   
                                        (0268) 	push  X
                                        (0269) 	mov   X, SP
                                        (0270)     dec   X                                                            ;set up the pointer for correct param access
                                        (0271)     push  A
                                        (0272)     mov   A, reg[I2CHW_INT_REG]
                                        (0273)     push  A                                                            ;preserve flags prior to disabling int
                                        (0274)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0275) 
                                        (0276)     mov   A, [X + FlBufAdrLO]                                          ; move flrdbuf LOaddr to A
                                        (0277)     mov   [pI2CHW_Read_BufLO], A
                                        (0278)     mov   A, [X + FlBufAdrHI]                                          ; move flrdbuf HIaddr to A
                                        (0279)     mov   [pI2CHW_Read_BufHI], A
                                        (0280)     mov   A, [X + FlRdCntLO]                                           ; move flrdbuf LOcount to A
                                        (0281)     mov   [I2CHW_Read_Count], A
                                        (0282)     mov   A, [X + FlRdCntHI]                                           ; move flrdbuf HIcount to A
                                        (0283)     mov   [I2CHW_Read_CountHI], A
                                        (0284) 
                                        (0285)     dec   [I2CHW_Read_Count]                                         ; since this will count throu zero
                                        (0286)     jnc    . + 4                                                       ; only Read_CountHI if Read_Count rolled to 0xff
                                        (0287)     dec   [I2CHW_Read_CountHI]
                                        (0288) 
                                        (0289)     and   [I2CHW_RsrcStatus], ~0x07                                  ; clear the lower 3 (read status bits)
                                        (0290)     or    [I2CHW_RsrcStatus],I2CHW_READFLASH                         ; set the flash status bit
                                        (0291) 
                                        (0292)     pop A
                                        (0293)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
                                        (0294)     jz  . + 5
                                        (0295)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0296)     pop A
                                        (0297) 	pop X
                                        (0298)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0299) 	RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0300) ENDIF
0DA8: 7F       RET                      (0301)     ret
0DA9: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0302) 
                                        (0303) .ENDSECTION
                                        (0304) 
                                        (0305) .SECTION
                                        (0306) ;-----------------------------------------------------------------------------
                                        (0307) ;  FUNCTION NAME: I2CHW_bReadI2CStatus
                                        (0308) ;
                                        (0309) ;  DESCRIPTION:
                                        (0310) ;     Returns the value in the the RsrcStatus variable.
                                        (0311) ;
                                        (0312) ;-----------------------------------------------------------------------------
                                        (0313) ;
                                        (0314) ;  ARGUMENTS:
                                        (0315) ;
                                        (0316) ;  RETURNS:
                                        (0317) ;     BYTE  bI2CStatus -  status data.  Use the following defined bits
                                        (0318) ;     returned in A.
                                        (0319) ;         I2CHW_RD_NOERR:                   equ 1
                                        (0320) ;         I2CHW_RD_OVERFLOW:                equ 2
                                        (0321) ;         I2CHW_RD_INCOMPLETE:              equ 4
                                        (0322) ;         I2CHW_READFLASH:                  equ 8
                                        (0323) ;         I2CHW_WR_NOERR:                   equ 10h
                                        (0324) ;         I2CHW_WR_OVERFLOW:                equ 20h
                                        (0325) ;         I2CHW_WR_COMPLETE:                equ 40h
                                        (0326) ;         I2CHW_ISR_ACTIVE:                 equ 80h
                                        (0327) ;
                                        (0328) ;  SIDE EFFECTS:
                                        (0329) ;    The A and X registers may be modified by this or future implementations
                                        (0330) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0331) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0332) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0333) ;    functions.
                                        (0334) ;          
                                        (0335) ;    Currently only the page pointer registers listed below are modified: 
                                        (0336) ;          CUR_PP
                                        (0337) ;          
                                        (0338)  I2CHW_bReadI2CStatus:
                                        (0339) _I2CHW_bReadI2CStatus:
                                        (0340)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0341) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0DAC: 51 05    MOV   A,[0x5]            (0342)     mov   A, [I2CHW_RsrcStatus]                                      ;return the status in A
                                        (0343)     RAM_EPILOGUE RAM_USE_CLASS_4
0DAE: 7F       RET                      (0344)     ret
0DAF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0345) 
                                        (0346) .ENDSECTION
                                        (0347) 
                                        (0348) .SECTION
                                        (0349) ;-----------------------------------------------------------------------------
                                        (0350) ;  FUNCTION NAME: I2CHW_ClrRdStatus
                                        (0351) ;
                                        (0352) ;  DESCRIPTION:
                                        (0353) ;     Clears the Status bits in the Control/Status register, doesn't alter buffer
                                        (0354) ;     addresses or counts, leaves the Flash/Ram Read bit alone too
                                        (0355) ;
                                        (0356) ;-----------------------------------------------------------------------------
                                        (0357) ;
                                        (0358) ;  ARGUMENTS: none
                                        (0359) ;
                                        (0360) ;  RETURNS: none
                                        (0361) ;
                                        (0362) ;  SIDE EFFECTS:
                                        (0363) ;    The A and X registers may be modified by this or future implementations
                                        (0364) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0365) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0366) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0367) ;    functions.
                                        (0368) ;          
                                        (0369) ;    Currently only the page pointer registers listed below are modified: 
                                        (0370) ;          CUR_PP
                                        (0371) ;          
                                        (0372)  I2CHW_ClrRdStatus:
                                        (0373) _I2CHW_ClrRdStatus:
                                        (0374)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0375) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0DB2: 26 05 F8 AND   [0x5],0xF8         (0376)     and   [I2CHW_RsrcStatus], ~0x07                                  ; clear the lower 3 (read status bits)
                                        (0377)     RAM_EPILOGUE RAM_USE_CLASS_4
0DB5: 7F       RET                      (0378)     ret
0DB6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0379) 
                                        (0380) .ENDSECTION
                                        (0381) 
                                        (0382) .SECTION
                                        (0383) ;-----------------------------------------------------------------------------
                                        (0384) ;  FUNCTION NAME: I2CHW_ClrWrStatus
                                        (0385) ;
                                        (0386) ;  DESCRIPTION:
                                        (0387) ;     Clears the Status bits in the Control/Status register, doesn't alter buffer
                                        (0388) ;     addresses or counts, leaves the Flash/Ram Read bit alone too
                                        (0389) ;
                                        (0390) ;-----------------------------------------------------------------------------
                                        (0391) ;
                                        (0392) ;  ARGUMENTS: none
                                        (0393) ;
                                        (0394) ;  RETURNS: none
                                        (0395) ;
                                        (0396) ;  SIDE EFFECTS:
                                        (0397) ;    The A and X registers may be modified by this or future implementations
                                        (0398) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0399) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0400) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0401) ;    functions.
                                        (0402) ;          
                                        (0403) ;    Currently only the page pointer registers listed below are modified: 
                                        (0404) ;          CUR_PP
                                        (0405) ;          
                                        (0406)  I2CHW_ClrWrStatus:
                                        (0407) _I2CHW_ClrWrStatus:
                                        (0408)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0409) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0DB9: 26 05 8F AND   [0x5],0x8F         (0410)     and   [I2CHW_RsrcStatus], ~0x70                                  ; clear bits 10,20 (write status bits)
                                        (0411)     RAM_EPILOGUE RAM_USE_CLASS_4
0DBC: 7F       RET                      (0412)     ret
                                        (0413) 
                                        (0414) .ENDSECTION
                                        (0415) ; End of File I2CHW.asm
FILE: lib\counter24.asm                 (0001) ;;*****************************************************************************
0DBD: 43 E1 40 OR    REG[0xE1],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter24.asm
                                        (0004) ;;   Version: 2.5, Updated on 2014/7/14 at 8:8:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter24 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Counter24.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Counter24_EnableInt
                                        (0030) export _Counter24_EnableInt
                                        (0031) export  Counter24_DisableInt
                                        (0032) export _Counter24_DisableInt
                                        (0033) export  Counter24_Start
                                        (0034) export _Counter24_Start
                                        (0035) export  Counter24_Stop
                                        (0036) export _Counter24_Stop
                                        (0037) export  Counter24_WritePeriod
                                        (0038) export _Counter24_WritePeriod
                                        (0039) export  Counter24_WriteCompareValue
                                        (0040) export _Counter24_WriteCompareValue
                                        (0041) export  Counter24_ReadCompareValue
                                        (0042) export _Counter24_ReadCompareValue
                                        (0043) export  Counter24_ReadCounter
                                        (0044) export _Counter24_ReadCounter
                                        (0045) 
                                        (0046) ;-----------------------------------------------
                                        (0047) ;  Constant Definitions
                                        (0048) ;-----------------------------------------------
                                        (0049) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) .SECTION
                                        (0055) ;-----------------------------------------------------------------------------
                                        (0056) ;  FUNCTION NAME: Counter24_EnableInt
                                        (0057) ;
                                        (0058) ;  DESCRIPTION:
                                        (0059) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0060) ;     associated with this User Module. This function has no effect until and
                                        (0061) ;     unless the global interrupts are enabled (for example by using the
                                        (0062) ;     macro M8C_EnableGInt).
                                        (0063) ;-----------------------------------------------------------------------------
                                        (0064) ;
                                        (0065) ;  ARGUMENTS:    None.
                                        (0066) ;  RETURNS:      Nothing.
                                        (0067) ;  SIDE EFFECTS: 
                                        (0068) ;    The A and X registers may be modified by this or future implementations
                                        (0069) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0070) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0071) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0072) ;    functions.
                                        (0073) ;
                                        (0074)  Counter24_EnableInt:
                                        (0075) _Counter24_EnableInt:
                                        (0076)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0077)    Counter24_EnableInt_M
                                        (0078)    RAM_EPILOGUE RAM_USE_CLASS_1
0DC0: 7F       RET                      (0079)    ret
0DC1: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0080) 
                                        (0081) 
                                        (0082) .ENDSECTION
                                        (0083) 
                                        (0084) .SECTION
                                        (0085) ;-----------------------------------------------------------------------------
                                        (0086) ;  FUNCTION NAME: Counter24_DisableInt
                                        (0087) ;
                                        (0088) ;  DESCRIPTION:
                                        (0089) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0090) ;     mask bit associated with this User Module.
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;
                                        (0093) ;  ARGUMENTS:    None
                                        (0094) ;  RETURNS:      Nothing
                                        (0095) ;  SIDE EFFECTS: 
                                        (0096) ;    The A and X registers may be modified by this or future implementations
                                        (0097) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0098) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0099) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0100) ;    functions.
                                        (0101) ;
                                        (0102)  Counter24_DisableInt:
                                        (0103) _Counter24_DisableInt:
                                        (0104)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0105)    Counter24_DisableInt_M
                                        (0106)    RAM_EPILOGUE RAM_USE_CLASS_1
0DC4: 7F       RET                      (0107)    ret
0DC5: 43 33 01 OR    REG[0x33],0x1      
                                        (0108) 
                                        (0109) 
                                        (0110) .ENDSECTION
                                        (0111) 
                                        (0112) .SECTION
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: Counter24_Start
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Sets the start bit in the Control register of this user module.  The
                                        (0118) ;     counter will begin counting on the next input clock as soon as the
                                        (0119) ;     enable input is asserted high.
                                        (0120) ;-----------------------------------------------------------------------------
                                        (0121) ;
                                        (0122) ;  ARGUMENTS:    None
                                        (0123) ;  RETURNS:      Nothing
                                        (0124) ;  SIDE EFFECTS: 
                                        (0125) ;    The A and X registers may be modified by this or future implementations
                                        (0126) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0127) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0128) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0129) ;    functions.
                                        (0130) ;
                                        (0131)  Counter24_Start:
                                        (0132) _Counter24_Start:
                                        (0133)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0134)    Counter24_Start_M
                                        (0135)    RAM_EPILOGUE RAM_USE_CLASS_1
0DC8: 7F       RET                      (0136)    ret
0DC9: 41 33 FE AND   REG[0x33],0xFE     
                                        (0137) 
                                        (0138) 
                                        (0139) .ENDSECTION
                                        (0140) 
                                        (0141) .SECTION
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;  FUNCTION NAME: Counter24_Stop
                                        (0144) ;
                                        (0145) ;  DESCRIPTION:
                                        (0146) ;     Disables counter operation by clearing the start bit in the Control
                                        (0147) ;     register of the LSB block.
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;
                                        (0150) ;  ARGUMENTS:    None
                                        (0151) ;  RETURNS:      Nothing
                                        (0152) ;  SIDE EFFECTS: 
                                        (0153) ;    The A and X registers may be modified by this or future implementations
                                        (0154) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0155) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0156) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0157) ;    functions.
                                        (0158) ;
                                        (0159)  Counter24_Stop:
                                        (0160) _Counter24_Stop:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    Counter24_Stop_M
                                        (0163)    RAM_EPILOGUE RAM_USE_CLASS_1
0DCC: 7F       RET                      (0164)    ret
                                        (0165) 
                                        (0166) 
                                        (0167) .ENDSECTION
                                        (0168) 
                                        (0169) .SECTION
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;  FUNCTION NAME: Counter24_WritePeriod
                                        (0172) ;
                                        (0173) ;  DESCRIPTION:
                                        (0174) ;     Write the 24-bit period value into the Period register (DR1).
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) ;
                                        (0177) ;  ARGUMENTS: fastcall16 DWORD dwPeriodValue (placed on stack)
                                        (0178) ;  RETURNS:   Nothing
                                        (0179) ;  SIDE EFFECTS:
                                        (0180) ;    If the counter user module is stopped, then this value will also be
                                        (0181) ;    latched into the Count registers (DR0).
                                        (0182) ;
                                        (0183) ;    The A and X registers may be modified by this or future implementations
                                        (0184) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0185) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0186) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0187) ;    functions.
                                        (0188) ;
                                        (0189) _Counter24_WritePeriod:
                                        (0190)  Counter24_WritePeriod:
                                        (0191)    RAM_PROLOGUE RAM_USE_CLASS_2
0DCD: 4F       MOV   X,SP               (0192)    mov   X, SP                                      ; Set X to point to stack frame
0DCE: 52 FB    MOV   A,[X-5]            (0193)    mov   A, [X-5]                                   ; load the period registers
0DD0: 60 39    MOV   REG[0x39],A        (0194)    mov   reg[Counter24_PERIOD_MSB_REG], A
0DD2: 52 FC    MOV   A,[X-4]            (0195)    mov   A, [X-4]
0DD4: 60 35    MOV   REG[0x35],A        (0196)    mov   reg[Counter24_PERIOD_ISB_REG], A
0DD6: 52 FD    MOV   A,[X-3]            (0197)    mov   A, [X-3]
0DD8: 60 31    MOV   REG[0x31],A        (0198)    mov   reg[Counter24_PERIOD_LSB_REG], A
0DDA: 70 3F    AND   F,0x3F             
0DDC: 71 C0    OR    F,0xC0             
                                        (0199)    RAM_EPILOGUE RAM_USE_CLASS_2
0DDE: 7F       RET                      (0200)    ret
                                        (0201) 
                                        (0202) 
                                        (0203) .ENDSECTION
                                        (0204) 
                                        (0205) .SECTION
                                        (0206) ;-----------------------------------------------------------------------------
                                        (0207) ;  FUNCTION NAME: Counter24_WriteCompareValue
                                        (0208) ;
                                        (0209) ;  DESCRIPTION:
                                        (0210) ;     Writes compare value into the Compare register (DR2).
                                        (0211) ;-----------------------------------------------------------------------------
                                        (0212) ;
                                        (0213) ;  ARGUMENTS:    fastcall16 DWORD dwCompareValue (placed on stack)
                                        (0214) ;  RETURNS:      Nothing
                                        (0215) ;  SIDE EFFECTS: 
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;
                                        (0222) _Counter24_WriteCompareValue:
                                        (0223)  Counter24_WriteCompareValue:
                                        (0224)    RAM_PROLOGUE RAM_USE_CLASS_2
0DDF: 4F       MOV   X,SP               (0225)    mov   X, SP                                      ; Set X to point to stack frame
0DE0: 52 FB    MOV   A,[X-5]            (0226)    mov   A, [X-5]                                   ; load the compare registers
0DE2: 60 3A    MOV   REG[0x3A],A        (0227)    mov   reg[Counter24_COMPARE_MSB_REG], A
0DE4: 52 FC    MOV   A,[X-4]            (0228)    mov   A, [X-4]
0DE6: 60 36    MOV   REG[0x36],A        (0229)    mov   reg[Counter24_COMPARE_ISB_REG], A
0DE8: 52 FD    MOV   A,[X-3]            (0230)    mov   A, [X-3]
0DEA: 60 32    MOV   REG[0x32],A        (0231)    mov   reg[Counter24_COMPARE_LSB_REG], A
0DEC: 70 3F    AND   F,0x3F             
0DEE: 71 C0    OR    F,0xC0             
                                        (0232)    RAM_EPILOGUE RAM_USE_CLASS_2
0DF0: 7F       RET                      (0233)    ret
0DF1: 70 BF    AND   F,0xBF             
0DF3: 60 D3    MOV   REG[0xD3],A        
                                        (0234) 
                                        (0235) 
                                        (0236) .ENDSECTION
                                        (0237) 
                                        (0238) .SECTION
                                        (0239) ;-----------------------------------------------------------------------------
                                        (0240) ;  FUNCTION NAME: Counter24_ReadCompareValue
                                        (0241) ;
                                        (0242) ;  DESCRIPTION:
                                        (0243) ;     Reads the Compare registers.
                                        (0244) ;-----------------------------------------------------------------------------
                                        (0245) ;
                                        (0246) ;  ARGUMENTS: fastcall16 DWORD * pdwCompareValue
                                        (0247) ;             (pointer: LSB in X, MSB in A is RAM Page (or N/A in the SMM ))
                                        (0248) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0249) ;
                                        (0250) ;  SIDE EFFECTS:
                                        (0251) ;    The A and X registers may be modified by this or future implementations
                                        (0252) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0253) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0254) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0255) ;    functions.
                                        (0256) ;          
                                        (0257) ;    Currently only the page pointer registers listed below are modified: 
                                        (0258) ;          IDX_PP
                                        (0259) ;     
                                        (0260) ;    The DWORD pointed to by X takes on the value read from DR2
                                        (0261) ;
                                        (0262)  Counter24_ReadCompareValue:
                                        (0263) _Counter24_ReadCompareValue:
                                        (0264)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0265)    RAM_SETPAGE_IDX A                             ; Set the variable page
0DF5: 56 00 00 MOV   [X+0],0x0          (0266)    mov   [X], 0
0DF8: 5D 3A    MOV   A,REG[0x3A]        (0267)    mov   A, reg[Counter24_COMPARE_MSB_REG]
0DFA: 54 01    MOV   [X+1],A            (0268)    mov   [X+1], A
0DFC: 5D 36    MOV   A,REG[0x36]        (0269)    mov   A, reg[Counter24_COMPARE_ISB_REG]
0DFE: 54 02    MOV   [X+2],A            (0270)    mov   [X+2], A
0E00: 5D 32    MOV   A,REG[0x32]        (0271)    mov   A, reg[Counter24_COMPARE_LSB_REG]
0E02: 54 03    MOV   [X+3],A            (0272)    mov   [X+3], A
0E04: 70 3F    AND   F,0x3F             
0E06: 71 C0    OR    F,0xC0             
                                        (0273)    RAM_EPILOGUE RAM_USE_CLASS_3
0E08: 7F       RET                      (0274)    ret
0E09: 70 BF    AND   F,0xBF             
0E0B: 60 D3    MOV   REG[0xD3],A        
                                        (0275) 
                                        (0276) 
                                        (0277) .ENDSECTION
                                        (0278) 
                                        (0279) .SECTION
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  FUNCTION NAME: Counter24_ReadCounter
                                        (0282) ;
                                        (0283) ;  DESCRIPTION:
                                        (0284) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0285) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0286) ;     from the Count to the Compare registers by holding the clock low in
                                        (0287) ;     the MSB PSoC block.
                                        (0288) ;-----------------------------------------------------------------------------
                                        (0289) ;
                                        (0290) ;  ARGUMENTS: fastcall16 DWORD * pdwCount
                                        (0291) ;             (pointer: LSB in X, MSB in A is RAM Page (or N/A in the SMM ))
                                        (0292) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0293) ;  SIDE EFFECTS:
                                        (0294) ;    The A and X registers may be modified by this or future implementations
                                        (0295) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0296) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0297) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0298) ;    functions.
                                        (0299) ;          
                                        (0300) ;    Currently only the page pointer registers listed below are modified: 
                                        (0301) ;          IDX_PP
                                        (0302) ;
                                        (0303) ;    The DWORD pointed to by X takes on the value read from DR0
                                        (0304) ;    If the user module is running, it is stopped momentarily and one or more counts
                                        (0305) ;    may be missed.
                                        (0306) ;
                                        (0307) ;
                                        (0308)  Counter24_ReadCounter:
                                        (0309) _Counter24_ReadCounter:
                                        (0310)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0311)    RAM_SETPAGE_IDX A                             ; Set the variable page
0E0D: 5D 33    MOV   A,REG[0x33]        (0312)    mov   A, reg[Counter24_CONTROL_LSB_REG]       ; Save CR0 (running or stopped state)
0E0F: 08       PUSH  A                  (0313)    push  A                                          ;
0E10: 5D 3A    MOV   A,REG[0x3A]        (0314)    mov   A, reg[Counter24_COMPARE_MSB_REG]       ; Save the current value of
0E12: 08       PUSH  A                  (0315)    push  A                                          ;   the comparare register
0E13: 5D 36    MOV   A,REG[0x36]        (0316)    mov   A, reg[Counter24_COMPARE_ISB_REG]       ;   on the stack...
0E15: 08       PUSH  A                  (0317)    push  A                                          ;
0E16: 5D 32    MOV   A,REG[0x32]        (0318)    mov   A, reg[Counter24_COMPARE_LSB_REG]       ;
0E18: 08       PUSH  A                  (0319)    push  A                                          ;   (stack frame now 4 bytes)
0E19: 41 33 FE AND   REG[0x33],0xFE     
0E1C: 71 10    OR    F,0x10             
                                        (0320)    Counter24_Stop_M                              ; Disable (stop) the Counter, if running
                                        (0321)    M8C_SetBank1                                     ;
0E1E: 5D 39    MOV   A,REG[0x39]        (0322)    mov   A, reg[Counter24_INPUT_MSB_REG]         ; save the MSB clock setting on
0E20: 08       PUSH  A                  (0323)    push  A                                          ;   the stack (now 5 bytes) and
                                        (0324)                                                     ;   hold (only!) its clock low:
0E21: 62 39 00 MOV   REG[0x39],0x0      (0325)    mov   reg[Counter24_INPUT_MSB_REG], INPUT_REG_NULL
0E24: 70 EF    AND   F,0xEF             
                                        (0326)    M8C_SetBank0                                     ; 32-bit Result <- 24-bit Count
0E26: 56 00 00 MOV   [X+0],0x0          (0327)    mov   [X+0], 0                                   ;   upper 8 bits always zero
0E29: 5D 38    MOV   A,REG[0x38]        (0328)    mov   A, reg[Counter24_COUNTER_MSB_REG]       ;   DR2 <- DR0 (in the MSB block)
0E2B: 5D 3A    MOV   A,REG[0x3A]        (0329)    mov   A, reg[Counter24_COMPARE_MSB_REG]       ;   Retrieve the Count MSB and...
0E2D: 54 01    MOV   [X+1],A            (0330)    mov   [X+1], A                                   ;     update the result
0E2F: 5D 34    MOV   A,REG[0x34]        (0331)    mov   A, reg[Counter24_COUNTER_ISB_REG]       ;   etc, for ISB
0E31: 5D 36    MOV   A,REG[0x36]        (0332)    mov   A, reg[Counter24_COMPARE_ISB_REG]       ;
0E33: 54 02    MOV   [X+2],A            (0333)    mov   [X+2], A                                   ;
0E35: 5D 30    MOV   A,REG[0x30]        (0334)    mov   A, reg[Counter24_COUNTER_LSB_REG]       ;   etc, for LSB
0E37: 5D 32    MOV   A,REG[0x32]        (0335)    mov   A, reg[Counter24_COMPARE_LSB_REG]       ;
0E39: 54 03    MOV   [X+3],A            (0336)    mov   [X+3], A                                   ;
0E3B: 20       POP   X                  (0337)    pop   X                                          ; Hold Input reg in X temporarily
0E3C: 18       POP   A                  (0338)    pop   A                                          ; Restore the 24-bit Compare
0E3D: 60 32    MOV   REG[0x32],A        (0339)    mov   reg[Counter24_COMPARE_LSB_REG], A       ;   register...
0E3F: 18       POP   A                  (0340)    pop   A                                          ;
0E40: 60 36    MOV   REG[0x36],A        (0341)    mov   reg[Counter24_COMPARE_ISB_REG], A       ;
0E42: 18       POP   A                  (0342)    pop   A                                          ;
0E43: 60 3A    MOV   REG[0x3A],A        (0343)    mov   reg[Counter24_COMPARE_MSB_REG], A       ;
0E45: 71 10    OR    F,0x10             
                                        (0344)    M8C_SetBank1                                     ; Restore the counter operation:
0E47: 5B       MOV   A,X                (0345)    mov   A, X                                       ;   Grab the clock setting...
0E48: 60 39    MOV   REG[0x39],A        (0346)    mov   reg[Counter24_INPUT_MSB_REG], A         ;     and restore it
0E4A: 70 EF    AND   F,0xEF             
                                        (0347)    M8C_SetBank0                                     ;   Re-enable (start) the counter...
0E4C: 18       POP   A                  (0348)    pop   A                                          ;     if it was running when
0E4D: 60 33    MOV   REG[0x33],A        (0349)    mov   reg[Counter24_CONTROL_LSB_REG], A       ;     this function was first called
0E4F: 70 3F    AND   F,0x3F             
0E51: 71 C0    OR    F,0xC0             
                                        (0350)    RAM_EPILOGUE RAM_USE_CLASS_3                     ; Post function paging environment restore
0E53: 7F       RET                      (0351)    ret
                                        (0352) 
                                        (0353) .ENDSECTION
                                        (0354) 
                                        (0355) ; End of File Counter24.asm
FILE: C:\Users\TANGY_~1\DOCUME~1\ECE381~1\Lab_7\Lab_7\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include <string.h>
(0008) #include "string.h"
(0009) #include "PSoCGPIOINT.h"
(0010) #include "stdlib.h"
(0011) #include <stdio.h>
(0012) #include <stdlib.h>
(0013) #include "I2CHWMstr.h"
(0014) 
(0015) #pragma interrupt_handler TempReset 
(0016) #pragma interrupt_handler T_INT
(0017) 
(0018) 
(0019) 
(0020) 
(0021) BYTE currentTempA[2];
(0022) BYTE currentTemp;
(0023) BYTE currentTemp1;
(0024) BYTE currentTemp2;
(0025) BYTE POLbitFlip[2];
(0026) 
(0027) char string0[17];
(0028) char string1[17];
(0029) char string2[17];
(0030) char string3[17];
(0031) char* tempP;
(0032) 
(0033) char* configOutP;
(0034) 
(0035) 
(0036) char TH;
(0037) char TL;
(0038) 
(0039) char* THP;
(0040) char* TLP;
(0041) 
(0042) 
(0043) char messageString[79];
(0044) int parseCounter=0;
(0045) int stringSize=0;
(0046) char temp = 0;
(0047) int addressInt=0;
(0048) char addressHex;
(0049) int i;
(0050) int j;
(0051) char sizeOfString;
(0052) char command;
(0053) 
(0054) 
(0055) BOOL Interupt = FALSE;
(0056) BOOL hexOrAscii = FALSE;
(0057) BOOL finishFlag = FALSE;
(0058) BOOL invaildFlag = FALSE;
(0059) BOOL readOrWrite = FALSE;
(0060) BOOL firstPass = TRUE;
(0061) BOOL fanOn;
(0062) /* Define slave address */
(0063) 
(0064) #define ThermoStat 0x48
(0065) 
(0066) BYTE THF = 0x40;
(0067) BYTE TLF = 0x20;
(0068) 
(0069) /* Define command set */
(0070) BYTE tempRead = 0xAA;
(0071) BYTE tempStartConvert = 0xEE;
(0072) BYTE tempStopConvert = 0x22;
(0073) BYTE accessConfigReg = 0xAC;
(0074) BYTE accessTL = 0xA2;
(0075) BYTE accessTH = 0xA1;
(0076) 
(0077) /* Define buffer size */
(0078) #define BUFFER_SIZE 0xFF
(0079) 
(0080) BYTE txBuffer[BUFFER_SIZE];
(0081) BYTE rxBuffer[2];
(0082) 
(0083) BYTE THvalue[3];
(0084) BYTE TLvalue[3];
(0085) 
(0086) BYTE THvalueTest[2];
(0087) BYTE TLvalueTest[2];
(0088) 
(0089) BYTE status;
(0090) BYTE configOut[2];
(0091) BYTE configOut2[2];
(0092) 
(0093) 
(0094) //int configOutReg;
(0095) BYTE* Address_Pointer;
(0096) 
(0097) BYTE Read_Address;
(0098) BYTE Write_Address;
(0099) char temp1;
(0100) char temp2;
(0101) char temp3;
(0102) char charIn = '\0';
(0103) char charIn1= '\0';
(0104) char charIn2= '\0';
(0105) char charIn3= '\0';
(0106) char charIn4= '\0';
(0107) 
(0108) char instBuffer= '\0';
(0109) int placeCounter = 0;
(0110) int count;
(0111) char tolerence;
(0112) BOOL heatOrCool;
(0113) char rawString[79];
(0114) 
(0115) BOOL update = FALSE;
(0116) 
(0117) const char welcome[] = "Welcome to our Programmable Thermostat!";
(0118) const char setTempraturePrompt[] = "To set the temprature enter it in the following format: 'S ##' (## is the desired temprature in Celsius)";
(0119) const char setTolerancePrompt[] = "To set the tolerance enter it in the following format: 'T #' (# is the width of the temprature tolerance in Celsius)";
(0120) const char setThermModePrompt[] = "To set the thermostat mode enter it it in the following format: 'M X' (X should be set to C for cool, H for heat and F for off)";
(0121) const char setFanModePrompt[] = "To set the mode of the fan enter it in the following format: 'F X' (X should be set to A for automatic fan and M for manual which keeps the fan on all the time)";
(0122) 
(0123) //function prototypes
(0124) void startFunction (void);
(0125) void readFunction(void);
(0126) void stringParser(void);
(0127) char asciiToInt(char temp1);
(0128) void setTolerenceLevel(char THvalue[], char TLvalue[]);
(0129) void compareParameters(void); 
(0130) void cleerLCD(void);
(0131) void outputConfig(void);
(0132) void changePOLbit(void);
(0133) void initial(void);
(0134) 
(0135) void main(void)
(0136) {		
(0137) 		
(0138) 	
(0139) 		M8C_EnableIntMask(INT_MSK0,INT_MSK0_GPIO); 
__UserModules_end|_main|__text_start|_main:
    0E54: 43 E0 20 OR    REG[0xE0],0x20
(0140)         I2CHW_Start();
    0E57: 10       PUSH  X
    0E58: 7C 09 E1 LCALL _I2CHW_Start
(0141)         I2CHW_EnableMstr();
    0E5B: 7C 09 EF LCALL _I2CHW_EnableMstr
(0142)         I2CHW_EnableInt();
    0E5E: 7C 09 E4 LCALL _I2CHW_EnableInt
(0143)         LCD_Start();
    0E61: 7C 09 3C LCALL _LCD_Start|LCD_Init|_LCD_Init|LCD_Start
(0144)         UART_Start(UART_PARITY_NONE);
    0E64: 50 00    MOV   A,0x0
    0E66: 7C 06 FA LCALL _UART_Start
    0E69: 20       POP   X
(0145) 
(0146) 		M8C_EnableGInt;
    0E6A: 71 01    OR    F,0x1
(0147) 		Counter24_Start();
    0E6C: 10       PUSH  X
    0E6D: 7C 0D C5 LCALL _Counter24_Start
(0148) 		Counter24_EnableInt();
    0E70: 7C 0D BD LCALL _Counter24_EnableInt
    0E73: 20       POP   X
(0149) 		
(0150)         firstPass = FALSE;
    0E74: 62 D0 02 MOV   REG[0xD0],0x2
    0E77: 55 45 00 MOV   [firstPass],0x0
(0151) 		invaildFlag = FALSE;
    0E7A: 62 D0 02 MOV   REG[0xD0],0x2
    0E7D: 55 47 00 MOV   [invaildFlag],0x0
(0152) 		txBuffer[0] = 0xAA;
    0E80: 62 D0 01 MOV   REG[0xD0],0x1
    0E83: 55 00 AA MOV   [txBuffer],0xAA
(0153) 		startFunction();
    0E86: 91 8D    CALL  _startFunction
(0154) 		configOut2[2] = 0x00;
    0E88: 62 D0 02 MOV   REG[0xD0],0x2
    0E8B: 55 20 00 MOV   [Address_Pointer],0x0
(0155) 		
(0156) 		initial();
    0E8E: 7C 17 4C LCALL _initial
    0E91: 81 79    JMP   0x100B
(0157) 
(0158) 		
(0159)         while(!firstPass)
(0160)         {
(0161) 			
(0162) 
(0163) 		
(0164) 			while (!invaildFlag){
(0165) 	
(0166) 
(0167)         			readFunction();
    0E93: 91 D3    CALL  _readFunction
(0168) 	                stringParser();
    0E95: 92 F4    CALL  _stringParser
(0169) 					
(0170) 
(0171) 
(0172)               	if (update){
    0E97: 62 D0 02 MOV   REG[0xD0],0x2
    0E9A: 3C 2E 00 CMP   [update],0x0
    0E9D: A1 65    JZ    0x1003
(0173) 
(0174) 					I2CHW_bWriteBytes(ThermoStat, &tempStartConvert , 1 , I2CHW_CompleteXfer);
    0E9F: 10       PUSH  X
    0EA0: 50 00    MOV   A,0x0
    0EA2: 08       PUSH  A
    0EA3: 50 01    MOV   A,0x1
    0EA5: 08       PUSH  A
    0EA6: 50 02    MOV   A,0x2
    0EA8: 08       PUSH  A
    0EA9: 50 3E    MOV   A,0x3E
    0EAB: 08       PUSH  A
    0EAC: 50 48    MOV   A,0x48
    0EAE: 08       PUSH  A
    0EAF: 7C 0A 4B LCALL _I2CHW_bWriteBytes
    0EB2: 38 FB    ADD   SP,0xFB
    0EB4: 20       POP   X
(0175) 			        while(!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
    0EB5: 10       PUSH  X
    0EB6: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    0EB9: 20       POP   X
    0EBA: 62 D0 00 MOV   REG[0xD0],0x0
    0EBD: 53 F4    MOV   [__r0],A
    0EBF: 47 F4 40 TST   [__r0],0x40
    0EC2: AF F2    JZ    0x0EB5
(0176) 			        I2CHW_ClrWrStatus();
    0EC4: 10       PUSH  X
    0EC5: 7C 0D B6 LCALL _I2CHW_ClrWrStatus
(0177) 
(0178) 					I2CHW_bWriteBytes(ThermoStat, &tempRead , 1 , I2CHW_NoStop);
    0EC8: 50 02    MOV   A,0x2
    0ECA: 08       PUSH  A
    0ECB: 50 01    MOV   A,0x1
    0ECD: 08       PUSH  A
    0ECE: 50 02    MOV   A,0x2
    0ED0: 08       PUSH  A
    0ED1: 50 40    MOV   A,0x40
    0ED3: 08       PUSH  A
    0ED4: 50 48    MOV   A,0x48
    0ED6: 08       PUSH  A
    0ED7: 7C 0A 4B LCALL _I2CHW_bWriteBytes
    0EDA: 38 FB    ADD   SP,0xFB
    0EDC: 20       POP   X
(0179) 			        while(!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
    0EDD: 10       PUSH  X
    0EDE: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    0EE1: 20       POP   X
    0EE2: 62 D0 00 MOV   REG[0xD0],0x0
    0EE5: 53 F4    MOV   [__r0],A
    0EE7: 47 F4 40 TST   [__r0],0x40
    0EEA: AF F2    JZ    0x0EDD
(0180) 			        I2CHW_ClrWrStatus();
    0EEC: 10       PUSH  X
    0EED: 7C 0D B6 LCALL _I2CHW_ClrWrStatus
(0181) 					
(0182) 					I2CHW_fReadBytes(ThermoStat, currentTempA , 2, I2CHW_RepStart);
    0EF0: 50 01    MOV   A,0x1
    0EF2: 08       PUSH  A
    0EF3: 50 02    MOV   A,0x2
    0EF5: 08       PUSH  A
    0EF6: 50 02    MOV   A,0x2
    0EF8: 08       PUSH  A
    0EF9: 50 24    MOV   A,0x24
    0EFB: 08       PUSH  A
    0EFC: 50 48    MOV   A,0x48
    0EFE: 08       PUSH  A
    0EFF: 7C 0A 07 LCALL _I2CHW_fReadBytes
    0F02: 38 FB    ADD   SP,0xFB
    0F04: 20       POP   X
(0183) 			        while(!(I2CHW_bReadI2CStatus() & I2CHW_RD_COMPLETE));
    0F05: 10       PUSH  X
    0F06: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    0F09: 20       POP   X
    0F0A: 62 D0 00 MOV   REG[0xD0],0x0
    0F0D: 53 F4    MOV   [__r0],A
    0F0F: 47 F4 04 TST   [__r0],0x4
    0F12: AF F2    JZ    0x0F05
(0184) 			        I2CHW_ClrRdStatus();
    0F14: 10       PUSH  X
    0F15: 7C 0D AF LCALL _I2CHW_ClrRdStatus
    0F18: 20       POP   X
(0185) 					
(0186) 					utoa(tempP, currentTempA[0],10);
    0F19: 50 00    MOV   A,0x0
    0F1B: 08       PUSH  A
    0F1C: 50 0A    MOV   A,0xA
    0F1E: 08       PUSH  A
    0F1F: 62 D0 02 MOV   REG[0xD0],0x2
    0F22: 51 24    MOV   A,[currentTempA]
    0F24: 62 D0 00 MOV   REG[0xD0],0x0
    0F27: 53 F3    MOV   [__r1],A
    0F29: 50 00    MOV   A,0x0
    0F2B: 08       PUSH  A
    0F2C: 51 F3    MOV   A,[__r1]
    0F2E: 08       PUSH  A
    0F2F: 62 D0 02 MOV   REG[0xD0],0x2
    0F32: 51 0C    MOV   A,[tempP]
    0F34: 08       PUSH  A
    0F35: 51 0D    MOV   A,[tempP+1]
    0F37: 08       PUSH  A
    0F38: 7C 18 D2 LCALL _utoa
    0F3B: 38 FA    ADD   SP,0xFA
(0187) 					
(0188) 					
(0189) 					cleerLCD();
    0F3D: 96 4F    CALL  _cleerLCD
(0190) 					UART_PutCRLF();
    0F3F: 10       PUSH  X
    0F40: 7C 08 21 LCALL _UART_PutCRLF
(0191) 					UART_CPutString("Current Mode:");
    0F43: 50 04    MOV   A,0x4
    0F45: 08       PUSH  A
    0F46: 50 A8    MOV   A,0xA8
    0F48: 5C       MOV   X,A
    0F49: 18       POP   A
    0F4A: 7C 08 0F LCALL _UART_CPutString
    0F4D: 20       POP   X
(0192) 					if (heatOrCool){
    0F4E: 62 D0 02 MOV   REG[0xD0],0x2
    0F51: 3C 2A 00 CMP   [heatOrCool],0x0
    0F54: A0 19    JZ    0x0F6E
(0193) 					LCD_Position(0,0);	
    0F56: 10       PUSH  X
    0F57: 50 00    MOV   A,0x0
    0F59: 57 00    MOV   X,0x0
    0F5B: 7C 09 AF LCALL _LCD_Position
(0194) 					UART_CPutString("Cool");
    0F5E: 50 04    MOV   A,0x4
    0F60: 08       PUSH  A
    0F61: 50 A3    MOV   A,0xA3
    0F63: 5C       MOV   X,A
    0F64: 18       POP   A
    0F65: 7C 08 0F LCALL _UART_CPutString
(0195) 					UART_PutCRLF();
    0F68: 7C 08 21 LCALL _UART_PutCRLF
    0F6B: 20       POP   X
(0196) 					}else {
    0F6C: 80 17    JMP   0x0F84
(0197) 					LCD_Position(0,0);	
    0F6E: 10       PUSH  X
    0F6F: 50 00    MOV   A,0x0
    0F71: 57 00    MOV   X,0x0
    0F73: 7C 09 AF LCALL _LCD_Position
(0198) 					UART_CPutString("Heat");
    0F76: 50 04    MOV   A,0x4
    0F78: 08       PUSH  A
    0F79: 50 9E    MOV   A,0x9E
    0F7B: 5C       MOV   X,A
    0F7C: 18       POP   A
    0F7D: 7C 08 0F LCALL _UART_CPutString
(0199) 					UART_PutCRLF();
    0F80: 7C 08 21 LCALL _UART_PutCRLF
    0F83: 20       POP   X
(0200) 					}
(0201) 					UART_PutCRLF();
    0F84: 10       PUSH  X
    0F85: 7C 08 21 LCALL _UART_PutCRLF
(0202) 					UART_PutCRLF();
    0F88: 7C 08 21 LCALL _UART_PutCRLF
(0203) 					UART_CPutString("Current temperature:");
    0F8B: 50 04    MOV   A,0x4
    0F8D: 08       PUSH  A
    0F8E: 50 89    MOV   A,0x89
    0F90: 5C       MOV   X,A
    0F91: 18       POP   A
    0F92: 7C 08 0F LCALL _UART_CPutString
    0F95: 20       POP   X
(0204) 					utoa(tempP, currentTempA[0],10);
    0F96: 50 00    MOV   A,0x0
    0F98: 08       PUSH  A
    0F99: 50 0A    MOV   A,0xA
    0F9B: 08       PUSH  A
    0F9C: 62 D0 02 MOV   REG[0xD0],0x2
    0F9F: 51 24    MOV   A,[currentTempA]
    0FA1: 62 D0 00 MOV   REG[0xD0],0x0
    0FA4: 53 F3    MOV   [__r1],A
    0FA6: 50 00    MOV   A,0x0
    0FA8: 08       PUSH  A
    0FA9: 51 F3    MOV   A,[__r1]
    0FAB: 08       PUSH  A
    0FAC: 62 D0 02 MOV   REG[0xD0],0x2
    0FAF: 51 0C    MOV   A,[tempP]
    0FB1: 08       PUSH  A
    0FB2: 51 0D    MOV   A,[tempP+1]
    0FB4: 08       PUSH  A
    0FB5: 7C 18 D2 LCALL _utoa
    0FB8: 38 FA    ADD   SP,0xFA
(0205) 					UART_PutString(tempP);
    0FBA: 10       PUSH  X
    0FBB: 62 D0 02 MOV   REG[0xD0],0x2
    0FBE: 51 0C    MOV   A,[tempP]
    0FC0: 08       PUSH  A
    0FC1: 51 0D    MOV   A,[tempP+1]
    0FC3: 5C       MOV   X,A
    0FC4: 18       POP   A
    0FC5: 7C 07 A9 LCALL _UART_PutString
    0FC8: 20       POP   X
(0206) 					
(0207) 					if(currentTempA[1] == 0x00){
    0FC9: 62 D0 02 MOV   REG[0xD0],0x2
    0FCC: 3C 25 00 CMP   [currentTempA+1],0x0
    0FCF: B0 0F    JNZ   0x0FDF
(0208) 					UART_CPutString(".5 C");
    0FD1: 10       PUSH  X
    0FD2: 50 04    MOV   A,0x4
    0FD4: 08       PUSH  A
    0FD5: 50 84    MOV   A,0x84
    0FD7: 5C       MOV   X,A
    0FD8: 18       POP   A
    0FD9: 7C 08 0F LCALL _UART_CPutString
    0FDC: 20       POP   X
(0209) 						
(0210) 
(0211) 					}else {
    0FDD: 80 0D    JMP   0x0FEB
(0212) 
(0213) 					UART_CPutString(".0 C");		
    0FDF: 10       PUSH  X
    0FE0: 50 04    MOV   A,0x4
    0FE2: 08       PUSH  A
    0FE3: 50 7F    MOV   A,0x7F
    0FE5: 5C       MOV   X,A
    0FE6: 18       POP   A
    0FE7: 7C 08 0F LCALL _UART_CPutString
    0FEA: 20       POP   X
(0214) 					}
(0215) 					compareParameters();
    0FEB: 95 6A    CALL  _compareParameters
(0216) 					update = FALSE;
    0FED: 62 D0 02 MOV   REG[0xD0],0x2
    0FF0: 55 2E 00 MOV   [update],0x0
(0217) 					
(0218) 					
(0219) 					if (fanOn){ LED_Fan_Indicator_Data_ADDR ^= LED_Fan_Indicator_MASK;
    0FF3: 62 D0 02 MOV   REG[0xD0],0x2
    0FF6: 3C 3A 00 CMP   [fanOn],0x0
    0FF9: A0 06    JZ    0x1000
    0FFB: 45 04 08 XOR   REG[0x4],0x8
(0220) 					}else {LED_Fan_Indicator_Data_ADDR &= ~LED_Fan_Indicator_MASK;}
    0FFE: 80 04    JMP   0x1003
    1000: 41 04 F7 AND   REG[0x4],0xF7
(0221) 					
(0222) 					
(0223) 			//	}	
(0224) 				
(0225) 				
(0226) 				//firstPass = TRUE;
(0227) 				}
(0228) 	   }//end invalid input loop
    1003: 62 D0 02 MOV   REG[0xD0],0x2
    1006: 3C 47 00 CMP   [invaildFlag],0x0
    1009: AE 89    JZ    0x0E93
(0229)         	
(0230)   }//End while(1)
    100B: 62 D0 02 MOV   REG[0xD0],0x2
    100E: 3C 45 00 CMP   [firstPass],0x0
    1011: AF F1    JZ    0x1003
    1013: 8F FF    JMP   0x1013
(0231) 
(0232) } //End Main
(0233) 
(0234) void startFunction (void)
(0235) {
(0236) 	UART_CPutString(welcome);
_startFunction:
    1015: 10       PUSH  X
    1016: 50 01    MOV   A,0x1
    1018: 08       PUSH  A
    1019: 50 A0    MOV   A,0xA0
    101B: 5C       MOV   X,A
    101C: 18       POP   A
    101D: 7C 08 0F LCALL _UART_CPutString
(0237) 	UART_PutCRLF();
    1020: 7C 08 21 LCALL _UART_PutCRLF
(0238) 	UART_PutCRLF();
    1023: 7C 08 21 LCALL _UART_PutCRLF
(0239) 	UART_CPutString(setThermModePrompt);
    1026: 50 02    MOV   A,0x2
    1028: 08       PUSH  A
    1029: 50 A6    MOV   A,0xA6
    102B: 5C       MOV   X,A
    102C: 18       POP   A
    102D: 7C 08 0F LCALL _UART_CPutString
(0240) 	UART_PutCRLF();
    1030: 7C 08 21 LCALL _UART_PutCRLF
(0241) 	UART_PutCRLF();
    1033: 7C 08 21 LCALL _UART_PutCRLF
(0242) 	UART_CPutString(setFanModePrompt);
    1036: 50 03    MOV   A,0x3
    1038: 08       PUSH  A
    1039: 50 26    MOV   A,0x26
    103B: 5C       MOV   X,A
    103C: 18       POP   A
    103D: 7C 08 0F LCALL _UART_CPutString
(0243) 	UART_PutCRLF();
    1040: 7C 08 21 LCALL _UART_PutCRLF
(0244) 	UART_PutCRLF();
    1043: 7C 08 21 LCALL _UART_PutCRLF
(0245) 	UART_CPutString(setTolerancePrompt);
    1046: 50 02    MOV   A,0x2
    1048: 08       PUSH  A
    1049: 50 31    MOV   A,0x31
    104B: 5C       MOV   X,A
    104C: 18       POP   A
    104D: 7C 08 0F LCALL _UART_CPutString
(0246) 	UART_PutCRLF();
    1050: 7C 08 21 LCALL _UART_PutCRLF
(0247) 	UART_PutCRLF();
    1053: 7C 08 21 LCALL _UART_PutCRLF
(0248) 	UART_CPutString(setTempraturePrompt);
    1056: 50 01    MOV   A,0x1
    1058: 08       PUSH  A
    1059: 50 C8    MOV   A,0xC8
    105B: 5C       MOV   X,A
    105C: 18       POP   A
    105D: 7C 08 0F LCALL _UART_CPutString
(0249) 	UART_PutCRLF();
    1060: 7C 08 21 LCALL _UART_PutCRLF
(0250) 	UART_PutCRLF();
    1063: 7C 08 21 LCALL _UART_PutCRLF
    1066: 20       POP   X
    1067: 7F       RET   
(0251) 
(0252) 	
(0253) }//end startFunction
(0254) 	
(0255) void readFunction (void)
(0256) {
(0257) 	    UART_CPutString("\r\n");
_readFunction:
    1068: 10       PUSH  X
    1069: 50 04    MOV   A,0x4
    106B: 08       PUSH  A
    106C: 50 7C    MOV   A,0x7C
    106E: 5C       MOV   X,A
    106F: 18       POP   A
    1070: 7C 08 0F LCALL _UART_CPutString
(0258) 		UART_CPutString(">");
    1073: 50 04    MOV   A,0x4
    1075: 08       PUSH  A
    1076: 50 7A    MOV   A,0x7A
    1078: 5C       MOV   X,A
    1079: 18       POP   A
    107A: 7C 08 0F LCALL _UART_CPutString
    107D: 20       POP   X
(0259)         placeCounter = 0;
    107E: 62 D0 02 MOV   REG[0xD0],0x2
    1081: 55 23 00 MOV   [placeCounter+1],0x0
    1084: 55 22 00 MOV   [placeCounter],0x0
(0260) 		finishFlag= FALSE ;
    1087: 62 D0 02 MOV   REG[0xD0],0x2
    108A: 55 48 00 MOV   [finishFlag],0x0
    108D: 80 F4    JMP   0x1182
(0261) 
(0262)         while (!finishFlag) { 
(0263)               charIn = UART_cReadChar();
    108F: 10       PUSH  X
    1090: 7C 07 7C LCALL _UART_cReadChar
    1093: 20       POP   X
    1094: 62 D0 02 MOV   REG[0xD0],0x2
    1097: 53 36    MOV   [charIn],A
    1099: 80 0B    JMP   0x10A5
(0264)               while (charIn == 0x00){charIn = UART_cReadChar();}
    109B: 10       PUSH  X
    109C: 7C 07 7C LCALL _UART_cReadChar
    109F: 20       POP   X
    10A0: 62 D0 02 MOV   REG[0xD0],0x2
    10A3: 53 36    MOV   [charIn],A
    10A5: 62 D0 02 MOV   REG[0xD0],0x2
    10A8: 3C 36 00 CMP   [charIn],0x0
    10AB: AF EF    JZ    0x109B
(0265) 	               if (placeCounter<79){
    10AD: 62 D0 02 MOV   REG[0xD0],0x2
    10B0: 51 23    MOV   A,[placeCounter+1]
    10B2: 11 4F    SUB   A,0x4F
    10B4: 51 22    MOV   A,[placeCounter]
    10B6: 31 80    XOR   A,0x80
    10B8: 19 80    SBB   A,0x80
    10BA: D0 A8    JNC   0x1163
(0266) 					
(0267)                     if (charIn == 0x0d){ 
    10BC: 62 D0 02 MOV   REG[0xD0],0x2
    10BF: 3C 36 0D CMP   [charIn],0xD
    10C2: B0 1F    JNZ   0x10E2
(0268)                                 UART_CPutString("\r\n");
    10C4: 10       PUSH  X
    10C5: 50 04    MOV   A,0x4
    10C7: 08       PUSH  A
    10C8: 50 7C    MOV   A,0x7C
    10CA: 5C       MOV   X,A
    10CB: 18       POP   A
    10CC: 7C 08 0F LCALL _UART_CPutString
(0269)                                 UART_CPutString("\r\n");
    10CF: 50 04    MOV   A,0x4
    10D1: 08       PUSH  A
    10D2: 50 7C    MOV   A,0x7C
    10D4: 5C       MOV   X,A
    10D5: 18       POP   A
    10D6: 7C 08 0F LCALL _UART_CPutString
    10D9: 20       POP   X
(0270)                                 finishFlag = TRUE;
    10DA: 62 D0 02 MOV   REG[0xD0],0x2
    10DD: 55 48 01 MOV   [finishFlag],0x1
(0271)                             } //end if CR
    10E0: 80 A1    JMP   0x1182
(0272)                        			 else if ((charIn == 0x08 || charIn ==0x7f) && placeCounter > 0 ){ //if backspace
    10E2: 62 D0 02 MOV   REG[0xD0],0x2
    10E5: 3C 36 08 CMP   [charIn],0x8
    10E8: A0 06    JZ    0x10EF
    10EA: 3C 36 7F CMP   [charIn],0x7F
    10ED: B0 2D    JNZ   0x111B
    10EF: 62 D0 02 MOV   REG[0xD0],0x2
    10F2: 50 00    MOV   A,0x0
    10F4: 12 23    SUB   A,[placeCounter+1]
    10F6: 51 22    MOV   A,[placeCounter]
    10F8: 31 80    XOR   A,0x80
    10FA: 62 D0 00 MOV   REG[0xD0],0x0
    10FD: 53 F0    MOV   [__rX],A
    10FF: 50 80    MOV   A,0x80
    1101: 1A F0    SBB   A,[__rX]
    1103: D0 17    JNC   0x111B
(0273)                                 placeCounter--;
    1105: 62 D0 02 MOV   REG[0xD0],0x2
    1108: 7A 23    DEC   [placeCounter+1]
    110A: 1E 22 00 SBB   [placeCounter],0x0
(0274)                                 UART_CPutString("\x8\x20\x8");
    110D: 10       PUSH  X
    110E: 50 04    MOV   A,0x4
    1110: 08       PUSH  A
    1111: 50 76    MOV   A,0x76
    1113: 5C       MOV   X,A
    1114: 18       POP   A
    1115: 7C 08 0F LCALL _UART_CPutString
    1118: 20       POP   X
(0275)                      				   } //end if backspace
    1119: 80 68    JMP   0x1182
(0276)                   			  else {
(0277)                                     rawString[placeCounter] = charIn;
    111B: 62 D0 02 MOV   REG[0xD0],0x2
    111E: 51 23    MOV   A,[placeCounter+1]
    1120: 01 5B    ADD   A,0x5B
    1122: 62 D0 00 MOV   REG[0xD0],0x0
    1125: 53 F3    MOV   [__r1],A
    1127: 62 D0 02 MOV   REG[0xD0],0x2
    112A: 51 22    MOV   A,[placeCounter]
    112C: 09 00    ADC   A,0x0
    112E: 60 D5    MOV   REG[0xD5],A
    1130: 62 D0 02 MOV   REG[0xD0],0x2
    1133: 51 36    MOV   A,[charIn]
    1135: 62 D0 00 MOV   REG[0xD0],0x0
    1138: 3F F3    MVI   [__r1],A
(0278)                                     UART_PutChar(rawString[placeCounter]);
    113A: 62 D0 02 MOV   REG[0xD0],0x2
    113D: 51 23    MOV   A,[placeCounter+1]
    113F: 01 5B    ADD   A,0x5B
    1141: 62 D0 00 MOV   REG[0xD0],0x0
    1144: 53 F3    MOV   [__r1],A
    1146: 62 D0 02 MOV   REG[0xD0],0x2
    1149: 51 22    MOV   A,[placeCounter]
    114B: 09 00    ADC   A,0x0
    114D: 62 D0 00 MOV   REG[0xD0],0x0
    1150: 60 D4    MOV   REG[0xD4],A
    1152: 3E F3    MVI   A,[__r1]
    1154: 10       PUSH  X
    1155: 7C 07 6C LCALL _UART_PutChar
    1158: 20       POP   X
(0279)                                     placeCounter++;
    1159: 62 D0 02 MOV   REG[0xD0],0x2
    115C: 76 23    INC   [placeCounter+1]
    115E: 0E 22 00 ADC   [placeCounter],0x0
(0280)                             }// end else write into string
(0281)                   }  else { 
    1161: 80 20    JMP   0x1182
(0282) 							
(0283) 							UART_PutCRLF();
    1163: 10       PUSH  X
    1164: 7C 08 21 LCALL _UART_PutCRLF
(0284)                             UART_CPutString("String Full");
    1167: 50 04    MOV   A,0x4
    1169: 08       PUSH  A
    116A: 50 6A    MOV   A,0x6A
    116C: 5C       MOV   X,A
    116D: 18       POP   A
    116E: 7C 08 0F LCALL _UART_CPutString
(0285) 							UART_PutChar(0x07);
    1171: 50 07    MOV   A,0x7
    1173: 7C 07 6C LCALL _UART_PutChar
    1176: 20       POP   X
(0286)                             finishFlag = TRUE;
    1177: 62 D0 02 MOV   REG[0xD0],0x2
    117A: 55 48 01 MOV   [finishFlag],0x1
(0287) 							UART_PutCRLF();
    117D: 10       PUSH  X
    117E: 7C 08 21 LCALL _UART_PutCRLF
    1181: 20       POP   X
(0288) 							
(0289)                     }// end placeCounter if
(0290) 
(0291)     }//end while (!finsihFlag)
    1182: 62 D0 02 MOV   REG[0xD0],0x2
    1185: 3C 48 00 CMP   [finishFlag],0x0
    1188: AF 06    JZ    0x108F
    118A: 7F       RET   
(0292) 		
(0293) }//end readFunction
(0294) void stringParser(void)
(0295) {
_stringParser:
    118B: 10       PUSH  X
    118C: 4F       MOV   X,SP
    118D: 38 02    ADD   SP,0x2
(0296) 		if (rawString[2]>= 0x30 && rawString[2]<= 0x39 &&  rawString[3]>= 0x30 && rawString[3]<= 0x39 || rawString[2] == 'h' || rawString[2] == 'c' ){//checks for valid number
    118F: 62 D0 00 MOV   REG[0xD0],0x0
    1192: 3C 5D 30 CMP   [rawString+2],0x30
    1195: C0 1B    JC    0x11B1
    1197: 62 D0 00 MOV   REG[0xD0],0x0
    119A: 50 39    MOV   A,0x39
    119C: 3A 5D    CMP   A,[rawString+2]
    119E: C0 12    JC    0x11B1
    11A0: 62 D0 00 MOV   REG[0xD0],0x0
    11A3: 3C 5E 30 CMP   [rawString+3],0x30
    11A6: C0 0A    JC    0x11B1
    11A8: 62 D0 00 MOV   REG[0xD0],0x0
    11AB: 50 39    MOV   A,0x39
    11AD: 3A 5E    CMP   A,[rawString+3]
    11AF: D0 0E    JNC   0x11BE
    11B1: 62 D0 00 MOV   REG[0xD0],0x0
    11B4: 3C 5D 68 CMP   [rawString+2],0x68
    11B7: A0 06    JZ    0x11BE
    11B9: 3C 5D 63 CMP   [rawString+2],0x63
    11BC: B1 97    JNZ   0x1354
(0297) 			
(0298) 			if(!(rawString[1] ==' ')){
    11BE: 62 D0 00 MOV   REG[0xD0],0x0
    11C1: 3C 5C 20 CMP   [rawString+1],0x20
    11C4: A0 0F    JZ    0x11D4
(0299) 				
(0300) 				invaildFlag = TRUE;
    11C6: 62 D0 02 MOV   REG[0xD0],0x2
    11C9: 55 47 01 MOV   [invaildFlag],0x1
(0301) 				UART_PutCRLF();
    11CC: 10       PUSH  X
    11CD: 7C 08 21 LCALL _UART_PutCRLF
(0302) 				UART_PutCRLF();
    11D0: 7C 08 21 LCALL _UART_PutCRLF
    11D3: 20       POP   X
(0303) 				
(0304) 			}// maybe put else
(0305) 			
(0306) 				if(rawString[0]>= 0x41 && rawString[0]<= 0x5a) {rawString[0] = rawString[0]+0x20;} //checks if inputted charter & makes it lower case if it is 
    11D4: 62 D0 00 MOV   REG[0xD0],0x0
    11D7: 3C 5B 41 CMP   [rawString],0x41
    11DA: C0 10    JC    0x11EB
    11DC: 62 D0 00 MOV   REG[0xD0],0x0
    11DF: 50 5A    MOV   A,0x5A
    11E1: 3A 5B    CMP   A,[rawString]
    11E3: C0 07    JC    0x11EB
    11E5: 62 D0 00 MOV   REG[0xD0],0x0
    11E8: 06 5B 20 ADD   [rawString],0x20
(0307) 				if(rawString[2]>= 0x41 && rawString[2]<= 0x5a) {rawString[2] = rawString[2]+0x20;}
    11EB: 62 D0 00 MOV   REG[0xD0],0x0
    11EE: 3C 5D 41 CMP   [rawString+2],0x41
    11F1: C0 10    JC    0x1202
    11F3: 62 D0 00 MOV   REG[0xD0],0x0
    11F6: 50 5A    MOV   A,0x5A
    11F8: 3A 5D    CMP   A,[rawString+2]
    11FA: C0 07    JC    0x1202
    11FC: 62 D0 00 MOV   REG[0xD0],0x0
    11FF: 06 5D 20 ADD   [rawString+2],0x20
(0308) 				
(0309) 					switch(rawString[0])//Determines if operation is read or write
    1202: 62 D0 00 MOV   REG[0xD0],0x0
    1205: 51 5B    MOV   A,[rawString]
    1207: 54 01    MOV   [X+1],A
    1209: 56 00 00 MOV   [X+0],0x0
    120C: 52 01    MOV   A,[X+1]
    120E: 11 6D    SUB   A,0x6D
    1210: 62 D0 00 MOV   REG[0xD0],0x0
    1213: 53 EF    MOV   [__rY],A
    1215: 52 00    MOV   A,[X+0]
    1217: 31 80    XOR   A,0x80
    1219: 19 80    SBB   A,0x80
    121B: 2A EF    OR    A,[__rY]
    121D: A0 F4    JZ    0x1312
    121F: D0 0D    JNC   0x122D
    1221: 3D 00 00 CMP   [X+0],0x0
    1224: B0 06    JNZ   0x122B
    1226: 3D 01 66 CMP   [X+1],0x66
    1229: A1 42    JZ    0x136C
    122B: 81 0E    JMP   0x133A
    122D: 3D 00 00 CMP   [X+0],0x0
    1230: B0 06    JNZ   0x1237
    1232: 3D 01 73 CMP   [X+1],0x73
    1235: A0 0D    JZ    0x1243
    1237: 3D 00 00 CMP   [X+0],0x0
    123A: B0 06    JNZ   0x1241
    123C: 3D 01 74 CMP   [X+1],0x74
    123F: A0 3E    JZ    0x127E
    1241: 80 F8    JMP   0x133A
(0310) 			        {
(0311) 			                case  's':
(0312) 					
(0313) 							temp2 = asciiToInt(rawString[2]);
    1243: 62 D0 00 MOV   REG[0xD0],0x0
    1246: 51 5D    MOV   A,[rawString+2]
    1248: 08       PUSH  A
    1249: 92 BA    CALL  _asciiToInt
    124B: 62 D0 02 MOV   REG[0xD0],0x2
    124E: 53 2C    MOV   [temp2],A
(0314) 							temp3 = asciiToInt(rawString[3]);
    1250: 62 D0 00 MOV   REG[0xD0],0x0
    1253: 51 5E    MOV   A,[rawString+3]
    1255: 08       PUSH  A
    1256: 92 AD    CALL  _asciiToInt
    1258: 38 FE    ADD   SP,0xFE
    125A: 62 D0 02 MOV   REG[0xD0],0x2
    125D: 53 2B    MOV   [temp3],A
(0315) 							
(0316) 							temp2 = temp2 * 10;
    125F: 62 D0 02 MOV   REG[0xD0],0x2
    1262: 51 2C    MOV   A,[temp2]
    1264: 60 E8    MOV   REG[0xE8],A
    1266: 62 E9 0A MOV   REG[0xE9],0xA
    1269: 40       NOP   
    126A: 5D EB    MOV   A,REG[0xEB]
    126C: 53 2C    MOV   [temp2],A
(0317) 							temp = temp2 + temp3; 
    126E: 51 2C    MOV   A,[temp2]
    1270: 62 D0 02 MOV   REG[0xD0],0x2
    1273: 02 2B    ADD   A,[temp3]
    1275: 62 D0 02 MOV   REG[0xD0],0x2
    1278: 53 4B    MOV   [temp],A
(0318) 							
(0319) 							outputConfig();
    127A: 93 37    CALL  _outputConfig
(0320) 			                break; //end case r
    127C: 80 EF    JMP   0x136C
(0321) 
(0322) 			                case 't':
(0323) 							
(0324) 							tolerence = asciiToInt(rawString[2]);
    127E: 62 D0 00 MOV   REG[0xD0],0x0
    1281: 51 5D    MOV   A,[rawString+2]
    1283: 08       PUSH  A
    1284: 92 7F    CALL  _asciiToInt
    1286: 38 FF    ADD   SP,0xFF
    1288: 62 D0 01 MOV   REG[0xD0],0x1
    128B: 53 FF    MOV   [tolerence],A
(0325) 
(0326) 							TH = temp + tolerence/2;
    128D: 50 02    MOV   A,0x2
    128F: 08       PUSH  A
    1290: 51 FF    MOV   A,[tolerence]
    1292: 08       PUSH  A
    1293: 62 D0 00 MOV   REG[0xD0],0x0
    1296: 7C 18 68 LCALL 0x1868
    1299: 18       POP   A
    129A: 53 F4    MOV   [__r0],A
    129C: 38 FF    ADD   SP,0xFF
    129E: 62 D0 02 MOV   REG[0xD0],0x2
    12A1: 51 4B    MOV   A,[temp]
    12A3: 62 D0 00 MOV   REG[0xD0],0x0
    12A6: 02 F4    ADD   A,[__r0]
    12A8: 62 D0 02 MOV   REG[0xD0],0x2
    12AB: 53 44    MOV   [TH],A
(0327) 							TL = temp - tolerence/2;
    12AD: 62 D0 01 MOV   REG[0xD0],0x1
    12B0: 50 02    MOV   A,0x2
    12B2: 08       PUSH  A
    12B3: 51 FF    MOV   A,[tolerence]
    12B5: 08       PUSH  A
    12B6: 62 D0 00 MOV   REG[0xD0],0x0
    12B9: 7C 18 68 LCALL 0x1868
    12BC: 18       POP   A
    12BD: 53 F4    MOV   [__r0],A
    12BF: 38 FF    ADD   SP,0xFF
    12C1: 62 D0 02 MOV   REG[0xD0],0x2
    12C4: 51 4B    MOV   A,[temp]
    12C6: 62 D0 00 MOV   REG[0xD0],0x0
    12C9: 12 F4    SUB   A,[__r0]
    12CB: 62 D0 02 MOV   REG[0xD0],0x2
    12CE: 53 43    MOV   [TL],A
(0328) 
(0329) 							THvalue[0] = accessTH;
    12D0: 62 D0 02 MOV   REG[0xD0],0x2
    12D3: 51 37    MOV   A,[accessTH]
    12D5: 62 D0 02 MOV   REG[0xD0],0x2
    12D8: 53 00    MOV   [THvalue],A
(0330) 							THvalue[1] = TH;
    12DA: 62 D0 02 MOV   REG[0xD0],0x2
    12DD: 51 44    MOV   A,[TH]
    12DF: 62 D0 02 MOV   REG[0xD0],0x2
    12E2: 53 01    MOV   [THvalue+1],A
(0331) 							THvalue[2] = 0x00;
    12E4: 55 02 00 MOV   [THvalue+2],0x0
(0332) 							
(0333) 							TLvalue[0] = accessTL ;
    12E7: 62 D0 02 MOV   REG[0xD0],0x2
    12EA: 51 38    MOV   A,[accessTL]
    12EC: 62 D0 02 MOV   REG[0xD0],0x2
    12EF: 53 03    MOV   [TLvalue],A
(0334) 							TLvalue[1] = TL;
    12F1: 62 D0 02 MOV   REG[0xD0],0x2
    12F4: 51 43    MOV   A,[TL]
    12F6: 62 D0 02 MOV   REG[0xD0],0x2
    12F9: 53 04    MOV   [TLvalue+1],A
(0335) 							TLvalue[2] = 0x00;
    12FB: 55 05 00 MOV   [TLvalue+2],0x0
(0336) 							
(0337) 							setTolerenceLevel(THvalue, TLvalue);
    12FE: 50 02    MOV   A,0x2
    1300: 08       PUSH  A
    1301: 50 03    MOV   A,0x3
    1303: 08       PUSH  A
    1304: 50 02    MOV   A,0x2
    1306: 08       PUSH  A
    1307: 50 00    MOV   A,0x0
    1309: 08       PUSH  A
    130A: 90 75    CALL  _setTolerenceLevel
    130C: 38 FC    ADD   SP,0xFC
(0338) 							outputConfig();
    130E: 92 A3    CALL  _outputConfig
(0339) 						
(0340) 			                break; //end case w
    1310: 80 5B    JMP   0x136C
(0341) 							
(0342) 							case 'm':
(0343) 							
(0344) 							if (rawString[2]=='c'){
    1312: 62 D0 00 MOV   REG[0xD0],0x0
    1315: 3C 5D 63 CMP   [rawString+2],0x63
    1318: B0 09    JNZ   0x1322
(0345) 								
(0346) 								heatOrCool=TRUE;
    131A: 62 D0 02 MOV   REG[0xD0],0x2
    131D: 55 2A 01 MOV   [heatOrCool],0x1
(0347) 								//changePOLbit();
(0348) 							}else if(rawString[2]=='h'){
    1320: 80 4B    JMP   0x136C
    1322: 62 D0 00 MOV   REG[0xD0],0x0
    1325: 3C 5D 68 CMP   [rawString+2],0x68
    1328: B0 09    JNZ   0x1332
(0349) 							
(0350) 							heatOrCool = FALSE;
    132A: 62 D0 02 MOV   REG[0xD0],0x2
    132D: 55 2A 00 MOV   [heatOrCool],0x0
(0351) 							//changePOLbit();		
(0352) 								
(0353) 							}else{ fanOn = FALSE;}
    1330: 80 3B    JMP   0x136C
    1332: 62 D0 02 MOV   REG[0xD0],0x2
    1335: 55 3A 00 MOV   [fanOn],0x0
(0354) 							
(0355) 							break;
    1338: 80 33    JMP   0x136C
(0356) 							
(0357) 							case 'f':
(0358) 
(0359) 							break;
(0360) 							
(0361) 							default:
(0362) 							
(0363) 							UART_PutCRLF();
    133A: 10       PUSH  X
    133B: 7C 08 21 LCALL _UART_PutCRLF
(0364) 			                UART_CPutString("invalid input charecter");
    133E: 50 04    MOV   A,0x4
    1340: 08       PUSH  A
    1341: 50 52    MOV   A,0x52
    1343: 5C       MOV   X,A
    1344: 18       POP   A
    1345: 7C 08 0F LCALL _UART_CPutString
(0365) 			                UART_PutCRLF();
    1348: 7C 08 21 LCALL _UART_PutCRLF
    134B: 20       POP   X
(0366) 							invaildFlag = TRUE;	 
    134C: 62 D0 02 MOV   REG[0xD0],0x2
    134F: 55 47 01 MOV   [invaildFlag],0x1
(0367) 							
(0368) 					}//end command switch
(0369)  
(0370) 		}else{
    1352: 80 19    JMP   0x136C
(0371) 			
(0372) 		UART_PutCRLF();
    1354: 10       PUSH  X
    1355: 7C 08 21 LCALL _UART_PutCRLF
(0373) 		UART_CPutString("Invalid input number");
    1358: 50 04    MOV   A,0x4
    135A: 08       PUSH  A
    135B: 50 3D    MOV   A,0x3D
    135D: 5C       MOV   X,A
    135E: 18       POP   A
    135F: 7C 08 0F LCALL _UART_CPutString
(0374) 		UART_PutCRLF();
    1362: 7C 08 21 LCALL _UART_PutCRLF
    1365: 20       POP   X
(0375) 		invaildFlag = TRUE;	
    1366: 62 D0 02 MOV   REG[0xD0],0x2
    1369: 55 47 01 MOV   [invaildFlag],0x1
(0376) 			
(0377) 		}//end of invalid input if-else 
    136C: 38 FE    ADD   SP,0xFE
    136E: 20       POP   X
    136F: 7F       RET   
(0378) 	
(0379) }//parse string
(0380) 
(0381) void TempReset(void){
_TempReset:
    1370: 71 C0    OR    F,0xC0
    1372: 08       PUSH  A
    1373: 5D D0    MOV   A,REG[0xD0]
    1375: 08       PUSH  A
(0382) 	
(0383) 		update = TRUE;
    1376: 62 D0 02 MOV   REG[0xD0],0x2
    1379: 55 2E 01 MOV   [update],0x1
    137C: 18       POP   A
    137D: 60 D0    MOV   REG[0xD0],A
    137F: 18       POP   A
    1380: 7E       RETI  
(0384) 	
(0385) }
(0386) 
(0387) void setTolerenceLevel(char THvalue[], char TLvalue[]){
_setTolerenceLevel:
  TLvalue              --> X-7
  THvalue              --> X-5
    1381: 10       PUSH  X
    1382: 4F       MOV   X,SP
(0388) 
(0389) 		I2CHW_bWriteBytes(ThermoStat, THvalue , 3 ,I2CHW_CompleteXfer);
    1383: 10       PUSH  X
    1384: 50 00    MOV   A,0x0
    1386: 08       PUSH  A
    1387: 50 03    MOV   A,0x3
    1389: 08       PUSH  A
    138A: 52 FB    MOV   A,[X-5]
    138C: 08       PUSH  A
    138D: 52 FC    MOV   A,[X-4]
    138F: 08       PUSH  A
    1390: 50 48    MOV   A,0x48
    1392: 08       PUSH  A
    1393: 7C 0A 4B LCALL _I2CHW_bWriteBytes
    1396: 38 FB    ADD   SP,0xFB
    1398: 20       POP   X
(0390)         while(!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
    1399: 10       PUSH  X
    139A: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    139D: 20       POP   X
    139E: 62 D0 00 MOV   REG[0xD0],0x0
    13A1: 53 F4    MOV   [__r0],A
    13A3: 47 F4 40 TST   [__r0],0x40
    13A6: AF F2    JZ    0x1399
(0391)         I2CHW_ClrWrStatus();
    13A8: 10       PUSH  X
    13A9: 7C 0D B6 LCALL _I2CHW_ClrWrStatus
    13AC: 20       POP   X
(0392) 		
(0393) 		I2CHW_bWriteBytes(ThermoStat, TLvalue , 3 ,I2CHW_CompleteXfer);
    13AD: 10       PUSH  X
    13AE: 50 00    MOV   A,0x0
    13B0: 08       PUSH  A
    13B1: 50 03    MOV   A,0x3
    13B3: 08       PUSH  A
    13B4: 52 F9    MOV   A,[X-7]
    13B6: 08       PUSH  A
    13B7: 52 FA    MOV   A,[X-6]
    13B9: 08       PUSH  A
    13BA: 50 48    MOV   A,0x48
    13BC: 08       PUSH  A
    13BD: 7C 0A 4B LCALL _I2CHW_bWriteBytes
    13C0: 38 FB    ADD   SP,0xFB
    13C2: 20       POP   X
(0394)         while(!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
    13C3: 10       PUSH  X
    13C4: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    13C7: 20       POP   X
    13C8: 62 D0 00 MOV   REG[0xD0],0x0
    13CB: 53 F4    MOV   [__r0],A
    13CD: 47 F4 40 TST   [__r0],0x40
    13D0: AF F2    JZ    0x13C3
(0395)         I2CHW_ClrWrStatus();
    13D2: 10       PUSH  X
    13D3: 7C 0D B6 LCALL _I2CHW_ClrWrStatus
(0396) 		
(0397) 		I2CHW_bWriteBytes(ThermoStat, &accessTH , 1 ,I2CHW_NoStop);
    13D6: 50 02    MOV   A,0x2
    13D8: 08       PUSH  A
    13D9: 50 01    MOV   A,0x1
    13DB: 08       PUSH  A
    13DC: 50 02    MOV   A,0x2
    13DE: 08       PUSH  A
    13DF: 50 37    MOV   A,0x37
    13E1: 08       PUSH  A
    13E2: 50 48    MOV   A,0x48
    13E4: 08       PUSH  A
    13E5: 7C 0A 4B LCALL _I2CHW_bWriteBytes
    13E8: 38 FB    ADD   SP,0xFB
    13EA: 20       POP   X
(0398)         while(!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
    13EB: 10       PUSH  X
    13EC: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    13EF: 20       POP   X
    13F0: 62 D0 00 MOV   REG[0xD0],0x0
    13F3: 53 F4    MOV   [__r0],A
    13F5: 47 F4 40 TST   [__r0],0x40
    13F8: AF F2    JZ    0x13EB
(0399)         I2CHW_ClrWrStatus();
    13FA: 10       PUSH  X
    13FB: 7C 0D B6 LCALL _I2CHW_ClrWrStatus
(0400) 		
(0401) 		I2CHW_fReadBytes(ThermoStat, THvalueTest , 2, I2CHW_RepStart);
    13FE: 50 01    MOV   A,0x1
    1400: 08       PUSH  A
    1401: 50 02    MOV   A,0x2
    1403: 08       PUSH  A
    1404: 50 02    MOV   A,0x2
    1406: 08       PUSH  A
    1407: 50 18    MOV   A,0x18
    1409: 08       PUSH  A
    140A: 50 48    MOV   A,0x48
    140C: 08       PUSH  A
    140D: 7C 0A 07 LCALL _I2CHW_fReadBytes
    1410: 38 FB    ADD   SP,0xFB
    1412: 20       POP   X
(0402)         while(!(I2CHW_bReadI2CStatus() & I2CHW_RD_COMPLETE));
    1413: 10       PUSH  X
    1414: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    1417: 20       POP   X
    1418: 62 D0 00 MOV   REG[0xD0],0x0
    141B: 53 F4    MOV   [__r0],A
    141D: 47 F4 04 TST   [__r0],0x4
    1420: AF F2    JZ    0x1413
(0403)         I2CHW_ClrRdStatus();
    1422: 10       PUSH  X
    1423: 7C 0D AF LCALL _I2CHW_ClrRdStatus
(0404) 		
(0405) 		I2CHW_bWriteBytes(ThermoStat, &accessTL , 1 ,I2CHW_NoStop);
    1426: 50 02    MOV   A,0x2
    1428: 08       PUSH  A
    1429: 50 01    MOV   A,0x1
    142B: 08       PUSH  A
    142C: 50 02    MOV   A,0x2
    142E: 08       PUSH  A
    142F: 50 38    MOV   A,0x38
    1431: 08       PUSH  A
    1432: 50 48    MOV   A,0x48
    1434: 08       PUSH  A
    1435: 7C 0A 4B LCALL _I2CHW_bWriteBytes
    1438: 38 FB    ADD   SP,0xFB
    143A: 20       POP   X
(0406)         while(!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
    143B: 10       PUSH  X
    143C: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    143F: 20       POP   X
    1440: 62 D0 00 MOV   REG[0xD0],0x0
    1443: 53 F4    MOV   [__r0],A
    1445: 47 F4 40 TST   [__r0],0x40
    1448: AF F2    JZ    0x143B
(0407)         I2CHW_ClrWrStatus();
    144A: 10       PUSH  X
    144B: 7C 0D B6 LCALL _I2CHW_ClrWrStatus
(0408) 		
(0409) 		I2CHW_fReadBytes(ThermoStat, TLvalueTest , 2, I2CHW_RepStart);
    144E: 50 01    MOV   A,0x1
    1450: 08       PUSH  A
    1451: 50 02    MOV   A,0x2
    1453: 08       PUSH  A
    1454: 50 02    MOV   A,0x2
    1456: 08       PUSH  A
    1457: 50 1A    MOV   A,0x1A
    1459: 08       PUSH  A
    145A: 50 48    MOV   A,0x48
    145C: 08       PUSH  A
    145D: 7C 0A 07 LCALL _I2CHW_fReadBytes
    1460: 38 FB    ADD   SP,0xFB
    1462: 20       POP   X
(0410)         while(!(I2CHW_bReadI2CStatus() & I2CHW_RD_COMPLETE));
    1463: 10       PUSH  X
    1464: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    1467: 20       POP   X
    1468: 62 D0 00 MOV   REG[0xD0],0x0
    146B: 53 F4    MOV   [__r0],A
    146D: 47 F4 04 TST   [__r0],0x4
    1470: AF F2    JZ    0x1463
(0411)         I2CHW_ClrRdStatus();
    1472: 10       PUSH  X
    1473: 7C 0D AF LCALL _I2CHW_ClrRdStatus
(0412) 		
(0413) 		UART_PutCRLF();
    1476: 7C 08 21 LCALL _UART_PutCRLF
(0414) 		UART_PutCRLF();
    1479: 7C 08 21 LCALL _UART_PutCRLF
(0415) 		UART_CPutString("TL value:");
    147C: 50 04    MOV   A,0x4
    147E: 08       PUSH  A
    147F: 50 33    MOV   A,0x33
    1481: 5C       MOV   X,A
    1482: 18       POP   A
    1483: 7C 08 0F LCALL _UART_CPutString
    1486: 20       POP   X
(0416) 		
(0417) 
(0418) 		utoa(TLP, TLvalueTest[0],10);
    1487: 50 00    MOV   A,0x0
    1489: 08       PUSH  A
    148A: 50 0A    MOV   A,0xA
    148C: 08       PUSH  A
    148D: 62 D0 02 MOV   REG[0xD0],0x2
    1490: 51 1A    MOV   A,[TLvalueTest]
    1492: 62 D0 00 MOV   REG[0xD0],0x0
    1495: 53 F3    MOV   [__r1],A
    1497: 50 00    MOV   A,0x0
    1499: 08       PUSH  A
    149A: 51 F3    MOV   A,[__r1]
    149C: 08       PUSH  A
    149D: 62 D0 02 MOV   REG[0xD0],0x2
    14A0: 51 08    MOV   A,[TLP]
    14A2: 08       PUSH  A
    14A3: 51 09    MOV   A,[TLP+1]
    14A5: 08       PUSH  A
    14A6: 7C 18 D2 LCALL _utoa
    14A9: 38 FA    ADD   SP,0xFA
(0419) 		UART_PutString(TLP);
    14AB: 10       PUSH  X
    14AC: 62 D0 02 MOV   REG[0xD0],0x2
    14AF: 51 08    MOV   A,[TLP]
    14B1: 08       PUSH  A
    14B2: 51 09    MOV   A,[TLP+1]
    14B4: 5C       MOV   X,A
    14B5: 18       POP   A
    14B6: 7C 07 A9 LCALL _UART_PutString
(0420) 		
(0421) 		UART_PutCRLF();
    14B9: 7C 08 21 LCALL _UART_PutCRLF
(0422) 		UART_PutCRLF();
    14BC: 7C 08 21 LCALL _UART_PutCRLF
(0423) 		UART_CPutString("TH value:");
    14BF: 50 04    MOV   A,0x4
    14C1: 08       PUSH  A
    14C2: 50 29    MOV   A,0x29
    14C4: 5C       MOV   X,A
    14C5: 18       POP   A
    14C6: 7C 08 0F LCALL _UART_CPutString
    14C9: 20       POP   X
(0424) 		
(0425) 		
(0426) 		utoa(THP, THvalueTest[0],10);
    14CA: 50 00    MOV   A,0x0
    14CC: 08       PUSH  A
    14CD: 50 0A    MOV   A,0xA
    14CF: 08       PUSH  A
    14D0: 62 D0 02 MOV   REG[0xD0],0x2
    14D3: 51 18    MOV   A,[THvalueTest]
    14D5: 62 D0 00 MOV   REG[0xD0],0x0
    14D8: 53 F3    MOV   [__r1],A
    14DA: 50 00    MOV   A,0x0
    14DC: 08       PUSH  A
    14DD: 51 F3    MOV   A,[__r1]
    14DF: 08       PUSH  A
    14E0: 62 D0 02 MOV   REG[0xD0],0x2
    14E3: 51 06    MOV   A,[THP]
    14E5: 08       PUSH  A
    14E6: 51 07    MOV   A,[THP+1]
    14E8: 08       PUSH  A
    14E9: 7C 18 D2 LCALL _utoa
    14EC: 38 FA    ADD   SP,0xFA
(0427) 		UART_PutString(THP);
    14EE: 10       PUSH  X
    14EF: 62 D0 02 MOV   REG[0xD0],0x2
    14F2: 51 06    MOV   A,[THP]
    14F4: 08       PUSH  A
    14F5: 51 07    MOV   A,[THP+1]
    14F7: 5C       MOV   X,A
    14F8: 18       POP   A
    14F9: 7C 07 A9 LCALL _UART_PutString
    14FC: 20       POP   X
    14FD: 20       POP   X
    14FE: 7F       RET   
(0428) 		
(0429) }
(0430) 
(0431) void T_INT(void)
(0432) {
_T_INT:
    14FF: 08       PUSH  A
(0433) 	
(0434) LED_Data_ADDR &= LED_MASK;
    1500: 41 04 02 AND   REG[0x4],0x2
    1503: 18       POP   A
    1504: 7E       RETI  
(0435) 	
(0436) //Interupt = TRUE;
(0437) 	
(0438) }
(0439) char asciiToInt(char temp1){
_asciiToInt:
  temp1                --> X-4
    1505: 10       PUSH  X
    1506: 4F       MOV   X,SP
(0440) 	
(0441) 	if(temp1>= 0x61 && temp1<= 0x66){
    1507: 3D FC 61 CMP   [X-4],0x61
    150A: C0 12    JC    0x151D
    150C: 50 66    MOV   A,0x66
    150E: 3B FC    CMP   A,[X-4]
    1510: C0 0C    JC    0x151D
(0442) 		temp1= temp1-0x20;
    1512: 62 D0 00 MOV   REG[0xD0],0x0
    1515: 52 FC    MOV   A,[X-4]
    1517: 11 20    SUB   A,0x20
    1519: 54 FC    MOV   [X-4],A
(0443) 	}else 
    151B: 80 34    JMP   0x1550
(0444) 	
(0445) 	if (temp1  >= 0x30 && temp1 <= 0x39){
    151D: 3D FC 30 CMP   [X-4],0x30
    1520: C0 12    JC    0x1533
    1522: 50 39    MOV   A,0x39
    1524: 3B FC    CMP   A,[X-4]
    1526: C0 0C    JC    0x1533
(0446) 		
(0447) 		temp1 = temp1 - 0x30;
    1528: 62 D0 00 MOV   REG[0xD0],0x0
    152B: 52 FC    MOV   A,[X-4]
    152D: 11 30    SUB   A,0x30
    152F: 54 FC    MOV   [X-4],A
(0448) 	
(0449) 	} else if(temp1  >= 0x41 && temp1 <= 0x46){
    1531: 80 1E    JMP   0x1550
    1533: 3D FC 41 CMP   [X-4],0x41
    1536: C0 12    JC    0x1549
    1538: 50 46    MOV   A,0x46
    153A: 3B FC    CMP   A,[X-4]
    153C: C0 0C    JC    0x1549
(0450) 		temp1 = temp1 - 0x31;
    153E: 62 D0 00 MOV   REG[0xD0],0x0
    1541: 52 FC    MOV   A,[X-4]
    1543: 11 31    SUB   A,0x31
    1545: 54 FC    MOV   [X-4],A
(0451) 		
(0452) 	}
    1547: 80 08    JMP   0x1550
(0453) 	else{
(0454) 		return '0';
    1549: 62 D0 00 MOV   REG[0xD0],0x0
    154C: 50 30    MOV   A,0x30
    154E: 80 06    JMP   0x1555
(0455) 	}
(0456) 
(0457) 	return temp1;
    1550: 52 FC    MOV   A,[X-4]
    1552: 62 D0 00 MOV   REG[0xD0],0x0
    1555: 20       POP   X
    1556: 7F       RET   
(0458) 	
(0459) }
(0460) 
(0461) void compareParameters(void){
(0462) 	
(0463) 	if(heatOrCool && currentTemp >= TH){
_compareParameters:
    1557: 62 D0 02 MOV   REG[0xD0],0x2
    155A: 3C 2A 00 CMP   [heatOrCool],0x0
    155D: A0 15    JZ    0x1573
    155F: 62 D0 02 MOV   REG[0xD0],0x2
    1562: 51 4E    MOV   A,[currentTemp]
    1564: 62 D0 02 MOV   REG[0xD0],0x2
    1567: 3A 44    CMP   A,[TH]
    1569: C0 09    JC    0x1573
(0464) 		
(0465) 		fanOn = TRUE;
    156B: 62 D0 02 MOV   REG[0xD0],0x2
    156E: 55 3A 01 MOV   [fanOn],0x1
(0466) 	
(0467) 	}else if(!heatOrCool && currentTemp <= TL){
    1571: 80 1B    JMP   0x158D
    1573: 62 D0 02 MOV   REG[0xD0],0x2
    1576: 3C 2A 00 CMP   [heatOrCool],0x0
    1579: B0 13    JNZ   0x158D
    157B: 62 D0 02 MOV   REG[0xD0],0x2
    157E: 51 43    MOV   A,[TL]
    1580: 62 D0 02 MOV   REG[0xD0],0x2
    1583: 3A 4E    CMP   A,[currentTemp]
    1585: C0 07    JC    0x158D
(0468) 		
(0469) 		fanOn = TRUE;	
    1587: 62 D0 02 MOV   REG[0xD0],0x2
    158A: 55 3A 01 MOV   [fanOn],0x1
(0470) 	}	
    158D: 7F       RET   
(0471) }
(0472) void cleerLCD(void){
(0473) 
(0474) LCD_Position(0,0);
_cleerLCD:
    158E: 10       PUSH  X
    158F: 50 00    MOV   A,0x0
    1591: 57 00    MOV   X,0x0
    1593: 7C 09 AF LCALL _LCD_Position
(0475) LCD_PrCString("                 ");	
    1596: 50 04    MOV   A,0x4
    1598: 08       PUSH  A
    1599: 50 17    MOV   A,0x17
    159B: 5C       MOV   X,A
    159C: 18       POP   A
    159D: 7C 08 2A LCALL _LCD_PrCString
(0476) LCD_Position(1,0); 
    15A0: 57 00    MOV   X,0x0
    15A2: 50 01    MOV   A,0x1
    15A4: 7C 09 AF LCALL _LCD_Position
(0477) LCD_PrCString("                 ");	
    15A7: 50 04    MOV   A,0x4
    15A9: 08       PUSH  A
    15AA: 50 17    MOV   A,0x17
    15AC: 5C       MOV   X,A
    15AD: 18       POP   A
    15AE: 7C 08 2A LCALL _LCD_PrCString
    15B1: 20       POP   X
    15B2: 7F       RET   
(0478) 		
(0479) }	
(0480) void outputConfig(void){
(0481) 	
(0482) 	
(0483) 		I2CHW_bWriteBytes(ThermoStat, &accessConfigReg , 1 ,I2CHW_NoStop);
_outputConfig:
    15B3: 10       PUSH  X
    15B4: 50 02    MOV   A,0x2
    15B6: 08       PUSH  A
    15B7: 50 01    MOV   A,0x1
    15B9: 08       PUSH  A
    15BA: 50 02    MOV   A,0x2
    15BC: 08       PUSH  A
    15BD: 50 39    MOV   A,0x39
    15BF: 08       PUSH  A
    15C0: 50 48    MOV   A,0x48
    15C2: 08       PUSH  A
    15C3: 7C 0A 4B LCALL _I2CHW_bWriteBytes
    15C6: 38 FB    ADD   SP,0xFB
    15C8: 20       POP   X
(0484)         while(!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
    15C9: 10       PUSH  X
    15CA: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    15CD: 20       POP   X
    15CE: 62 D0 00 MOV   REG[0xD0],0x0
    15D1: 53 F4    MOV   [__r0],A
    15D3: 47 F4 40 TST   [__r0],0x40
    15D6: AF F2    JZ    0x15C9
(0485)         I2CHW_ClrWrStatus();
    15D8: 10       PUSH  X
    15D9: 7C 0D B6 LCALL _I2CHW_ClrWrStatus
(0486) 		
(0487) 		I2CHW_fReadBytes(ThermoStat, configOut , 1, I2CHW_RepStart);
    15DC: 50 01    MOV   A,0x1
    15DE: 08       PUSH  A
    15DF: 08       PUSH  A
    15E0: 50 02    MOV   A,0x2
    15E2: 08       PUSH  A
    15E3: 50 1C    MOV   A,0x1C
    15E5: 08       PUSH  A
    15E6: 50 48    MOV   A,0x48
    15E8: 08       PUSH  A
    15E9: 7C 0A 07 LCALL _I2CHW_fReadBytes
    15EC: 38 FB    ADD   SP,0xFB
    15EE: 20       POP   X
(0488)         while(!(I2CHW_bReadI2CStatus() & I2CHW_RD_COMPLETE));
    15EF: 10       PUSH  X
    15F0: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    15F3: 20       POP   X
    15F4: 62 D0 00 MOV   REG[0xD0],0x0
    15F7: 53 F4    MOV   [__r0],A
    15F9: 47 F4 04 TST   [__r0],0x4
    15FC: AF F2    JZ    0x15EF
(0489)         I2CHW_ClrRdStatus();
    15FE: 10       PUSH  X
    15FF: 7C 0D AF LCALL _I2CHW_ClrRdStatus
(0490) 		
(0491) 		UART_PutCRLF();
    1602: 7C 08 21 LCALL _UART_PutCRLF
(0492) 		UART_PutCRLF();
    1605: 7C 08 21 LCALL _UART_PutCRLF
(0493) 		UART_CPutString("Configuration Register:");
    1608: 50 03    MOV   A,0x3
    160A: 08       PUSH  A
    160B: 50 FF    MOV   A,0xFF
    160D: 5C       MOV   X,A
    160E: 18       POP   A
    160F: 7C 08 0F LCALL _UART_CPutString
(0494) 		UART_PutCRLF();
    1612: 7C 08 21 LCALL _UART_PutCRLF
(0495) 		UART_PutCRLF();
    1615: 7C 08 21 LCALL _UART_PutCRLF
    1618: 20       POP   X
(0496) 
(0497) 		utoa(configOutP, configOut[0], 2);
    1619: 50 00    MOV   A,0x0
    161B: 08       PUSH  A
    161C: 50 02    MOV   A,0x2
    161E: 08       PUSH  A
    161F: 62 D0 02 MOV   REG[0xD0],0x2
    1622: 51 1C    MOV   A,[configOut]
    1624: 62 D0 00 MOV   REG[0xD0],0x0
    1627: 53 F3    MOV   [__r1],A
    1629: 50 00    MOV   A,0x0
    162B: 08       PUSH  A
    162C: 51 F3    MOV   A,[__r1]
    162E: 08       PUSH  A
    162F: 62 D0 00 MOV   REG[0xD0],0x0
    1632: 51 F5    MOV   A,[configOutP]
    1634: 08       PUSH  A
    1635: 51 F6    MOV   A,[configOutP+1]
    1637: 08       PUSH  A
    1638: 7C 18 D2 LCALL _utoa
    163B: 38 FA    ADD   SP,0xFA
(0498) 		UART_PutString(configOutP);
    163D: 10       PUSH  X
    163E: 62 D0 00 MOV   REG[0xD0],0x0
    1641: 51 F5    MOV   A,[configOutP]
    1643: 08       PUSH  A
    1644: 51 F6    MOV   A,[configOutP+1]
    1646: 5C       MOV   X,A
    1647: 18       POP   A
    1648: 7C 07 A9 LCALL _UART_PutString
(0499) 		UART_PutCRLF();
    164B: 7C 08 21 LCALL _UART_PutCRLF
(0500) 		UART_PutCRLF();
    164E: 7C 08 21 LCALL _UART_PutCRLF
    1651: 20       POP   X
(0501) 		
(0502) 		if (configOut[0] & THF){
    1652: 62 D0 02 MOV   REG[0xD0],0x2
    1655: 51 1C    MOV   A,[configOut]
    1657: 62 D0 02 MOV   REG[0xD0],0x2
    165A: 22 42    AND   A,[THF]
    165C: 62 D0 00 MOV   REG[0xD0],0x0
    165F: 39 00    CMP   A,0x0
    1661: A0 1B    JZ    0x167D
(0503) 		UART_PutCRLF();
    1663: 10       PUSH  X
    1664: 7C 08 21 LCALL _UART_PutCRLF
(0504) 		UART_PutCRLF();
    1667: 7C 08 21 LCALL _UART_PutCRLF
(0505) 		UART_CPutString("Temp High Flag On!");	
    166A: 50 03    MOV   A,0x3
    166C: 08       PUSH  A
    166D: 50 EC    MOV   A,0xEC
    166F: 5C       MOV   X,A
    1670: 18       POP   A
    1671: 7C 08 0F LCALL _UART_CPutString
(0506) 		UART_PutCRLF();
    1674: 7C 08 21 LCALL _UART_PutCRLF
(0507) 		UART_PutCRLF();
    1677: 7C 08 21 LCALL _UART_PutCRLF
    167A: 20       POP   X
(0508) 			
(0509) 		}else if (configOut[0] & TLF){
    167B: 80 38    JMP   0x16B4
    167D: 62 D0 02 MOV   REG[0xD0],0x2
    1680: 51 1C    MOV   A,[configOut]
    1682: 62 D0 02 MOV   REG[0xD0],0x2
    1685: 22 41    AND   A,[TLF]
    1687: 62 D0 00 MOV   REG[0xD0],0x0
    168A: 39 00    CMP   A,0x0
    168C: A0 1B    JZ    0x16A8
(0510) 		UART_PutCRLF();
    168E: 10       PUSH  X
    168F: 7C 08 21 LCALL _UART_PutCRLF
(0511) 		UART_PutCRLF();
    1692: 7C 08 21 LCALL _UART_PutCRLF
(0512) 		UART_CPutString("Temp Low Flag On!");
    1695: 50 03    MOV   A,0x3
    1697: 08       PUSH  A
    1698: 50 DA    MOV   A,0xDA
    169A: 5C       MOV   X,A
    169B: 18       POP   A
    169C: 7C 08 0F LCALL _UART_CPutString
(0513) 		UART_PutCRLF();
    169F: 7C 08 21 LCALL _UART_PutCRLF
(0514) 		UART_PutCRLF();
    16A2: 7C 08 21 LCALL _UART_PutCRLF
    16A5: 20       POP   X
(0515) 		
(0516) 		}else{UART_CPutString("High Low flag fail");}	
    16A6: 80 0D    JMP   0x16B4
    16A8: 10       PUSH  X
    16A9: 50 03    MOV   A,0x3
    16AB: 08       PUSH  A
    16AC: 50 C7    MOV   A,0xC7
    16AE: 5C       MOV   X,A
    16AF: 18       POP   A
    16B0: 7C 08 0F LCALL _UART_CPutString
    16B3: 20       POP   X
    16B4: 7F       RET   
(0517) 
(0518) }	
(0519) void changePOLbit(void){
(0520) 	
(0521) 		I2CHW_bWriteBytes(ThermoStat, &accessConfigReg , 1 ,I2CHW_NoStop);
_changePOLbit:
    16B5: 10       PUSH  X
    16B6: 50 02    MOV   A,0x2
    16B8: 08       PUSH  A
    16B9: 50 01    MOV   A,0x1
    16BB: 08       PUSH  A
    16BC: 50 02    MOV   A,0x2
    16BE: 08       PUSH  A
    16BF: 50 39    MOV   A,0x39
    16C1: 08       PUSH  A
    16C2: 50 48    MOV   A,0x48
    16C4: 08       PUSH  A
    16C5: 7C 0A 4B LCALL _I2CHW_bWriteBytes
    16C8: 38 FB    ADD   SP,0xFB
    16CA: 20       POP   X
(0522)         while(!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
    16CB: 10       PUSH  X
    16CC: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    16CF: 20       POP   X
    16D0: 62 D0 00 MOV   REG[0xD0],0x0
    16D3: 53 F4    MOV   [__r0],A
    16D5: 47 F4 40 TST   [__r0],0x40
    16D8: AF F2    JZ    0x16CB
(0523)         I2CHW_ClrWrStatus();
    16DA: 10       PUSH  X
    16DB: 7C 0D B6 LCALL _I2CHW_ClrWrStatus
(0524) 		
(0525) 		I2CHW_fReadBytes(ThermoStat, configOut2 , 1, I2CHW_RepStart);
    16DE: 50 01    MOV   A,0x1
    16E0: 08       PUSH  A
    16E1: 08       PUSH  A
    16E2: 50 02    MOV   A,0x2
    16E4: 08       PUSH  A
    16E5: 50 1E    MOV   A,0x1E
    16E7: 08       PUSH  A
    16E8: 50 48    MOV   A,0x48
    16EA: 08       PUSH  A
    16EB: 7C 0A 07 LCALL _I2CHW_fReadBytes
    16EE: 38 FB    ADD   SP,0xFB
    16F0: 20       POP   X
(0526)         while(!(I2CHW_bReadI2CStatus() & I2CHW_RD_COMPLETE));
    16F1: 10       PUSH  X
    16F2: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    16F5: 20       POP   X
    16F6: 62 D0 00 MOV   REG[0xD0],0x0
    16F9: 53 F4    MOV   [__r0],A
    16FB: 47 F4 04 TST   [__r0],0x4
    16FE: AF F2    JZ    0x16F1
(0527)         I2CHW_ClrRdStatus();
    1700: 10       PUSH  X
    1701: 7C 0D AF LCALL _I2CHW_ClrRdStatus
(0528) 		
(0529) 		UART_PutCRLF();
    1704: 7C 08 21 LCALL _UART_PutCRLF
(0530) 		UART_PutCRLF();
    1707: 7C 08 21 LCALL _UART_PutCRLF
    170A: 20       POP   X
(0531) //		UART_PutSHexByte(configOut2[0]);
(0532) //		UART_PutCRLF();
(0533) //		UART_PutCRLF();
(0534) 		
(0535) 		
(0536) 		
(0537) 		POLbitFlip[0] = accessConfigReg;
    170B: 62 D0 02 MOV   REG[0xD0],0x2
    170E: 51 39    MOV   A,[accessConfigReg]
    1710: 62 D0 02 MOV   REG[0xD0],0x2
    1713: 53 0A    MOV   [POLbitFlip],A
(0538) 		POLbitFlip[1] = configOut2[0] ^ 0x02;
    1715: 62 D0 02 MOV   REG[0xD0],0x2
    1718: 51 1E    MOV   A,[configOut2]
    171A: 31 02    XOR   A,0x2
    171C: 62 D0 02 MOV   REG[0xD0],0x2
    171F: 53 0B    MOV   [POLbitFlip+1],A
(0539) 	
(0540) 	    I2CHW_bWriteBytes(ThermoStat, POLbitFlip , 2 ,I2CHW_CompleteXfer);
    1721: 10       PUSH  X
    1722: 50 00    MOV   A,0x0
    1724: 08       PUSH  A
    1725: 50 02    MOV   A,0x2
    1727: 08       PUSH  A
    1728: 50 02    MOV   A,0x2
    172A: 08       PUSH  A
    172B: 50 0A    MOV   A,0xA
    172D: 08       PUSH  A
    172E: 50 48    MOV   A,0x48
    1730: 08       PUSH  A
    1731: 7C 0A 4B LCALL _I2CHW_bWriteBytes
    1734: 38 FB    ADD   SP,0xFB
    1736: 20       POP   X
(0541)         while(!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
    1737: 10       PUSH  X
    1738: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    173B: 20       POP   X
    173C: 62 D0 00 MOV   REG[0xD0],0x0
    173F: 53 F4    MOV   [__r0],A
    1741: 47 F4 40 TST   [__r0],0x40
    1744: AF F2    JZ    0x1737
(0542)         I2CHW_ClrWrStatus();
    1746: 10       PUSH  X
    1747: 7C 0D B6 LCALL _I2CHW_ClrWrStatus
    174A: 20       POP   X
    174B: 7F       RET   
(0543) 
(0544) 	
(0545) }	
(0546) void initial(void){
(0547) 
(0548) 		I2CHW_bWriteBytes(ThermoStat, &tempStartConvert , 1 , I2CHW_CompleteXfer);
_initial:
    174C: 10       PUSH  X
    174D: 50 00    MOV   A,0x0
    174F: 08       PUSH  A
    1750: 50 01    MOV   A,0x1
    1752: 08       PUSH  A
    1753: 50 02    MOV   A,0x2
    1755: 08       PUSH  A
    1756: 50 3E    MOV   A,0x3E
    1758: 08       PUSH  A
    1759: 50 48    MOV   A,0x48
    175B: 08       PUSH  A
    175C: 7C 0A 4B LCALL _I2CHW_bWriteBytes
    175F: 38 FB    ADD   SP,0xFB
    1761: 20       POP   X
(0549)         while(!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
    1762: 10       PUSH  X
    1763: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    1766: 20       POP   X
    1767: 62 D0 00 MOV   REG[0xD0],0x0
    176A: 53 F4    MOV   [__r0],A
    176C: 47 F4 40 TST   [__r0],0x40
    176F: AF F2    JZ    0x1762
(0550)         I2CHW_ClrWrStatus();
    1771: 10       PUSH  X
    1772: 7C 0D B6 LCALL _I2CHW_ClrWrStatus
(0551) 
(0552) 		I2CHW_bWriteBytes(ThermoStat, &tempRead , 1 , I2CHW_NoStop);
    1775: 50 02    MOV   A,0x2
    1777: 08       PUSH  A
    1778: 50 01    MOV   A,0x1
    177A: 08       PUSH  A
    177B: 50 02    MOV   A,0x2
    177D: 08       PUSH  A
    177E: 50 40    MOV   A,0x40
    1780: 08       PUSH  A
    1781: 50 48    MOV   A,0x48
    1783: 08       PUSH  A
    1784: 7C 0A 4B LCALL _I2CHW_bWriteBytes
    1787: 38 FB    ADD   SP,0xFB
    1789: 20       POP   X
(0553)         while(!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
    178A: 10       PUSH  X
    178B: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    178E: 20       POP   X
    178F: 62 D0 00 MOV   REG[0xD0],0x0
    1792: 53 F4    MOV   [__r0],A
    1794: 47 F4 40 TST   [__r0],0x40
    1797: AF F2    JZ    0x178A
(0554)         I2CHW_ClrWrStatus();
    1799: 10       PUSH  X
    179A: 7C 0D B6 LCALL _I2CHW_ClrWrStatus
    179D: 20       POP   X
(0555) 		
(0556) 		j = 0;
    179E: 62 D0 02 MOV   REG[0xD0],0x2
    17A1: 55 0F 00 MOV   [j+1],0x0
    17A4: 55 0E 00 MOV   [j],0x0
(0557) 		for(j = 0; j < 5000; j++); 
    17A7: 55 0F 00 MOV   [j+1],0x0
    17AA: 55 0E 00 MOV   [j],0x0
    17AD: 62 D0 02 MOV   REG[0xD0],0x2
    17B0: 76 0F    INC   [j+1]
    17B2: 0E 0E 00 ADC   [j],0x0
    17B5: 51 0F    MOV   A,[j+1]
    17B7: 11 88    SUB   A,0x88
    17B9: 51 0E    MOV   A,[j]
    17BB: 31 80    XOR   A,0x80
    17BD: 19 93    SBB   A,0x93
    17BF: CF ED    JC    0x17AD
(0558) 		
(0559) 		I2CHW_fReadBytes(ThermoStat, currentTempA , 2, I2CHW_RepStart);
    17C1: 10       PUSH  X
    17C2: 50 01    MOV   A,0x1
    17C4: 08       PUSH  A
    17C5: 50 02    MOV   A,0x2
    17C7: 08       PUSH  A
    17C8: 50 02    MOV   A,0x2
    17CA: 08       PUSH  A
    17CB: 50 24    MOV   A,0x24
    17CD: 08       PUSH  A
    17CE: 50 48    MOV   A,0x48
    17D0: 08       PUSH  A
    17D1: 7C 0A 07 LCALL _I2CHW_fReadBytes
    17D4: 38 FB    ADD   SP,0xFB
    17D6: 20       POP   X
(0560)         while(!(I2CHW_bReadI2CStatus() & I2CHW_RD_COMPLETE));
    17D7: 10       PUSH  X
    17D8: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    17DB: 20       POP   X
    17DC: 62 D0 00 MOV   REG[0xD0],0x0
    17DF: 53 F4    MOV   [__r0],A
    17E1: 47 F4 04 TST   [__r0],0x4
    17E4: AF F2    JZ    0x17D7
(0561)         I2CHW_ClrRdStatus();
    17E6: 10       PUSH  X
    17E7: 7C 0D AF LCALL _I2CHW_ClrRdStatus
(0562) 		
(0563) 		
(0564) 		I2CHW_bWriteBytes(ThermoStat, &accessConfigReg , 1 ,I2CHW_NoStop);
    17EA: 50 02    MOV   A,0x2
    17EC: 08       PUSH  A
    17ED: 50 01    MOV   A,0x1
    17EF: 08       PUSH  A
    17F0: 50 02    MOV   A,0x2
    17F2: 08       PUSH  A
    17F3: 50 39    MOV   A,0x39
    17F5: 08       PUSH  A
    17F6: 50 48    MOV   A,0x48
    17F8: 08       PUSH  A
    17F9: 7C 0A 4B LCALL _I2CHW_bWriteBytes
    17FC: 38 FB    ADD   SP,0xFB
    17FE: 20       POP   X
(0565)         while(!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
    17FF: 10       PUSH  X
    1800: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    1803: 20       POP   X
    1804: 62 D0 00 MOV   REG[0xD0],0x0
    1807: 53 F4    MOV   [__r0],A
    1809: 47 F4 40 TST   [__r0],0x40
    180C: AF F2    JZ    0x17FF
(0566)         I2CHW_ClrWrStatus();
    180E: 10       PUSH  X
    180F: 7C 0D B6 LCALL _I2CHW_ClrWrStatus
(0567) 		
(0568) 		I2CHW_fReadBytes(ThermoStat, configOut , 1, I2CHW_RepStart);
    1812: 50 01    MOV   A,0x1
    1814: 08       PUSH  A
    1815: 08       PUSH  A
    1816: 50 02    MOV   A,0x2
    1818: 08       PUSH  A
    1819: 50 1C    MOV   A,0x1C
    181B: 08       PUSH  A
    181C: 50 48    MOV   A,0x48
    181E: 08       PUSH  A
    181F: 7C 0A 07 LCALL _I2CHW_fReadBytes
    1822: 38 FB    ADD   SP,0xFB
    1824: 20       POP   X
(0569)         while(!(I2CHW_bReadI2CStatus() & I2CHW_RD_COMPLETE));
    1825: 10       PUSH  X
    1826: 7C 0D A9 LCALL _I2CHW_bReadI2CStatus
    1829: 20       POP   X
    182A: 62 D0 00 MOV   REG[0xD0],0x0
    182D: 53 F4    MOV   [__r0],A
    182F: 47 F4 04 TST   [__r0],0x4
    1832: AF F2    JZ    0x1825
(0570)         I2CHW_ClrRdStatus();
    1834: 10       PUSH  X
    1835: 7C 0D AF LCALL _I2CHW_ClrRdStatus
    1838: 20       POP   X
(0571) 		
(0572) 		j = 0;
    1839: 62 D0 02 MOV   REG[0xD0],0x2
    183C: 55 0F 00 MOV   [j+1],0x0
    183F: 55 0E 00 MOV   [j],0x0
(0573) 		for(j = 0; j < 5000; j++); 
    1842: 55 0F 00 MOV   [j+1],0x0
    1845: 55 0E 00 MOV   [j],0x0
    1848: 62 D0 02 MOV   REG[0xD0],0x2
    184B: 76 0F    INC   [j+1]
    184D: 0E 0E 00 ADC   [j],0x0
    1850: 51 0F    MOV   A,[j+1]
(0574) 
(0575) }	    1852: 11 88    SUB   A,0x88
    1854: 51 0E    MOV   A,[j]
    1856: 31 80    XOR   A,0x80
    1858: 19 93    SBB   A,0x93
    185A: CF ED    JC    0x1848
    185C: 7F       RET   
_utoa:
    18D2: 10       PUSH  X
    18D3: 4F       MOV   X,SP
    18D4: 38 07    ADD   SP,0x7
    18D6: 52 FC    MOV   A,[X-4]
    18D8: 54 01    MOV   [X+1],A
    18DA: 52 FB    MOV   A,[X-5]
    18DC: 54 00    MOV   [X+0],A
    18DE: 62 D0 00 MOV   REG[0xD0],0x0
    18E1: 52 F7    MOV   A,[X-9]
    18E3: 08       PUSH  A
    18E4: 52 F8    MOV   A,[X-8]
    18E6: 08       PUSH  A
    18E7: 52 F9    MOV   A,[X-7]
    18E9: 08       PUSH  A
    18EA: 52 FA    MOV   A,[X-6]
    18EC: 08       PUSH  A
    18ED: 7C 18 5D LCALL 0x185D
    18F0: 38 FE    ADD   SP,0xFE
    18F2: 18       POP   A
    18F3: 53 F3    MOV   [__r1],A
    18F5: 18       POP   A
    18F6: 53 F4    MOV   [__r0],A
    18F8: 51 F3    MOV   A,[__r1]
    18FA: 54 06    MOV   [X+6],A
    18FC: 51 F4    MOV   A,[__r0]
    18FE: 54 05    MOV   [X+5],A
    1900: 50 09    MOV   A,0x9
    1902: 13 06    SUB   A,[X+6]
    1904: 52 05    MOV   A,[X+5]
    1906: 31 80    XOR   A,0x80
    1908: 53 F0    MOV   [__rX],A
    190A: 50 80    MOV   A,0x80
    190C: 1A F0    SBB   A,[__rX]
    190E: C0 28    JC    0x1937
    1910: 62 D0 00 MOV   REG[0xD0],0x0
    1913: 52 01    MOV   A,[X+1]
    1915: 53 F3    MOV   [__r1],A
    1917: 52 00    MOV   A,[X+0]
    1919: 53 F4    MOV   [__r0],A
    191B: 51 F3    MOV   A,[__r1]
    191D: 01 01    ADD   A,0x1
    191F: 54 01    MOV   [X+1],A
    1921: 51 F4    MOV   A,[__r0]
    1923: 09 00    ADC   A,0x0
    1925: 54 00    MOV   [X+0],A
    1927: 52 06    MOV   A,[X+6]
    1929: 01 30    ADD   A,0x30
    192B: 53 F2    MOV   [__r2],A
    192D: 51 F4    MOV   A,[__r0]
    192F: 60 D5    MOV   REG[0xD5],A
    1931: 51 F2    MOV   A,[__r2]
    1933: 3F F3    MVI   [__r1],A
    1935: 80 26    JMP   0x195C
    1937: 62 D0 00 MOV   REG[0xD0],0x0
    193A: 52 01    MOV   A,[X+1]
    193C: 53 F3    MOV   [__r1],A
    193E: 52 00    MOV   A,[X+0]
    1940: 53 F4    MOV   [__r0],A
    1942: 51 F3    MOV   A,[__r1]
    1944: 01 01    ADD   A,0x1
    1946: 54 01    MOV   [X+1],A
    1948: 51 F4    MOV   A,[__r0]
    194A: 09 00    ADC   A,0x0
    194C: 54 00    MOV   [X+0],A
    194E: 52 06    MOV   A,[X+6]
    1950: 01 57    ADD   A,0x57
    1952: 53 F2    MOV   [__r2],A
    1954: 51 F4    MOV   A,[__r0]
    1956: 60 D5    MOV   REG[0xD5],A
    1958: 51 F2    MOV   A,[__r2]
    195A: 3F F3    MVI   [__r1],A
    195C: 52 F7    MOV   A,[X-9]
    195E: 08       PUSH  A
    195F: 52 F8    MOV   A,[X-8]
    1961: 08       PUSH  A
    1962: 52 F9    MOV   A,[X-7]
    1964: 08       PUSH  A
    1965: 52 FA    MOV   A,[X-6]
    1967: 08       PUSH  A
    1968: 62 D0 00 MOV   REG[0xD0],0x0
    196B: 7C 18 5D LCALL 0x185D
    196E: 18       POP   A
    196F: 54 FA    MOV   [X-6],A
    1971: 18       POP   A
    1972: 54 F9    MOV   [X-7],A
    1974: 38 FE    ADD   SP,0xFE
    1976: 3D F9 00 CMP   [X-7],0x0
    1979: BF 64    JNZ   0x18DE
    197B: 3D FA 00 CMP   [X-6],0x0
    197E: BF 5F    JNZ   0x18DE
    1980: 62 D0 00 MOV   REG[0xD0],0x0
    1983: 52 01    MOV   A,[X+1]
    1985: 53 F3    MOV   [__r1],A
    1987: 52 00    MOV   A,[X+0]
    1989: 53 F4    MOV   [__r0],A
    198B: 51 F3    MOV   A,[__r1]
    198D: 01 FF    ADD   A,0xFF
    198F: 54 01    MOV   [X+1],A
    1991: 51 F4    MOV   A,[__r0]
    1993: 09 FF    ADC   A,0xFF
    1995: 54 00    MOV   [X+0],A
    1997: 51 F4    MOV   A,[__r0]
    1999: 60 D5    MOV   REG[0xD5],A
    199B: 50 00    MOV   A,0x0
    199D: 3F F3    MVI   [__r1],A
    199F: 52 FC    MOV   A,[X-4]
    19A1: 54 03    MOV   [X+3],A
    19A3: 52 FB    MOV   A,[X-5]
    19A5: 54 02    MOV   [X+2],A
    19A7: 80 54    JMP   0x19FC
    19A9: 62 D0 00 MOV   REG[0xD0],0x0
    19AC: 52 03    MOV   A,[X+3]
    19AE: 53 F3    MOV   [__r1],A
    19B0: 52 02    MOV   A,[X+2]
    19B2: 60 D4    MOV   REG[0xD4],A
    19B4: 3E F3    MVI   A,[__r1]
    19B6: 54 04    MOV   [X+4],A
    19B8: 52 03    MOV   A,[X+3]
    19BA: 53 F3    MOV   [__r1],A
    19BC: 52 02    MOV   A,[X+2]
    19BE: 53 F4    MOV   [__r0],A
    19C0: 51 F3    MOV   A,[__r1]
    19C2: 01 01    ADD   A,0x1
    19C4: 54 03    MOV   [X+3],A
    19C6: 51 F4    MOV   A,[__r0]
    19C8: 09 00    ADC   A,0x0
    19CA: 54 02    MOV   [X+2],A
    19CC: 52 01    MOV   A,[X+1]
    19CE: 53 F1    MOV   [__r3],A
    19D0: 52 00    MOV   A,[X+0]
    19D2: 60 D4    MOV   REG[0xD4],A
    19D4: 3E F1    MVI   A,[__r3]
    19D6: 53 F2    MOV   [__r2],A
    19D8: 51 F4    MOV   A,[__r0]
    19DA: 60 D5    MOV   REG[0xD5],A
    19DC: 51 F2    MOV   A,[__r2]
    19DE: 3F F3    MVI   [__r1],A
    19E0: 52 01    MOV   A,[X+1]
    19E2: 53 F3    MOV   [__r1],A
    19E4: 52 00    MOV   A,[X+0]
    19E6: 53 F4    MOV   [__r0],A
    19E8: 51 F3    MOV   A,[__r1]
    19EA: 01 FF    ADD   A,0xFF
    19EC: 54 01    MOV   [X+1],A
    19EE: 51 F4    MOV   A,[__r0]
    19F0: 09 FF    ADC   A,0xFF
    19F2: 54 00    MOV   [X+0],A
    19F4: 51 F4    MOV   A,[__r0]
    19F6: 60 D5    MOV   REG[0xD5],A
    19F8: 52 04    MOV   A,[X+4]
    19FA: 3F F3    MVI   [__r1],A
    19FC: 52 03    MOV   A,[X+3]
    19FE: 13 01    SUB   A,[X+1]
    1A00: 52 02    MOV   A,[X+2]
    1A02: 1B 00    SBB   A,[X+0]
    1A04: CF A4    JC    0x19A9
    1A06: 62 D0 00 MOV   REG[0xD0],0x0
    1A09: 52 FC    MOV   A,[X-4]
    1A0B: 53 F3    MOV   [__r1],A
    1A0D: 52 FB    MOV   A,[X-5]
    1A0F: 53 F4    MOV   [__r0],A
    1A11: 38 F9    ADD   SP,0xF9
    1A13: 20       POP   X
    1A14: 7F       RET   
