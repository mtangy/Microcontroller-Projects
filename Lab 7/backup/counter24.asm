;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME: Counter24.asm
;;   Version: 2.5, Updated on 2014/7/14 at 8:8:54
;;  Generated by PSoC Designer 5.4.2946
;;
;;  DESCRIPTION: Counter24 User Module software implementation file
;;
;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
;;        arguments and observe the associated "Registers are volatile" policy.
;;        This means it is the caller's responsibility to preserve any values
;;        in the X and A registers that are still needed after the API functions
;;        returns. For Large Memory Model devices it is also the caller's 
;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
;;        MVW_PP registers. Even though some of these registers may not be modified
;;        now, there is no guarantee that will remain the case in future releases.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "m8c.inc"
include "memory.inc"
include "Counter24.inc"

;-----------------------------------------------
;  Global Symbols
;-----------------------------------------------
export  Counter24_EnableInt
export _Counter24_EnableInt
export  Counter24_DisableInt
export _Counter24_DisableInt
export  Counter24_Start
export _Counter24_Start
export  Counter24_Stop
export _Counter24_Stop
export  Counter24_WritePeriod
export _Counter24_WritePeriod
export  Counter24_WriteCompareValue
export _Counter24_WriteCompareValue
export  Counter24_ReadCompareValue
export _Counter24_ReadCompareValue
export  Counter24_ReadCounter
export _Counter24_ReadCounter

;-----------------------------------------------
;  Constant Definitions
;-----------------------------------------------
INPUT_REG_NULL:                equ 0x00    ; Clear the input register


AREA UserModules (ROM, REL)

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: Counter24_EnableInt
;
;  DESCRIPTION:
;     Enables this counter's interrupt by setting the interrupt enable mask bit
;     associated with this User Module. This function has no effect until and
;     unless the global interrupts are enabled (for example by using the
;     macro M8C_EnableGInt).
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    None.
;  RETURNS:      Nothing.
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 Counter24_EnableInt:
_Counter24_EnableInt:
   RAM_PROLOGUE RAM_USE_CLASS_1
   Counter24_EnableInt_M
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret


.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: Counter24_DisableInt
;
;  DESCRIPTION:
;     Disables this counter's interrupt by clearing the interrupt enable
;     mask bit associated with this User Module.
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    None
;  RETURNS:      Nothing
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 Counter24_DisableInt:
_Counter24_DisableInt:
   RAM_PROLOGUE RAM_USE_CLASS_1
   Counter24_DisableInt_M
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret


.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: Counter24_Start
;
;  DESCRIPTION:
;     Sets the start bit in the Control register of this user module.  The
;     counter will begin counting on the next input clock as soon as the
;     enable input is asserted high.
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    None
;  RETURNS:      Nothing
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 Counter24_Start:
_Counter24_Start:
   RAM_PROLOGUE RAM_USE_CLASS_1
   Counter24_Start_M
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret


.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: Counter24_Stop
;
;  DESCRIPTION:
;     Disables counter operation by clearing the start bit in the Control
;     register of the LSB block.
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    None
;  RETURNS:      Nothing
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 Counter24_Stop:
_Counter24_Stop:
   RAM_PROLOGUE RAM_USE_CLASS_1
   Counter24_Stop_M
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret


.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: Counter24_WritePeriod
;
;  DESCRIPTION:
;     Write the 24-bit period value into the Period register (DR1).
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: fastcall16 DWORD dwPeriodValue (placed on stack)
;  RETURNS:   Nothing
;  SIDE EFFECTS:
;    If the counter user module is stopped, then this value will also be
;    latched into the Count registers (DR0).
;
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
_Counter24_WritePeriod:
 Counter24_WritePeriod:
   RAM_PROLOGUE RAM_USE_CLASS_2
   mov   X, SP                                      ; Set X to point to stack frame
   mov   A, [X-5]                                   ; load the period registers
   mov   reg[Counter24_PERIOD_MSB_REG], A
   mov   A, [X-4]
   mov   reg[Counter24_PERIOD_ISB_REG], A
   mov   A, [X-3]
   mov   reg[Counter24_PERIOD_LSB_REG], A
   RAM_EPILOGUE RAM_USE_CLASS_2
   ret


.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: Counter24_WriteCompareValue
;
;  DESCRIPTION:
;     Writes compare value into the Compare register (DR2).
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    fastcall16 DWORD dwCompareValue (placed on stack)
;  RETURNS:      Nothing
;  SIDE EFFECTS: 
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
_Counter24_WriteCompareValue:
 Counter24_WriteCompareValue:
   RAM_PROLOGUE RAM_USE_CLASS_2
   mov   X, SP                                      ; Set X to point to stack frame
   mov   A, [X-5]                                   ; load the compare registers
   mov   reg[Counter24_COMPARE_MSB_REG], A
   mov   A, [X-4]
   mov   reg[Counter24_COMPARE_ISB_REG], A
   mov   A, [X-3]
   mov   reg[Counter24_COMPARE_LSB_REG], A
   RAM_EPILOGUE RAM_USE_CLASS_2
   ret


.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: Counter24_ReadCompareValue
;
;  DESCRIPTION:
;     Reads the Compare registers.
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: fastcall16 DWORD * pdwCompareValue
;             (pointer: LSB in X, MSB in A is RAM Page (or N/A in the SMM ))
;  RETURNS:   Nothing (but see Side Effects).
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          IDX_PP
;     
;    The DWORD pointed to by X takes on the value read from DR2
;
 Counter24_ReadCompareValue:
_Counter24_ReadCompareValue:
   RAM_PROLOGUE RAM_USE_CLASS_3
   RAM_SETPAGE_IDX A                             ; Set the variable page
   mov   [X], 0
   mov   A, reg[Counter24_COMPARE_MSB_REG]
   mov   [X+1], A
   mov   A, reg[Counter24_COMPARE_ISB_REG]
   mov   [X+2], A
   mov   A, reg[Counter24_COMPARE_LSB_REG]
   mov   [X+3], A
   RAM_EPILOGUE RAM_USE_CLASS_3
   ret


.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: Counter24_ReadCounter
;
;  DESCRIPTION:
;     Returns the value in the Count register (DR0), preserving the value in
;     the compare register (DR2). Interrupts are prevented during the transfer
;     from the Count to the Compare registers by holding the clock low in
;     the MSB PSoC block.
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: fastcall16 DWORD * pdwCount
;             (pointer: LSB in X, MSB in A is RAM Page (or N/A in the SMM ))
;  RETURNS:   Nothing (but see Side Effects).
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          IDX_PP
;
;    The DWORD pointed to by X takes on the value read from DR0
;    If the user module is running, it is stopped momentarily and one or more counts
;    may be missed.
;
;
 Counter24_ReadCounter:
_Counter24_ReadCounter:
   RAM_PROLOGUE RAM_USE_CLASS_3
   RAM_SETPAGE_IDX A                             ; Set the variable page
   mov   A, reg[Counter24_CONTROL_LSB_REG]       ; Save CR0 (running or stopped state)
   push  A                                          ;
   mov   A, reg[Counter24_COMPARE_MSB_REG]       ; Save the current value of
   push  A                                          ;   the comparare register
   mov   A, reg[Counter24_COMPARE_ISB_REG]       ;   on the stack...
   push  A                                          ;
   mov   A, reg[Counter24_COMPARE_LSB_REG]       ;
   push  A                                          ;   (stack frame now 4 bytes)
   Counter24_Stop_M                              ; Disable (stop) the Counter, if running
   M8C_SetBank1                                     ;
   mov   A, reg[Counter24_INPUT_MSB_REG]         ; save the MSB clock setting on
   push  A                                          ;   the stack (now 5 bytes) and
                                                    ;   hold (only!) its clock low:
   mov   reg[Counter24_INPUT_MSB_REG], INPUT_REG_NULL
   M8C_SetBank0                                     ; 32-bit Result <- 24-bit Count
   mov   [X+0], 0                                   ;   upper 8 bits always zero
   mov   A, reg[Counter24_COUNTER_MSB_REG]       ;   DR2 <- DR0 (in the MSB block)
   mov   A, reg[Counter24_COMPARE_MSB_REG]       ;   Retrieve the Count MSB and...
   mov   [X+1], A                                   ;     update the result
   mov   A, reg[Counter24_COUNTER_ISB_REG]       ;   etc, for ISB
   mov   A, reg[Counter24_COMPARE_ISB_REG]       ;
   mov   [X+2], A                                   ;
   mov   A, reg[Counter24_COUNTER_LSB_REG]       ;   etc, for LSB
   mov   A, reg[Counter24_COMPARE_LSB_REG]       ;
   mov   [X+3], A                                   ;
   pop   X                                          ; Hold Input reg in X temporarily
   pop   A                                          ; Restore the 24-bit Compare
   mov   reg[Counter24_COMPARE_LSB_REG], A       ;   register...
   pop   A                                          ;
   mov   reg[Counter24_COMPARE_ISB_REG], A       ;
   pop   A                                          ;
   mov   reg[Counter24_COMPARE_MSB_REG], A       ;
   M8C_SetBank1                                     ; Restore the counter operation:
   mov   A, X                                       ;   Grab the clock setting...
   mov   reg[Counter24_INPUT_MSB_REG], A         ;     and restore it
   M8C_SetBank0                                     ;   Re-enable (start) the counter...
   pop   A                                          ;     if it was running when
   mov   reg[Counter24_CONTROL_LSB_REG], A       ;     this function was first called
   RAM_EPILOGUE RAM_USE_CLASS_3                     ; Post function paging environment restore
   ret

.ENDSECTION

; End of File Counter24.asm
