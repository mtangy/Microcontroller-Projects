FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 0A 2D LJMP  _PWMPiano2_ISR     (0153)     ljmp	_PWMPiano2_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 09 D0 LJMP  _PWMPiano3_ISR     (0161)     ljmp	_PWMPiano3_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
0030: 7D 28 A4 LJMP  _PS2DigBuf_ISR     (0165)     ljmp	_PS2DigBuf_ISR
0033: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0034: 7D 2D 63 LJMP  _PS2OneShot_ISR    (0169)     ljmp	_PS2OneShot_ISR
0037: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
003C: 7D 2D 8C LJMP  _TenMicroSecTimer_ISR(0177)     ljmp	_TenMicroSecTimer_ISR
003F: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
0040: 7D 0A E7 LJMP  _PWM8LED_ISR       (0181)     ljmp	_PWM8LED_ISR
0043: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
004C: 7D 0A 8A LJMP  _PWMPiano1_ISR     (0193)     ljmp	_PWMPiano1_ISR
004F: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
0054: 7D 07 BF LJMP  _UARTClock_ISR     (0201)     ljmp	_UARTClock_ISR
0057: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
0058: 7D 07 BD LJMP  _UART_TX_ISR       (0205)     ljmp	_UART_TX_ISR
005B: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
005C: 7D 07 BE LJMP  _UART_RX_ISR       (0209)     ljmp	_UART_RX_ISR
005F: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [ps2.c:XXXForceBadTxParity+125],0x0(0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [ps2.c:XXXForceBadTxParity+126],0x0(0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 07 4F LCALL 0x074F             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 06    MOV   A,0x6              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 1A    MOV   X,0x1A             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 22    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 22    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 22    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 21    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 22    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 22 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 21    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 21    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 22    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 22 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 21    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0133: 62 E0 03 MOV   REG[0xE0],0x3      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013E: 7C 1C 62 LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0141: 8F FF    JMP   0x0141             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0143: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0145: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
064A: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_ps2bitbang_Bank1
                                        (0019) export LoadConfigTBL_ps2bitbang_Bank0
                                        (0020) export LoadConfigTBL_ps2bitbang_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_ps2bitbang_Bank0:
                                        (0023) ;  Instance name LCD, User Module LCD
                                        (0024) ;  Instance name PORT1SHADOWREG, User Module SHADOWREGS
                                        (0025) ;  Instance name PS2DigBuf, User Module DigBuf
                                        (0026) ;       Instance name PS2DigBuf, Block Name DigBuf(DBB10)
                                        (0027) 	db		33h, 03h		;PS2DigBuf_CONTROL_REG(DBB10CR0)
                                        (0028) 	db		31h, 00h		;PS2DigBuf_DATA_1_REG(DBB10DR1)
                                        (0029) 	db		32h, 00h		;PS2DigBuf_DATA_2_REG(DBB10DR2)
                                        (0030) ;  Instance name PS2OneShot, User Module OneShot
                                        (0031) ;       Instance name PS2OneShot, Block Name OneShot8(DBB11)
                                        (0032) 	db		37h, 00h		;PS2OneShot_CONTROL_REG(DBB11CR0)
                                        (0033) 	db		35h, 00h		;PS2OneShot_POLY_REG   (DBB11DR1)
                                        (0034) 	db		36h, 00h		;PS2OneShot_SEED_REG   (DBB11DR2)
                                        (0035) ;  Instance name PWM8LED, User Module PWM8
                                        (0036) ;       Instance name PWM8LED, Block Name PWM8(DBB20)
                                        (0037) 	db		43h, 00h		;PWM8LED_CONTROL_REG(DBB20CR0)
                                        (0038) 	db		41h, ffh		;PWM8LED_PERIOD_REG(DBB20DR1)
                                        (0039) 	db		42h, 7fh		;PWM8LED_COMPARE_REG(DBB20DR2)
                                        (0040) ;  Instance name PWMPiano1, User Module PWM16
                                        (0041) ;       Instance name PWMPiano1, Block Name PWM16_LSB(DCB22)
                                        (0042) 	db		4bh, 00h		;PWMPiano1_CONTROL_LSB_REG(DCB22CR0)
                                        (0043) 	db		49h, 00h		;PWMPiano1_PERIOD_LSB_REG(DCB22DR1)
                                        (0044) 	db		4ah, 00h		;PWMPiano1_COMPARE_LSB_REG(DCB22DR2)
                                        (0045) ;       Instance name PWMPiano1, Block Name PWM16_MSB(DCB23)
                                        (0046) 	db		4fh, 00h		;PWMPiano1_CONTROL_MSB_REG(DCB23CR0)
                                        (0047) 	db		4dh, 00h		;PWMPiano1_PERIOD_MSB_REG(DCB23DR1)
                                        (0048) 	db		4eh, 00h		;PWMPiano1_COMPARE_MSB_REG(DCB23DR2)
                                        (0049) ;  Instance name PWMPiano2, User Module PWM16
                                        (0050) ;       Instance name PWMPiano2, Block Name PWM16_LSB(DBB00)
                                        (0051) 	db		23h, 00h		;PWMPiano2_CONTROL_LSB_REG(DBB00CR0)
                                        (0052) 	db		21h, 00h		;PWMPiano2_PERIOD_LSB_REG(DBB00DR1)
                                        (0053) 	db		22h, 00h		;PWMPiano2_COMPARE_LSB_REG(DBB00DR2)
                                        (0054) ;       Instance name PWMPiano2, Block Name PWM16_MSB(DBB01)
                                        (0055) 	db		27h, 00h		;PWMPiano2_CONTROL_MSB_REG(DBB01CR0)
                                        (0056) 	db		25h, 00h		;PWMPiano2_PERIOD_MSB_REG(DBB01DR1)
                                        (0057) 	db		26h, 00h		;PWMPiano2_COMPARE_MSB_REG(DBB01DR2)
                                        (0058) ;  Instance name PWMPiano3, User Module PWM16
                                        (0059) ;       Instance name PWMPiano3, Block Name PWM16_LSB(DCB02)
                                        (0060) 	db		2bh, 00h		;PWMPiano3_CONTROL_LSB_REG(DCB02CR0)
                                        (0061) 	db		29h, 00h		;PWMPiano3_PERIOD_LSB_REG(DCB02DR1)
                                        (0062) 	db		2ah, 00h		;PWMPiano3_COMPARE_LSB_REG(DCB02DR2)
                                        (0063) ;       Instance name PWMPiano3, Block Name PWM16_MSB(DCB03)
                                        (0064) 	db		2fh, 00h		;PWMPiano3_CONTROL_MSB_REG(DCB03CR0)
                                        (0065) 	db		2dh, 00h		;PWMPiano3_PERIOD_MSB_REG(DCB03DR1)
                                        (0066) 	db		2eh, 00h		;PWMPiano3_COMPARE_MSB_REG(DCB03DR2)
                                        (0067) ;  Instance name TenMicroSecTimer, User Module Timer16
                                        (0068) ;       Instance name TenMicroSecTimer, Block Name TIMER16_LSB(DCB12)
                                        (0069) 	db		3bh, 00h		;TenMicroSecTimer_CONTROL_LSB_REG(DCB12CR0)
                                        (0070) 	db		39h, 00h		;TenMicroSecTimer_PERIOD_LSB_REG(DCB12DR1)
                                        (0071) 	db		3ah, 00h		;TenMicroSecTimer_COMPARE_LSB_REG(DCB12DR2)
                                        (0072) ;       Instance name TenMicroSecTimer, Block Name TIMER16_MSB(DCB13)
                                        (0073) 	db		3fh, 04h		;TenMicroSecTimer_CONTROL_MSB_REG(DCB13CR0)
                                        (0074) 	db		3dh, 00h		;TenMicroSecTimer_PERIOD_MSB_REG(DCB13DR1)
                                        (0075) 	db		3eh, 00h		;TenMicroSecTimer_COMPARE_MSB_REG(DCB13DR2)
                                        (0076) ;  Instance name UART, User Module UART
                                        (0077) ;       Instance name UART, Block Name RX(DCB33)
                                        (0078) 	db		5fh, 00h		;UART_RX_CONTROL_REG(DCB33CR0)
                                        (0079) 	db		5dh, 00h		;UART_(DCB33DR1)
                                        (0080) 	db		5eh, 00h		;UART_RX_BUFFER_REG (DCB33DR2)
                                        (0081) ;       Instance name UART, Block Name TX(DCB32)
                                        (0082) 	db		5bh, 00h		;UART_TX_CONTROL_REG(DCB32CR0)
                                        (0083) 	db		59h, 00h		;UART_TX_BUFFER_REG (DCB32DR1)
                                        (0084) 	db		5ah, 00h		;UART_(DCB32DR2)
                                        (0085) ;  Instance name UARTClock, User Module Counter16
                                        (0086) ;       Instance name UARTClock, Block Name CNTR16_LSB(DBB30)
                                        (0087) 	db		53h, 00h		;UARTClock_CONTROL_LSB_REG(DBB30CR0)
                                        (0088) 	db		51h, 33h		;UARTClock_PERIOD_LSB_REG(DBB30DR1)
                                        (0089) 	db		52h, 19h		;UARTClock_COMPARE_LSB_REG(DBB30DR2)
                                        (0090) ;       Instance name UARTClock, Block Name CNTR16_MSB(DBB31)
                                        (0091) 	db		57h, 00h		;UARTClock_CONTROL_MSB_REG(DBB31CR0)
                                        (0092) 	db		55h, 00h		;UARTClock_PERIOD_MSB_REG(DBB31DR1)
                                        (0093) 	db		56h, 00h		;UARTClock_COMPARE_MSB_REG(DBB31DR2)
                                        (0094) ;  Global Register values Bank 0
                                        (0095) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0096) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0097) 	db		63h, 57h		; AnalogReferenceControl register (ARF_CR)
                                        (0098) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0099) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0100) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0101) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0102) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0103) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0104) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0105) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0106) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0107) 	db		b5h, 10h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0108) 	db		b6h, 01h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0109) 	db		b8h, 65h		; Row_1_InputMux register (RDI1RI)
                                        (0110) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0111) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0112) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0113) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0114) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0115) 	db		beh, 80h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0116) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0117) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0118) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0119) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0120) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0121) 	db		c5h, 41h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0122) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0123) 	db		c8h, 75h		; Row_3_InputMux register (RDI3RI)
                                        (0124) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0125) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0126) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0127) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0128) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0129) 	db		ceh, 20h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0130) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0131) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0132) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0133) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0134) 	db		ffh
                                        (0135) LoadConfigTBL_ps2bitbang_Bank1:
                                        (0136) ;  Instance name LCD, User Module LCD
                                        (0137) ;  Instance name PORT1SHADOWREG, User Module SHADOWREGS
                                        (0138) ;  Instance name PS2DigBuf, User Module DigBuf
                                        (0139) ;       Instance name PS2DigBuf, Block Name DigBuf(DBB10)
                                        (0140) 	db		30h, a2h		;PS2DigBuf_FUNC_REG(DBB10FN)
                                        (0141) 	db		31h, e0h		;PS2DigBuf_INPUT_REG(DBB10IN)
                                        (0142) 	db		32h, 40h		;PS2DigBuf_OUTPUT_REG(DBB10OU)
                                        (0143) ;  Instance name PS2OneShot, User Module OneShot
                                        (0144) ;       Instance name PS2OneShot, Block Name OneShot8(DBB11)
                                        (0145) 	db		34h, 22h		;PS2OneShot_FUNC_REG   (DBB11FN)
                                        (0146) 	db		35h, e1h		;PS2OneShot_INPUT_REG  (DBB11IN)
                                        (0147) 	db		36h, 40h		;PS2OneShot_OUTPUT_REG (DBB11OU)
                                        (0148) ;  Instance name PWM8LED, User Module PWM8
                                        (0149) ;       Instance name PWM8LED, Block Name PWM8(DBB20)
                                        (0150) 	db		40h, 21h		;PWM8LED_FUNC_REG(DBB20FN)
                                        (0151) 	db		41h, 11h		;PWM8LED_INPUT_REG(DBA20IN)
                                        (0152) 	db		42h, 45h		;PWM8LED_OUTPUT_REG(DBA20OU)
                                        (0153) ;  Instance name PWMPiano1, User Module PWM16
                                        (0154) ;       Instance name PWMPiano1, Block Name PWM16_LSB(DCB22)
                                        (0155) 	db		48h, 01h		;PWMPiano1_FUNC_LSB_REG(DCB22FN)
                                        (0156) 	db		49h, 15h		;PWMPiano1_INPUT_LSB_REG(DCB22IN)
                                        (0157) 	db		4ah, 40h		;PWMPiano1_OUTPUT_LSB_REG(DCB22OU)
                                        (0158) ;       Instance name PWMPiano1, Block Name PWM16_MSB(DCB23)
                                        (0159) 	db		4ch, 21h		;PWMPiano1_FUNC_MSB_REG(DCB23FN)
                                        (0160) 	db		4dh, 35h		;PWMPiano1_INPUT_MSB_REG(DCB23IN)
                                        (0161) 	db		4eh, 44h		;PWMPiano1_OUTPUT_MSB_REG(DCB23OU)
                                        (0162) ;  Instance name PWMPiano2, User Module PWM16
                                        (0163) ;       Instance name PWMPiano2, Block Name PWM16_LSB(DBB00)
                                        (0164) 	db		20h, 01h		;PWMPiano2_FUNC_LSB_REG(DBB00FN)
                                        (0165) 	db		21h, 15h		;PWMPiano2_INPUT_LSB_REG(DBB00IN)
                                        (0166) 	db		22h, 40h		;PWMPiano2_OUTPUT_LSB_REG(DBB00OU)
                                        (0167) ;       Instance name PWMPiano2, Block Name PWM16_MSB(DBB01)
                                        (0168) 	db		24h, 21h		;PWMPiano2_FUNC_MSB_REG(DBB01FN)
                                        (0169) 	db		25h, 35h		;PWMPiano2_INPUT_MSB_REG(DBB01IN)
                                        (0170) 	db		26h, 45h		;PWMPiano2_OUTPUT_MSB_REG(DBB01OU)
                                        (0171) ;  Instance name PWMPiano3, User Module PWM16
                                        (0172) ;       Instance name PWMPiano3, Block Name PWM16_LSB(DCB02)
                                        (0173) 	db		28h, 01h		;PWMPiano3_FUNC_LSB_REG(DCB02FN)
                                        (0174) 	db		29h, 15h		;PWMPiano3_INPUT_LSB_REG(DCB02IN)
                                        (0175) 	db		2ah, 40h		;PWMPiano3_OUTPUT_LSB_REG(DCB02OU)
                                        (0176) ;       Instance name PWMPiano3, Block Name PWM16_MSB(DCB03)
                                        (0177) 	db		2ch, 21h		;PWMPiano3_FUNC_MSB_REG(DCB03FN)
                                        (0178) 	db		2dh, 35h		;PWMPiano3_INPUT_MSB_REG(DCB03IN)
                                        (0179) 	db		2eh, 46h		;PWMPiano3_OUTPUT_MSB_REG(DCB03OU)
                                        (0180) ;  Instance name TenMicroSecTimer, User Module Timer16
                                        (0181) ;       Instance name TenMicroSecTimer, Block Name TIMER16_LSB(DCB12)
                                        (0182) 	db		38h, 10h		;TenMicroSecTimer_FUNC_LSB_REG(DCB12FN)
                                        (0183) 	db		39h, 01h		;TenMicroSecTimer_INPUT_LSB_REG(DCB12IN)
                                        (0184) 	db		3ah, 40h		;TenMicroSecTimer_OUTPUT_LSB_REG(DCB12OU)
                                        (0185) ;       Instance name TenMicroSecTimer, Block Name TIMER16_MSB(DCB13)
                                        (0186) 	db		3ch, 30h		;TenMicroSecTimer_FUNC_MSB_REG(DCB13FN)
                                        (0187) 	db		3dh, 31h		;TenMicroSecTimer_INPUT_MSB_REG(DCB13IN)
                                        (0188) 	db		3eh, 40h		;TenMicroSecTimer_OUTPUT_MSB_REG(DCB13OU)
                                        (0189) ;  Instance name UART, User Module UART
                                        (0190) ;       Instance name UART, Block Name RX(DCB33)
                                        (0191) 	db		5ch, 05h		;UART_RX_FUNC_REG   (DCB33FN)
                                        (0192) 	db		5dh, e2h		;UART_RX_INPUT_REG  (DCB33IN)
                                        (0193) 	db		5eh, 40h		;UART_RX_OUTPUT_REG (DCB33OU)
                                        (0194) ;       Instance name UART, Block Name TX(DCB32)
                                        (0195) 	db		58h, 0dh		;UART_TX_FUNC_REG   (DCB32FN)
                                        (0196) 	db		59h, 02h		;UART_TX_INPUT_REG  (DCB32IN)
                                        (0197) 	db		5ah, 47h		;UART_TX_OUTPUT_REG (DCB32OU)
                                        (0198) ;  Instance name UARTClock, User Module Counter16
                                        (0199) ;       Instance name UARTClock, Block Name CNTR16_LSB(DBB30)
                                        (0200) 	db		50h, 01h		;UARTClock_FUNC_LSB_REG(DBB30FN)
                                        (0201) 	db		51h, 10h		;UARTClock_INPUT_LSB_REG(DBB30IN)
                                        (0202) 	db		52h, c0h		;UARTClock_OUTPUT_LSB_REG(DBB30OU)
                                        (0203) ;       Instance name UARTClock, Block Name CNTR16_MSB(DBB31)
                                        (0204) 	db		54h, 61h		;UARTClock_FUNC_MSB_REG(DBB31FN)
                                        (0205) 	db		55h, 30h		;UARTClock_INPUT_MSB_REG(DBB31IN)
                                        (0206) 	db		56h, c0h		;UARTClock_OUTPUT_MSB_REG(DBB31OU)
                                        (0207) ;  Global Register values Bank 1
                                        (0208) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0209) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0210) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0211) 	db		62h, 01h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0212) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0213) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0214) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0215) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0216) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0217) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0218) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0219) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0220) 	db		e1h, 27h		; OscillatorControl_1 register (OSC_CR1)
                                        (0221) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0222) 	db		dfh, efh		; OscillatorControl_3 register (OSC_CR3)
                                        (0223) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0224) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0225) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0226) 	db		ffh
                                        (0227) AREA psoc_config(rom, rel)
                                        (0228) LoadConfigTBL_ps2bitbang_Ordered:
                                        (0229) ;  Ordered Global Register values
                                        (0230) 	M8C_SetBank0
064C: 62 00 00 MOV   REG[0x0],0x0       (0231) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
064F: 71 10    OR    F,0x10             
                                        (0232) 	M8C_SetBank1
0651: 62 00 07 MOV   REG[0x0],0x7       (0233) 	mov	reg[00h], 07h		; Port_0_DriveMode_0 register (PRT0DM0)
0654: 62 01 F8 MOV   REG[0x1],0xF8      (0234) 	mov	reg[01h], f8h		; Port_0_DriveMode_1 register (PRT0DM1)
0657: 70 EF    AND   F,0xEF             
                                        (0235) 	M8C_SetBank0
0659: 62 03 F8 MOV   REG[0x3],0xF8      (0236) 	mov	reg[03h], f8h		; Port_0_DriveMode_2 register (PRT0DM2)
065C: 62 02 07 MOV   REG[0x2],0x7       (0237) 	mov	reg[02h], 07h		; Port_0_GlobalSelect register (PRT0GS)
065F: 71 10    OR    F,0x10             
                                        (0238) 	M8C_SetBank1
0661: 62 02 00 MOV   REG[0x2],0x0       (0239) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0664: 62 03 00 MOV   REG[0x3],0x0       (0240) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0667: 70 EF    AND   F,0xEF             
                                        (0241) 	M8C_SetBank0
0669: 62 01 00 MOV   REG[0x1],0x0       (0242) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
066C: 62 04 18 MOV   REG[0x4],0x18      (0243) 	mov	reg[04h], 18h		; Port_1_Data register (PRT1DR)
066F: 71 10    OR    F,0x10             
                                        (0244) 	M8C_SetBank1
0671: 62 04 3B MOV   REG[0x4],0x3B      (0245) 	mov	reg[04h], 3bh		; Port_1_DriveMode_0 register (PRT1DM0)
0674: 62 05 DC MOV   REG[0x5],0xDC      (0246) 	mov	reg[05h], dch		; Port_1_DriveMode_1 register (PRT1DM1)
0677: 70 EF    AND   F,0xEF             
                                        (0247) 	M8C_SetBank0
0679: 62 07 98 MOV   REG[0x7],0x98      (0248) 	mov	reg[07h], 98h		; Port_1_DriveMode_2 register (PRT1DM2)
067C: 62 06 46 MOV   REG[0x6],0x46      (0249) 	mov	reg[06h], 46h		; Port_1_GlobalSelect register (PRT1GS)
067F: 71 10    OR    F,0x10             
                                        (0250) 	M8C_SetBank1
0681: 62 06 00 MOV   REG[0x6],0x0       (0251) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0684: 62 07 00 MOV   REG[0x7],0x0       (0252) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0687: 70 EF    AND   F,0xEF             
                                        (0253) 	M8C_SetBank0
0689: 62 05 00 MOV   REG[0x5],0x0       (0254) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
068C: 62 08 00 MOV   REG[0x8],0x0       (0255) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
068F: 71 10    OR    F,0x10             
                                        (0256) 	M8C_SetBank1
0691: 62 08 FF MOV   REG[0x8],0xFF      (0257) 	mov	reg[08h], ffh		; Port_2_DriveMode_0 register (PRT2DM0)
0694: 62 09 00 MOV   REG[0x9],0x0       (0258) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
0697: 70 EF    AND   F,0xEF             
                                        (0259) 	M8C_SetBank0
0699: 62 0B 00 MOV   REG[0xB],0x0       (0260) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
069C: 62 0A 80 MOV   REG[0xA],0x80      (0261) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
069F: 71 10    OR    F,0x10             
                                        (0262) 	M8C_SetBank1
06A1: 62 0A 00 MOV   REG[0xA],0x0       (0263) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
06A4: 62 0B 00 MOV   REG[0xB],0x0       (0264) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
06A7: 70 EF    AND   F,0xEF             
                                        (0265) 	M8C_SetBank0
06A9: 62 09 00 MOV   REG[0x9],0x0       (0266) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
06AC: 62 0C 00 MOV   REG[0xC],0x0       (0267) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
06AF: 71 10    OR    F,0x10             
                                        (0268) 	M8C_SetBank1
06B1: 62 0C 00 MOV   REG[0xC],0x0       (0269) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
06B4: 62 0D 00 MOV   REG[0xD],0x0       (0270) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
06B7: 70 EF    AND   F,0xEF             
                                        (0271) 	M8C_SetBank0
06B9: 62 0F 00 MOV   REG[0xF],0x0       (0272) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
06BC: 62 0E 00 MOV   REG[0xE],0x0       (0273) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
06BF: 71 10    OR    F,0x10             
                                        (0274) 	M8C_SetBank1
06C1: 62 0E 00 MOV   REG[0xE],0x0       (0275) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
06C4: 62 0F 00 MOV   REG[0xF],0x0       (0276) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
06C7: 70 EF    AND   F,0xEF             
                                        (0277) 	M8C_SetBank0
06C9: 62 0D 00 MOV   REG[0xD],0x0       (0278) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
06CC: 62 10 00 MOV   REG[0x10],0x0      (0279) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
06CF: 71 10    OR    F,0x10             
                                        (0280) 	M8C_SetBank1
06D1: 62 10 00 MOV   REG[0x10],0x0      (0281) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
06D4: 62 11 00 MOV   REG[0x11],0x0      (0282) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
06D7: 70 EF    AND   F,0xEF             
                                        (0283) 	M8C_SetBank0
06D9: 62 13 00 MOV   REG[0x13],0x0      (0284) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
06DC: 62 12 00 MOV   REG[0x12],0x0      (0285) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
06DF: 71 10    OR    F,0x10             
                                        (0286) 	M8C_SetBank1
06E1: 62 12 00 MOV   REG[0x12],0x0      (0287) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
06E4: 62 13 00 MOV   REG[0x13],0x0      (0288) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
06E7: 70 EF    AND   F,0xEF             
                                        (0289) 	M8C_SetBank0
06E9: 62 11 00 MOV   REG[0x11],0x0      (0290) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
06EC: 62 14 00 MOV   REG[0x14],0x0      (0291) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
06EF: 71 10    OR    F,0x10             
                                        (0292) 	M8C_SetBank1
06F1: 62 14 00 MOV   REG[0x14],0x0      (0293) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
06F4: 62 15 00 MOV   REG[0x15],0x0      (0294) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
06F7: 70 EF    AND   F,0xEF             
                                        (0295) 	M8C_SetBank0
06F9: 62 17 00 MOV   REG[0x17],0x0      (0296) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
06FC: 62 16 00 MOV   REG[0x16],0x0      (0297) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
06FF: 71 10    OR    F,0x10             
                                        (0298) 	M8C_SetBank1
0701: 62 16 00 MOV   REG[0x16],0x0      (0299) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0704: 62 17 00 MOV   REG[0x17],0x0      (0300) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0707: 70 EF    AND   F,0xEF             
                                        (0301) 	M8C_SetBank0
0709: 62 15 00 MOV   REG[0x15],0x0      (0302) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
070C: 62 18 00 MOV   REG[0x18],0x0      (0303) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
070F: 71 10    OR    F,0x10             
                                        (0304) 	M8C_SetBank1
0711: 62 18 00 MOV   REG[0x18],0x0      (0305) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0714: 62 19 00 MOV   REG[0x19],0x0      (0306) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0717: 70 EF    AND   F,0xEF             
                                        (0307) 	M8C_SetBank0
0719: 62 1B 00 MOV   REG[0x1B],0x0      (0308) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
071C: 62 1A 00 MOV   REG[0x1A],0x0      (0309) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
071F: 71 10    OR    F,0x10             
                                        (0310) 	M8C_SetBank1
0721: 62 1A 00 MOV   REG[0x1A],0x0      (0311) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0724: 62 1B 00 MOV   REG[0x1B],0x0      (0312) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0727: 70 EF    AND   F,0xEF             
                                        (0313) 	M8C_SetBank0
0729: 62 19 00 MOV   REG[0x19],0x0      (0314) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
072C: 62 1C 00 MOV   REG[0x1C],0x0      (0315) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
072F: 71 10    OR    F,0x10             
                                        (0316) 	M8C_SetBank1
0731: 62 1C 00 MOV   REG[0x1C],0x0      (0317) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0734: 62 1D 00 MOV   REG[0x1D],0x0      (0318) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0737: 70 EF    AND   F,0xEF             
                                        (0319) 	M8C_SetBank0
0739: 62 1F 00 MOV   REG[0x1F],0x0      (0320) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
073C: 62 1E 00 MOV   REG[0x1E],0x0      (0321) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
073F: 71 10    OR    F,0x10             
                                        (0322) 	M8C_SetBank1
0741: 62 1E 00 MOV   REG[0x1E],0x0      (0323) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0744: 62 1F 00 MOV   REG[0x1F],0x0      (0324) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0747: 70 EF    AND   F,0xEF             
                                        (0325) 	M8C_SetBank0
0749: 62 1D 00 MOV   REG[0x1D],0x0      (0326) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
074C: 70 EF    AND   F,0xEF             
                                        (0327) 	M8C_SetBank0
074E: 7F       RET                      (0328) 	ret
                                        (0329) 
                                        (0330) 
                                        (0331) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_ps2bitbang
                                        (0026) export _LoadConfig_ps2bitbang
                                        (0027) export Port_1_Data_SHADE
                                        (0028) export _Port_1_Data_SHADE
                                        (0029) export Port_2_Data_SHADE
                                        (0030) export _Port_2_Data_SHADE
                                        (0031) export Port_2_DriveMode_0_SHADE
                                        (0032) export _Port_2_DriveMode_0_SHADE
                                        (0033) export Port_2_DriveMode_1_SHADE
                                        (0034) export _Port_2_DriveMode_1_SHADE
                                        (0035) 
                                        (0036) 
                                        (0037) export NO_SHADOW
                                        (0038) export _NO_SHADOW
                                        (0039) 
                                        (0040) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0041) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0042) 
                                        (0043) AREA psoc_config(rom, rel)
                                        (0044) 
                                        (0045) ;---------------------------------------------------------------------------
                                        (0046) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0047) ;                  parameters handled by boot code, like CPU speed). This
                                        (0048) ;                  function can be called from user code, but typically it
                                        (0049) ;                  is only called from boot.
                                        (0050) ;
                                        (0051) ;       INPUTS: None.
                                        (0052) ;      RETURNS: Nothing.
                                        (0053) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0054) ;               In the large memory model currently only the page
                                        (0055) ;               pointer registers listed below are modified.  This does
                                        (0056) ;               not guarantee that in future implementations of this
                                        (0057) ;               function other page pointer registers will not be
                                        (0058) ;               modified.
                                        (0059) ;          
                                        (0060) ;               Page Pointer Registers Modified: 
                                        (0061) ;               CUR_PP
                                        (0062) ;
                                        (0063) _LoadConfigInit:
                                        (0064)  LoadConfigInit:
                                        (0065)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0066)     
074F: 55 00 18 MOV   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x18(0067) 	mov		[Port_1_Data_SHADE], 18h
0752: 55 01 00 MOV   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0x0(0068) 	mov		[Port_2_Data_SHADE], 0h
0755: 55 02 FF MOV   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+2],0xFF(0069) 	mov		[Port_2_DriveMode_0_SHADE], ffh
0758: 55 03 00 MOV   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+3],0x0(0070) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0071) 
075B: 7C 07 62 LCALL 0x0762             (0072) 	lcall	LoadConfig_ps2bitbang
075E: 7C 06 4A LCALL 0x064A             (0073) 	lcall	LoadConfigTBL_ps2bitbang_Ordered
                                        (0074) 
                                        (0075) 
                                        (0076)     RAM_EPILOGUE RAM_USE_CLASS_4
0761: 7F       RET                      (0077)     ret
                                        (0078) 
                                        (0079) ;---------------------------------------------------------------------------
                                        (0080) ; Load Configuration ps2bitbang
                                        (0081) ;
                                        (0082) ;    Load configuration registers for ps2bitbang.
                                        (0083) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0084) ;
                                        (0085) ;       INPUTS: None.
                                        (0086) ;      RETURNS: Nothing.
                                        (0087) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0088) ;               modified as may the Page Pointer registers!
                                        (0089) ;               In the large memory model currently only the page
                                        (0090) ;               pointer registers listed below are modified.  This does
                                        (0091) ;               not guarantee that in future implementations of this
                                        (0092) ;               function other page pointer registers will not be
                                        (0093) ;               modified.
                                        (0094) ;          
                                        (0095) ;               Page Pointer Registers Modified: 
                                        (0096) ;               CUR_PP
                                        (0097) ;
                                        (0098) _LoadConfig_ps2bitbang:
                                        (0099)  LoadConfig_ps2bitbang:
                                        (0100)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101) 
0762: 10       PUSH  X                  (0102) 	push	x
0763: 70 EF    AND   F,0xEF             
                                        (0103)     M8C_SetBank0                    ; Force bank 0
0765: 50 00    MOV   A,0x0              (0104)     mov     a, 0                    ; Specify bank 0
0767: 67       ASR   A                  (0105)     asr     a                       ; Store in carry flag
                                        (0106)                                     ; Load bank 0 table:
0768: 50 04    MOV   A,0x4              (0107)     mov     A, >LoadConfigTBL_ps2bitbang_Bank0
076A: 57 F2    MOV   X,0xF2             (0108)     mov     X, <LoadConfigTBL_ps2bitbang_Bank0
076C: 7C 07 7D LCALL 0x077D             (0109)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0110) 
076F: 50 01    MOV   A,0x1              (0111)     mov     a, 1                    ; Specify bank 1
0771: 67       ASR   A                  (0112)     asr     a                       ; Store in carry flag
                                        (0113)                                     ; Load bank 1 table:
0772: 50 05    MOV   A,0x5              (0114)     mov     A, >LoadConfigTBL_ps2bitbang_Bank1
0774: 57 9B    MOV   X,0x9B             (0115)     mov     X, <LoadConfigTBL_ps2bitbang_Bank1
0776: 7C 07 7D LCALL 0x077D             (0116)     lcall   LoadConfig              ; Load the bank 1 values
0779: 70 EF    AND   F,0xEF             
                                        (0117) 
                                        (0118)     M8C_SetBank0                    ; Force return to bank 0
077B: 20       POP   X                  (0119) 	pop		x
                                        (0120) 
                                        (0121)     RAM_EPILOGUE RAM_USE_CLASS_4
077C: 7F       RET                      (0122)     ret
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) 
                                        (0127) ;---------------------------------------------------------------------------
                                        (0128) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0129) ;              pairs. Terminate on address=0xFF.
                                        (0130) ;
                                        (0131) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0132) ;           Flag Register Carry bit encodes the Register Bank
                                        (0133) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0134) ;
                                        (0135) ;  RETURNS: nothing.
                                        (0136) ;
                                        (0137) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0138) ;                X-3 Temporary store for register address
                                        (0139) ;                X-2 LSB of config table address
                                        (0140) ;                X-1 MSB of config table address
                                        (0141) ;
                                        (0142) LoadConfig:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_2
077D: 38 02    ADD   SP,0x2             (0144)     add     SP, 2                   ; Set up local vars
077F: 10       PUSH  X                  (0145)     push    X                       ; Save config table address on stack
0780: 08       PUSH  A                  (0146)     push    A
0781: 4F       MOV   X,SP               (0147)     mov     X, SP
0782: 56 FC 00 MOV   [X-4],0x0          (0148)     mov     [X-4], 0                ; Set default Destination to Bank 0
0785: D0 04    JNC   0x078A             (0149)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0787: 56 FC 01 MOV   [X-4],0x1          (0150)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0151) .BankSelectSaved:
078A: 18       POP   A                  (0152)     pop     A
078B: 20       POP   X                  (0153)     pop     X
078C: 70 EF    AND   F,0xEF             
078E: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0154) 
                                        (0155) LoadConfigLp:
                                        (0156)     M8C_SetBank0                    ; Switch to bank 0
                                        (0157)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0791: 10       PUSH  X                  (0158)     push    X                       ; Preserve the config table address
0792: 08       PUSH  A                  (0159)     push    A
0793: 28       ROMX                     (0160)     romx                            ; Load register address from table
0794: 39 FF    CMP   A,0xFF             (0161)     cmp     A, END_CONFIG_TABLE     ; End of table?
0796: A0 1F    JZ    0x07B6             (0162)     jz      EndLoadConfig           ;   Yes, go wrap it up
0798: 4F       MOV   X,SP               (0163)     mov     X, SP                   ;
0799: 48 FC 01 TST   [X-4],0x1          (0164)     tst     [X-4], 1                ; Loading IO Bank 1?
079C: A0 03    JZ    0x07A0             (0165)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
079E: 71 10    OR    F,0x10             
                                        (0166)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0167) .IOBankNowSet:
07A0: 54 FD    MOV   [X-3],A            (0168)     mov     [X-3], A                ; Stash the register address
07A2: 18       POP   A                  (0169)     pop     A                       ; Retrieve the table address
07A3: 20       POP   X                  (0170)     pop     X
07A4: 75       INC   X                  (0171)     inc     X                       ; Advance to the data byte
07A5: 09 00    ADC   A,0x0              (0172)     adc     A, 0
07A7: 10       PUSH  X                  (0173)     push    X                       ; Save the config table address again
07A8: 08       PUSH  A                  (0174)     push    A
07A9: 28       ROMX                     (0175)     romx                            ; load config data from the table
07AA: 4F       MOV   X,SP               (0176)     mov     X, SP                   ; retrieve the register address
07AB: 59 FD    MOV   X,[X-3]            (0177)     mov     X, [X-3]
07AD: 61 00    MOV   REG[X+0x0],A       (0178)     mov     reg[X], A               ; Configure the register
07AF: 18       POP   A                  (0179)     pop     A                       ; retrieve the table address
07B0: 20       POP   X                  (0180)     pop     X
07B1: 75       INC   X                  (0181)     inc     X                       ; advance to next table entry
07B2: 09 00    ADC   A,0x0              (0182)     adc     A, 0
07B4: 8F D7    JMP   0x078C             (0183)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0184) EndLoadConfig:
07B6: 38 FC    ADD   SP,0xFC            (0185)     add     SP, -4
07B8: 70 3F    AND   F,0x3F             
07BA: 71 C0    OR    F,0xC0             
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
07BC: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189) AREA InterruptRAM(ram, rel)
                                        (0190) 
                                        (0191) NO_SHADOW:
                                        (0192) _NO_SHADOW:
                                        (0193) ; write only register shadows
                                        (0194) _Port_1_Data_SHADE:
                                        (0195) Port_1_Data_SHADE:	BLK	1
                                        (0196) _Port_2_Data_SHADE:
                                        (0197) Port_2_Data_SHADE:	BLK	1
                                        (0198) _Port_2_DriveMode_0_SHADE:
                                        (0199) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0200) _Port_2_DriveMode_1_SHADE:
                                        (0201) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0202) 
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
07BD: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
07BE: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uartclockint.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: UARTClockINT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:42:30
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "UARTClock.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UARTClock_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _UARTClock_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _UARTClock_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
07BF: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file UARTClockINT.asm
FILE: lib\uartclock.asm                 (0001) ;;*****************************************************************************
07C0: 43 DF 20 OR    REG[0xDF],0x20     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: UARTClock.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:42:30
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "UARTClock.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  UARTClock_EnableInt
                                        (0030) export _UARTClock_EnableInt
                                        (0031) export  UARTClock_DisableInt
                                        (0032) export _UARTClock_DisableInt
                                        (0033) export  UARTClock_Start
                                        (0034) export _UARTClock_Start
                                        (0035) export  UARTClock_Stop
                                        (0036) export _UARTClock_Stop
                                        (0037) export  UARTClock_WritePeriod
                                        (0038) export _UARTClock_WritePeriod
                                        (0039) export  UARTClock_WriteCompareValue
                                        (0040) export _UARTClock_WriteCompareValue
                                        (0041) export  UARTClock_wReadCompareValue
                                        (0042) export _UARTClock_wReadCompareValue
                                        (0043) export  UARTClock_wReadCounter
                                        (0044) export _UARTClock_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wUARTClock_ReadCompareValue  ; deprecated
                                        (0049) export _wUARTClock_ReadCompareValue  ; deprecated
                                        (0050) export  wUARTClock_ReadCounter       ; deprecated
                                        (0051) export _wUARTClock_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: UARTClock_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  UARTClock_EnableInt:
                                        (0082) _UARTClock_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    UARTClock_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
07C3: 7F       RET                      (0086)    ret
07C4: 41 DF DF AND   REG[0xDF],0xDF     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: UARTClock_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  UARTClock_DisableInt:
                                        (0109) _UARTClock_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    UARTClock_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
07C7: 7F       RET                      (0113)    ret
07C8: 43 53 01 OR    REG[0x53],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: UARTClock_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  UARTClock_Start:
                                        (0138) _UARTClock_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    UARTClock_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
07CB: 7F       RET                      (0142)    ret
07CC: 41 53 FE AND   REG[0x53],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: UARTClock_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register of the LSB block.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  UARTClock_Stop:
                                        (0166) _UARTClock_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    UARTClock_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
07CF: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: UARTClock_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count registers (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  UARTClock_WritePeriod:
                                        (0196) _UARTClock_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
07D0: 60 51    MOV   REG[0x51],A        (0198)    mov   reg[UARTClock_PERIOD_LSB_REG], A
07D2: 5B       MOV   A,X                (0199)    mov   A, X
07D3: 60 55    MOV   REG[0x55],A        (0200)    mov   reg[UARTClock_PERIOD_MSB_REG], A
                                        (0201)    RAM_EPILOGUE RAM_USE_CLASS_1
07D5: 7F       RET                      (0202)    ret
                                        (0203) 
                                        (0204) 
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: UARTClock_WriteCompareValue
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Writes compare value into the Compare register (DR2).
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;
                                        (0215) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0216) ;  RETURNS:      Nothing
                                        (0217) ;  SIDE EFFECTS: 
                                        (0218) ;    The A and X registers may be modified by this or future implementations
                                        (0219) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0220) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0221) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0222) ;    functions.
                                        (0223) ;
                                        (0224)  UARTClock_WriteCompareValue:
                                        (0225) _UARTClock_WriteCompareValue:
                                        (0226)    RAM_PROLOGUE RAM_USE_CLASS_1
07D6: 60 52    MOV   REG[0x52],A        (0227)    mov   reg[UARTClock_COMPARE_LSB_REG], A
07D8: 5B       MOV   A,X                (0228)    mov   A, X
07D9: 60 56    MOV   REG[0x56],A        (0229)    mov   reg[UARTClock_COMPARE_MSB_REG], A
                                        (0230)    RAM_EPILOGUE RAM_USE_CLASS_1
07DB: 7F       RET                      (0231)    ret
                                        (0232) 
                                        (0233) 
                                        (0234) .ENDSECTION
                                        (0235) 
                                        (0236) .SECTION
                                        (0237) ;-----------------------------------------------------------------------------
                                        (0238) ;  FUNCTION NAME: UARTClock_wReadCompareValue
                                        (0239) ;
                                        (0240) ;  DESCRIPTION:
                                        (0241) ;     Reads the Compare registers.
                                        (0242) ;-----------------------------------------------------------------------------
                                        (0243) ;
                                        (0244) ;  ARGUMENTS:    None
                                        (0245) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0246) ;  SIDE EFFECTS: 
                                        (0247) ;    The A and X registers may be modified by this or future implementations
                                        (0248) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0249) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0250) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0251) ;    functions.
                                        (0252) ;
                                        (0253)  UARTClock_wReadCompareValue:
                                        (0254) _UARTClock_wReadCompareValue:
                                        (0255)  wUARTClock_ReadCompareValue:                    ; this name deprecated
                                        (0256) _wUARTClock_ReadCompareValue:                    ; this name deprecated
                                        (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
07DC: 5D 56    MOV   A,REG[0x56]        (0258)    mov   A, reg[UARTClock_COMPARE_MSB_REG]
07DE: 5C       MOV   X,A                (0259)    mov   X, A
07DF: 5D 52    MOV   A,REG[0x52]        (0260)    mov   A, reg[UARTClock_COMPARE_LSB_REG]
                                        (0261)    RAM_EPILOGUE RAM_USE_CLASS_1
07E1: 7F       RET                      (0262)    ret
                                        (0263) 
                                        (0264) 
                                        (0265) .ENDSECTION
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME: UARTClock_wReadCounter
                                        (0270) ;
                                        (0271) ;  DESCRIPTION:
                                        (0272) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0273) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0274) ;     from the Count to the Compare registers by holding the clock low in
                                        (0275) ;     the MSB PSoC block.
                                        (0276) ;-----------------------------------------------------------------------------
                                        (0277) ;
                                        (0278) ;  ARGUMENTS: None
                                        (0279) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0280) ;  SIDE EFFECTS:
                                        (0281) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0282) ;     2) The A and X registers may be modified by this or future implementations
                                        (0283) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0284) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0285) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0286) ;        functions.
                                        (0287) ;
                                        (0288)  UARTClock_wReadCounter:
                                        (0289) _UARTClock_wReadCounter:
                                        (0290)  wUARTClock_ReadCounter:                         ; this name deprecated
                                        (0291) _wUARTClock_ReadCounter:                         ; this name deprecated
                                        (0292) 
                                        (0293)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0294)    bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
                                        (0295)    bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
                                        (0296)    wCounter:               EQU   4                  ; Frame offset to temp Count   store
                                        (0297)    STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
                                        (0298) 
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_2
07E2: 4F       MOV   X,SP               (0300)    mov   X, SP                                      ; X <-  stack frame pointer
07E3: 5D 56    MOV   A,REG[0x56]        (0301)    mov   A, reg[UARTClock_COMPARE_MSB_REG]       ; Save the Compare register on the stack
07E5: 08       PUSH  A                  (0302)    push  A                                          ;
07E6: 5D 52    MOV   A,REG[0x52]        (0303)    mov   A, reg[UARTClock_COMPARE_LSB_REG]       ;
07E8: 08       PUSH  A                  (0304)    push  A                                          ;   -stack frame now 2 bytes-
07E9: 5D 53    MOV   A,REG[0x53]        (0305)    mov   A, reg[UARTClock_CONTROL_LSB_REG]       ; Save CR0 (running or stopped state)
07EB: 08       PUSH  A                  (0306)    push  A                                          ;   -stack frame now 3 bytes-
07EC: 41 53 FE AND   REG[0x53],0xFE     
07EF: 71 10    OR    F,0x10             
                                        (0307)    UARTClock_Stop_M                              ; Disable (stop) the Counter if running
                                        (0308)    M8C_SetBank1                                     ;
07F1: 5D 51    MOV   A,REG[0x51]        (0309)    mov   A, reg[UARTClock_INPUT_LSB_REG]         ; save the LSB clock input setting
07F3: 08       PUSH  A                  (0310)    push  A                                          ;   on the stack (now 4 bytes) and ...
                                        (0311)                                                     ;   hold the clock low:
07F4: 62 51 00 MOV   REG[0x51],0x0      (0312)    mov   reg[UARTClock_INPUT_LSB_REG], INPUT_REG_NULL
07F7: 70 EF    AND   F,0xEF             
                                        (0313)    M8C_SetBank0                                     ; Extract the Count via DR2 register
07F9: 5D 54    MOV   A,REG[0x54]        (0314)    mov   A, reg[UARTClock_COUNTER_MSB_REG]       ; DR2 <- DR0 (in the MSB block)
07FB: 5D 56    MOV   A,REG[0x56]        (0315)    mov   A, reg[UARTClock_COMPARE_MSB_REG]       ; Stash the Count MSB on the stack
07FD: 08       PUSH  A                  (0316)    push  A                                          ;   -stack frame is now 5 bytes
07FE: 5D 50    MOV   A,REG[0x50]        (0317)    mov   A, reg[UARTClock_COUNTER_LSB_REG]       ; DR2 <- DR0 (in the LSB block)
0800: 5D 52    MOV   A,REG[0x52]        (0318)    mov   A, reg[UARTClock_COMPARE_LSB_REG]       ; Stash the Count LSB on the stack
0802: 08       PUSH  A                  (0319)    push  A                                          ;   -stack frame is now 6 bytes-
0803: 52 00    MOV   A,[X+0]            (0320)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0805: 60 56    MOV   REG[0x56],A        (0321)    mov   reg[UARTClock_COMPARE_MSB_REG], A       ;
0807: 52 01    MOV   A,[X+1]            (0322)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0809: 60 52    MOV   REG[0x52],A        (0323)    mov   reg[UARTClock_COMPARE_LSB_REG], A       ;
080B: 71 10    OR    F,0x10             
                                        (0324)    M8C_SetBank1                                     ; ---Restore the counter operation
080D: 52 03    MOV   A,[X+3]            (0325)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
080F: 60 51    MOV   REG[0x51],A        (0326)    mov   reg[UARTClock_INPUT_LSB_REG], A         ;   and restore it
0811: 70 EF    AND   F,0xEF             
                                        (0327)    M8C_SetBank0                                     ; Now re-enable (start) the counter
0813: 52 02    MOV   A,[X+2]            (0328)    mov   A, [X+bOrigControlReg]                     ;   if it was running when
0815: 60 53    MOV   REG[0x53],A        (0329)    mov   reg[UARTClock_CONTROL_LSB_REG], A       ;   this function was first called
0817: 18       POP   A                  (0330)    pop   A                                          ; Setup the return value
0818: 20       POP   X                  (0331)    pop   X                                          ;
0819: 38 FC    ADD   SP,0xFC            (0332)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
081B: 70 3F    AND   F,0x3F             
081D: 71 C0    OR    F,0xC0             
                                        (0333)    RAM_EPILOGUE RAM_USE_CLASS_2
081F: 7F       RET                      (0334)    ret
                                        (0335) 
                                        (0336) .ENDSECTION
                                        (0337) 
                                        (0338) ; End of File UARTClock.asm
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
0820: 43 DF 40 OR    REG[0xDF],0x40     (0002) ;;*****************************************************************************
0823: 43 DF 80 OR    REG[0xDF],0x80     
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0826: 7F       RET                      (0182)    ret
0827: 41 DF BF AND   REG[0xDF],0xBF     
082A: 41 DF 7F AND   REG[0xDF],0x7F     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
082D: 7F       RET                      (0214)    ret
082E: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
0830: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
0832: A0 07    JZ    0x083A             (0249)    jz    .SetModeRegEmpty
0834: 43 58 10 OR    REG[0x58],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
0837: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
0839: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
083A: 41 58 EF AND   REG[0x58],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
083D: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
083F: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
0840: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
0842: 60 5B    MOV   REG[0x5B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
0844: 60 5F    MOV   REG[0x5F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0846: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0847: 41 5B FE AND   REG[0x5B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
084A: 41 5F FE AND   REG[0x5F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
084D: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
084E: 60 59    MOV   REG[0x59],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0850: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0851: 5D 5B    MOV   A,REG[0x5B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0853: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0854: 5D 5E    MOV   A,REG[0x5E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0856: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0857: 5D 5F    MOV   A,REG[0x5F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
0859: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
085A: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
085C: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
085E: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
0860: A0 06    JZ    0x0867             (0492)    jz   .SetTxCmpMode
                                        (0493) 
0862: 41 58 EF AND   REG[0x58],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
0865: 80 04    JMP   0x086A             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0867: 43 58 10 OR    REG[0x58],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
086A: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
086C: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
086D: 08       PUSH  A                  (0536)    push A
086E: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
0870: A0 06    JZ    0x0877             (0538)    jz   .DisRxInt
0872: 43 DF 80 OR    REG[0xDF],0x80     
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
0875: 80 04    JMP   0x087A             (0541)    jmp  .CheckTxInt
0877: 41 DF 7F AND   REG[0xDF],0x7F     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
087A: 18       POP   A                  (0547)    pop  A
087B: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
087D: A0 06    JZ    0x0884             (0549)    jz   .DisTxInt
087F: 43 DF 40 OR    REG[0xDF],0x40     
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
0882: 80 04    JMP   0x0887             (0552)    jmp  .End_IntCntl
0884: 41 DF BF AND   REG[0xDF],0xBF     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
0887: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0898: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0899: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
089A: 67       ASR   A                  (0603)    asr   A
089B: 67       ASR   A                  (0604)    asr   A
089C: 67       ASR   A                  (0605)    asr   A
089D: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
089F: FF E7    INDEX 0x0888             (0607)    index UART_HEX_STR                  ; Get Hex value
08A1: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
08A3: 18       POP   A                  (0609)    pop   A                             ; Restore value
08A4: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
08A6: FF E0    INDEX 0x0888             (0611)    index UART_HEX_STR                  ; Get Hex value
08A8: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
08AA: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
08AB: 4B       SWAP  A,X                (0645)    swap  A,X
08AC: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
08AE: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
08AF: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
08B1: 7F       RET                      (0650)    ret
08B2: 49 5B 10 TST   REG[0x5B],0x10     
08B5: AF FC    JZ    _UART_PutChar      
08B7: 60 59    MOV   REG[0x59],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
08B9: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
08BA: 49 5F 08 TST   REG[0x5F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
08BD: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
08BF: 5D 5E    MOV   A,REG[0x5E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
08C1: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
08C2: 5D 5F    MOV   A,REG[0x5F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
08C4: 08       PUSH  A                  (0756)    push A
08C5: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
08C7: B0 04    JNZ   0x08CC             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
08C9: 18       POP   A                  (0759)    pop  A
08CA: 80 0B    JMP   0x08D6             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
08CC: 5D 5E    MOV   A,REG[0x5E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
08CE: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
08CF: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
08D0: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
08D2: B0 03    JNZ   0x08D6             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
08D4: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
08D5: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
08D6: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
08D8: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
08D9: 5D 5F    MOV   A,REG[0x5F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
08DB: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
08DD: 08       PUSH  A                  (0819)    push A
08DE: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
08E0: B0 07    JNZ   0x08E8             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
08E2: 18       POP   A                  (0822)    pop  A
08E3: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
08E5: 4B       SWAP  A,X                (0824)    swap A,X
08E6: 80 07    JMP   0x08EE             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
08E8: 18       POP   A                  (0828)    pop  A
08E9: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
08EB: 4B       SWAP  A,X                (0830)    swap A,X
08EC: 5D 5E    MOV   A,REG[0x5E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
08EE: 7F       RET                      (0836)    ret
08EF: 70 BF    AND   F,0xBF             
08F1: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
08F3: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
08F5: A0 06    JZ    0x08FC             (0872)    jz    End_PutString                           ; Check for end of string
08F7: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
08F9: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
08FA: 8F F8    JMP   0x08F3             (0875)    jmp   .PutStringLoop                          ; Get next character
08FC: 70 3F    AND   F,0x3F             
08FE: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
0900: 7F       RET                      (0879)    ret
0901: 70 BF    AND   F,0xBF             
0903: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0906: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0907: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0909: A0 1A    JZ    0x0924             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
090B: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
090D: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
090F: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
0911: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0913: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0915: 49 5B 10 TST   REG[0x5B],0x10     
0918: AF FC    JZ    0x0915             
091A: 60 59    MOV   REG[0x59],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
091C: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
091D: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
0920: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0922: 8F E4    JMP   0x0907             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
0924: 70 3F    AND   F,0x3F             
0926: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0928: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
0929: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
092A: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
092D: B0 06    JNZ   0x0934             (0980)    jnz   .CW_WRITEIT
092F: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
0932: A0 1D    JZ    0x0950             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
0934: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
0935: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
0937: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
0939: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
093A: 49 5B 10 TST   REG[0x5B],0x10     
093D: AF FC    JZ    0x093A             
093F: 60 59    MOV   REG[0x59],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
0941: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
0942: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0945: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
0948: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
094B: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
094E: 8F DB    JMP   0x092A             (0995)    jmp   .CW_Loop
0950: 70 3F    AND   F,0x3F             
0952: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
0954: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
0955: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0956: 10       PUSH  X                  (1030)    push  X
0957: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
0958: A0 0B    JZ    0x0964             (1032)    jz    .End_CPutString
095A: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
095C: 20       POP   X                  (1034)    pop   X
095D: 18       POP   A                  (1035)    pop   A
095E: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
095F: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
0961: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
0962: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
0964: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0966: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0967: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
0969: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
096B: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
096D: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
096F: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\tenmicrosectimer.asm          (0001) ;;*****************************************************************************
0970: 43 E1 80 OR    REG[0xE1],0x80     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: TenMicroSecTimer.asm
                                        (0004) ;;   Version: 2.6, Updated on 2013/5/19 at 10:44:39
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "TenMicroSecTimer.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  TenMicroSecTimer_EnableInt
                                        (0030) export _TenMicroSecTimer_EnableInt
                                        (0031) export  TenMicroSecTimer_DisableInt
                                        (0032) export _TenMicroSecTimer_DisableInt
                                        (0033) export  TenMicroSecTimer_Start
                                        (0034) export _TenMicroSecTimer_Start
                                        (0035) export  TenMicroSecTimer_Stop
                                        (0036) export _TenMicroSecTimer_Stop
                                        (0037) export  TenMicroSecTimer_WritePeriod
                                        (0038) export _TenMicroSecTimer_WritePeriod
                                        (0039) export  TenMicroSecTimer_WriteCompareValue
                                        (0040) export _TenMicroSecTimer_WriteCompareValue
                                        (0041) export  TenMicroSecTimer_wReadCompareValue
                                        (0042) export _TenMicroSecTimer_wReadCompareValue
                                        (0043) export  TenMicroSecTimer_wReadTimer
                                        (0044) export _TenMicroSecTimer_wReadTimer
                                        (0045) export  TenMicroSecTimer_wReadTimerSaveCV
                                        (0046) export _TenMicroSecTimer_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTenMicroSecTimer_ReadCompareValue  ; deprecated
                                        (0051) export _wTenMicroSecTimer_ReadCompareValue  ; deprecated
                                        (0052) export  wTenMicroSecTimer_ReadTimer         ; deprecated
                                        (0053) export _wTenMicroSecTimer_ReadTimer         ; deprecated
                                        (0054) export  wTenMicroSecTimer_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTenMicroSecTimer_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTenMicroSecTimer_ReadCounter       ; obsolete
                                        (0058) export _wTenMicroSecTimer_ReadCounter       ; obsolete
                                        (0059) export  wTenMicroSecTimer_CaptureCounter    ; obsolete
                                        (0060) export _wTenMicroSecTimer_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA ps2bitbang_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: TenMicroSecTimer_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  TenMicroSecTimer_EnableInt:
                                        (0098) _TenMicroSecTimer_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    TenMicroSecTimer_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0973: 7F       RET                      (0102)    ret
0974: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: TenMicroSecTimer_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  TenMicroSecTimer_DisableInt:
                                        (0126) _TenMicroSecTimer_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    TenMicroSecTimer_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
0977: 7F       RET                      (0130)    ret
0978: 43 3B 01 OR    REG[0x3B],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: TenMicroSecTimer_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  TenMicroSecTimer_Start:
                                        (0154) _TenMicroSecTimer_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    TenMicroSecTimer_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
097B: 7F       RET                      (0158)    ret
097C: 41 3B FE AND   REG[0x3B],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: TenMicroSecTimer_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  TenMicroSecTimer_Stop:
                                        (0182) _TenMicroSecTimer_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    TenMicroSecTimer_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
097F: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: TenMicroSecTimer_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  TenMicroSecTimer_WritePeriod:
                                        (0211) _TenMicroSecTimer_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
0980: 60 39    MOV   REG[0x39],A        (0213)    mov   reg[TenMicroSecTimer_PERIOD_LSB_REG], A
0982: 5B       MOV   A,X                (0214)    mov   A, X
0983: 60 3D    MOV   REG[0x3D],A        (0215)    mov   reg[TenMicroSecTimer_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
0985: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: TenMicroSecTimer_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call TenMicroSecTimer_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  TenMicroSecTimer_WriteCompareValue:
                                        (0243) _TenMicroSecTimer_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
0986: 60 3A    MOV   REG[0x3A],A        (0245)    mov   reg[TenMicroSecTimer_COMPARE_LSB_REG], A
0988: 5B       MOV   A,X                (0246)    mov   A, X
0989: 60 3E    MOV   REG[0x3E],A        (0247)    mov   reg[TenMicroSecTimer_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
098B: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: TenMicroSecTimer_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  TenMicroSecTimer_wReadCompareValue:
                                        (0272) _TenMicroSecTimer_wReadCompareValue:
                                        (0273)  wTenMicroSecTimer_ReadCompareValue:                ; this name deprecated
                                        (0274) _wTenMicroSecTimer_ReadCompareValue:                ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
098C: 5D 3E    MOV   A,REG[0x3E]        (0276)    mov   A, reg[TenMicroSecTimer_COMPARE_MSB_REG]
098E: 5C       MOV   X,A                (0277)    mov   X, A
098F: 5D 3A    MOV   A,REG[0x3A]        (0278)    mov   A, reg[TenMicroSecTimer_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
0991: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: TenMicroSecTimer_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  TenMicroSecTimer_wReadTimerSaveCV:
                                        (0321) _TenMicroSecTimer_wReadTimerSaveCV:
                                        (0322)  wTenMicroSecTimer_ReadTimerSaveCV:                ; this name deprecated
                                        (0323) _wTenMicroSecTimer_ReadTimerSaveCV:                ; this name deprecated
                                        (0324)  wTenMicroSecTimer_ReadCounter:                    ; this name deprecated
                                        (0325) _wTenMicroSecTimer_ReadCounter:                    ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
0992: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
0993: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
0995: 5D 3B    MOV   A,REG[0x3B]        (0334)    mov   A, reg[TenMicroSecTimer_CONTROL_LSB_REG]; save the Control register
0997: 08       PUSH  A                  (0335)    push  A
0998: 5D 3A    MOV   A,REG[0x3A]        (0336)    mov   A, reg[TenMicroSecTimer_COMPARE_LSB_REG]; save the Compare register
099A: 08       PUSH  A                  (0337)    push  A
099B: 5D 3E    MOV   A,REG[0x3E]        (0338)    mov   A, reg[TenMicroSecTimer_COMPARE_MSB_REG]
099D: 08       PUSH  A                  (0339)    push  A
099E: 5D 38    MOV   A,REG[0x38]        (0340)    mov   A, reg[TenMicroSecTimer_COUNTER_LSB_REG]; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
09A0: 5D 3E    MOV   A,REG[0x3E]        (0342)    mov   A, reg[TenMicroSecTimer_COMPARE_MSB_REG]; Now grab DR2 (DR0) and save
09A2: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
09A4: 5D 3A    MOV   A,REG[0x3A]        (0344)    mov   A, reg[TenMicroSecTimer_COMPARE_LSB_REG]
09A6: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
09A8: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
09AA: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
09AD: A0 03    JZ    0x09B1             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
09AF: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
09B1: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
09B3: 70 FE    AND   F,0xFE             
09B5: 41 3B FE AND   REG[0x3B],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    TenMicroSecTimer_Stop_M                       ; Disable (stop) the timer
09B8: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
09B9: 60 3E    MOV   REG[0x3E],A        (0355)    mov   reg[TenMicroSecTimer_COMPARE_MSB_REG], A
09BB: 18       POP   A                  (0356)    pop   A
09BC: 60 3A    MOV   REG[0x3A],A        (0357)    mov   reg[TenMicroSecTimer_COMPARE_LSB_REG], A
09BE: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
09BF: 60 3B    MOV   REG[0x3B],A        (0359)    mov   reg[TenMicroSecTimer_CONTROL_LSB_REG], A
09C1: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
09C2: 20       POP   X                  (0361)    pop   X
09C3: 70 3F    AND   F,0x3F             
09C5: 71 C0    OR    F,0xC0             
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
09C7: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: TenMicroSecTimer_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  TenMicroSecTimer_wReadTimer:
                                        (0397) _TenMicroSecTimer_wReadTimer:
                                        (0398)  wTenMicroSecTimer_ReadTimer:                    ; this name deprecated
                                        (0399) _wTenMicroSecTimer_ReadTimer:                    ; this name deprecated
                                        (0400)  wTenMicroSecTimer_CaptureCounter:               ; this name deprecated
                                        (0401) _wTenMicroSecTimer_CaptureCounter:               ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
09C8: 5D 38    MOV   A,REG[0x38]        (0404)    mov   A, reg[TenMicroSecTimer_COUNTER_LSB_REG]; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
09CA: 5D 3E    MOV   A,REG[0x3E]        (0407)    mov   A, reg[TenMicroSecTimer_COMPARE_MSB_REG]; Return DR2 (actually DR0)
09CC: 5C       MOV   X,A                (0408)    mov   X, A
09CD: 5D 3A    MOV   A,REG[0x3A]        (0409)    mov   A, reg[TenMicroSecTimer_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
09CF: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File TenMicroSecTimer.asm
FILE: lib\pwmpiano3int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMPiano3INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWMPiano3.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWMPiano3_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWMPiano3_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWMPiano3_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
09D0: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWMPiano3INT.asm
FILE: lib\pwmpiano3.asm                 (0001) ;;*****************************************************************************
09D1: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMPiano3.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWMPiano3.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWMPiano3_EnableInt
                                        (0030) export _PWMPiano3_EnableInt
                                        (0031) export  PWMPiano3_DisableInt
                                        (0032) export _PWMPiano3_DisableInt
                                        (0033) export  PWMPiano3_Start
                                        (0034) export _PWMPiano3_Start
                                        (0035) export  PWMPiano3_Stop
                                        (0036) export _PWMPiano3_Stop
                                        (0037) export  PWMPiano3_WritePeriod
                                        (0038) export _PWMPiano3_WritePeriod
                                        (0039) export  PWMPiano3_WritePulseWidth
                                        (0040) export _PWMPiano3_WritePulseWidth
                                        (0041) export  PWMPiano3_wReadPulseWidth
                                        (0042) export _PWMPiano3_wReadPulseWidth
                                        (0043) export  PWMPiano3_wReadCounter
                                        (0044) export _PWMPiano3_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWMPiano3_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWMPiano3_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWMPiano3_ReadCounter       ; deprecated
                                        (0051) export _wPWMPiano3_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA ps2bitbang_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWMPiano3_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWMPiano3_EnableInt:
                                        (0091) _PWMPiano3_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWMPiano3_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
09D4: 7F       RET                      (0095)    ret
09D5: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWMPiano3_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWMPiano3_DisableInt:
                                        (0119) _PWMPiano3_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWMPiano3_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
09D8: 7F       RET                      (0123)    ret
09D9: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWMPiano3_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWMPiano3_Start:
                                        (0148) _PWMPiano3_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWMPiano3_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
09DC: 7F       RET                      (0152)    ret
09DD: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWMPiano3_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWMPiano3_Stop:
                                        (0176) _PWMPiano3_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWMPiano3_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
09E0: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWMPiano3_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWMPiano3_WritePeriod:
                                        (0206) _PWMPiano3_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
09E1: 60 29    MOV   REG[0x29],A        (0208)    mov   reg[PWMPiano3_PERIOD_LSB_REG], A
09E3: 5B       MOV   A,X                (0209)    mov   A, X
09E4: 60 2D    MOV   REG[0x2D],A        (0210)    mov   reg[PWMPiano3_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
09E6: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWMPiano3_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWMPiano3_WritePulseWidth:
                                        (0235) _PWMPiano3_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
09E7: 60 2A    MOV   REG[0x2A],A        (0237)    mov   reg[PWMPiano3_COMPARE_LSB_REG], A
09E9: 5B       MOV   A,X                (0238)    mov   A, X
09EA: 60 2E    MOV   REG[0x2E],A        (0239)    mov   reg[PWMPiano3_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
09EC: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWMPiano3_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWMPiano3_wReadPulseWidth:
                                        (0264) _PWMPiano3_wReadPulseWidth:
                                        (0265)  wPWMPiano3_ReadPulseWidth:                      ; this name deprecated
                                        (0266) _wPWMPiano3_ReadPulseWidth:                      ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
09ED: 5D 2E    MOV   A,REG[0x2E]        (0268)    mov   A, reg[PWMPiano3_COMPARE_MSB_REG]
09EF: 5C       MOV   X,A                (0269)    mov   X, A
09F0: 5D 2A    MOV   A,REG[0x2A]        (0270)    mov   A, reg[PWMPiano3_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
09F2: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWMPiano3_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWMPiano3_wReadCounter:
                                        (0299) _PWMPiano3_wReadCounter:
                                        (0300)  wPWMPiano3_ReadCounter:                         ; this name deprecated
                                        (0301) _wPWMPiano3_ReadCounter:                         ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
09F3: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
09F4: 5D 2E    MOV   A,REG[0x2E]        (0310)    mov   A, reg[PWMPiano3_COMPARE_MSB_REG]       ; Save the Compare register on the stack
09F6: 08       PUSH  A                  (0311)    push  A                                          ;
09F7: 5D 2A    MOV   A,REG[0x2A]        (0312)    mov   A, reg[PWMPiano3_COMPARE_LSB_REG]       ;
09F9: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
09FA: 41 2B FE AND   REG[0x2B],0xFE     
09FD: 71 10    OR    F,0x10             
                                        (0314)    PWMPiano3_Stop_M                              ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
09FF: 5D 29    MOV   A,REG[0x29]        (0316)    mov   A, reg[PWMPiano3_INPUT_LSB_REG]         ; save the LSB clock input setting
0A01: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
0A02: 62 29 00 MOV   REG[0x29],0x0      (0319)    mov   reg[PWMPiano3_INPUT_LSB_REG], INPUT_REG_NULL
0A05: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0A07: 5D 2C    MOV   A,REG[0x2C]        (0321)    mov   A, reg[PWMPiano3_COUNTER_MSB_REG]       ; DR2 <- DR0 (in the MSB block)
0A09: 5D 2E    MOV   A,REG[0x2E]        (0322)    mov   A, reg[PWMPiano3_COMPARE_MSB_REG]       ; Stash the Count MSB on the stack
0A0B: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
0A0C: 5D 28    MOV   A,REG[0x28]        (0324)    mov   A, reg[PWMPiano3_COUNTER_LSB_REG]       ; DR2 <- DR0 (in the LSB block)
0A0E: 5D 2A    MOV   A,REG[0x2A]        (0325)    mov   A, reg[PWMPiano3_COMPARE_LSB_REG]       ; Stash the Count LSB on the stack
0A10: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
0A11: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0A13: 60 2E    MOV   REG[0x2E],A        (0328)    mov   reg[PWMPiano3_COMPARE_MSB_REG], A       ;
0A15: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0A17: 60 2A    MOV   REG[0x2A],A        (0330)    mov   reg[PWMPiano3_COMPARE_LSB_REG], A       ;
0A19: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
0A1B: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0A1D: 60 29    MOV   REG[0x29],A        (0333)    mov   reg[PWMPiano3_INPUT_LSB_REG], A         ;    and restore it
0A1F: 70 EF    AND   F,0xEF             
0A21: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWMPiano3_Start_M                             ; Now re-enable the PWM function
0A24: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0A25: 20       POP   X                  (0337)    pop   X                                          ;
0A26: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0A28: 70 3F    AND   F,0x3F             
0A2A: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0A2C: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWMPiano3.asm
FILE: lib\pwmpiano2int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMPiano2INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWMPiano2.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWMPiano2_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWMPiano2_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWMPiano2_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0A2D: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWMPiano2INT.asm
FILE: lib\pwmpiano2.asm                 (0001) ;;*****************************************************************************
0A2E: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMPiano2.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWMPiano2.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWMPiano2_EnableInt
                                        (0030) export _PWMPiano2_EnableInt
                                        (0031) export  PWMPiano2_DisableInt
                                        (0032) export _PWMPiano2_DisableInt
                                        (0033) export  PWMPiano2_Start
                                        (0034) export _PWMPiano2_Start
                                        (0035) export  PWMPiano2_Stop
                                        (0036) export _PWMPiano2_Stop
                                        (0037) export  PWMPiano2_WritePeriod
                                        (0038) export _PWMPiano2_WritePeriod
                                        (0039) export  PWMPiano2_WritePulseWidth
                                        (0040) export _PWMPiano2_WritePulseWidth
                                        (0041) export  PWMPiano2_wReadPulseWidth
                                        (0042) export _PWMPiano2_wReadPulseWidth
                                        (0043) export  PWMPiano2_wReadCounter
                                        (0044) export _PWMPiano2_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWMPiano2_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWMPiano2_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWMPiano2_ReadCounter       ; deprecated
                                        (0051) export _wPWMPiano2_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA ps2bitbang_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWMPiano2_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWMPiano2_EnableInt:
                                        (0091) _PWMPiano2_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWMPiano2_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0A31: 7F       RET                      (0095)    ret
0A32: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWMPiano2_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWMPiano2_DisableInt:
                                        (0119) _PWMPiano2_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWMPiano2_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0A35: 7F       RET                      (0123)    ret
0A36: 43 23 01 OR    REG[0x23],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWMPiano2_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWMPiano2_Start:
                                        (0148) _PWMPiano2_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWMPiano2_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0A39: 7F       RET                      (0152)    ret
0A3A: 41 23 FE AND   REG[0x23],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWMPiano2_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWMPiano2_Stop:
                                        (0176) _PWMPiano2_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWMPiano2_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0A3D: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWMPiano2_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWMPiano2_WritePeriod:
                                        (0206) _PWMPiano2_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0A3E: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[PWMPiano2_PERIOD_LSB_REG], A
0A40: 5B       MOV   A,X                (0209)    mov   A, X
0A41: 60 25    MOV   REG[0x25],A        (0210)    mov   reg[PWMPiano2_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
0A43: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWMPiano2_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWMPiano2_WritePulseWidth:
                                        (0235) _PWMPiano2_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0A44: 60 22    MOV   REG[0x22],A        (0237)    mov   reg[PWMPiano2_COMPARE_LSB_REG], A
0A46: 5B       MOV   A,X                (0238)    mov   A, X
0A47: 60 26    MOV   REG[0x26],A        (0239)    mov   reg[PWMPiano2_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
0A49: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWMPiano2_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWMPiano2_wReadPulseWidth:
                                        (0264) _PWMPiano2_wReadPulseWidth:
                                        (0265)  wPWMPiano2_ReadPulseWidth:                      ; this name deprecated
                                        (0266) _wPWMPiano2_ReadPulseWidth:                      ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
0A4A: 5D 26    MOV   A,REG[0x26]        (0268)    mov   A, reg[PWMPiano2_COMPARE_MSB_REG]
0A4C: 5C       MOV   X,A                (0269)    mov   X, A
0A4D: 5D 22    MOV   A,REG[0x22]        (0270)    mov   A, reg[PWMPiano2_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
0A4F: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWMPiano2_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWMPiano2_wReadCounter:
                                        (0299) _PWMPiano2_wReadCounter:
                                        (0300)  wPWMPiano2_ReadCounter:                         ; this name deprecated
                                        (0301) _wPWMPiano2_ReadCounter:                         ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
0A50: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
0A51: 5D 26    MOV   A,REG[0x26]        (0310)    mov   A, reg[PWMPiano2_COMPARE_MSB_REG]       ; Save the Compare register on the stack
0A53: 08       PUSH  A                  (0311)    push  A                                          ;
0A54: 5D 22    MOV   A,REG[0x22]        (0312)    mov   A, reg[PWMPiano2_COMPARE_LSB_REG]       ;
0A56: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
0A57: 41 23 FE AND   REG[0x23],0xFE     
0A5A: 71 10    OR    F,0x10             
                                        (0314)    PWMPiano2_Stop_M                              ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
0A5C: 5D 21    MOV   A,REG[0x21]        (0316)    mov   A, reg[PWMPiano2_INPUT_LSB_REG]         ; save the LSB clock input setting
0A5E: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
0A5F: 62 21 00 MOV   REG[0x21],0x0      (0319)    mov   reg[PWMPiano2_INPUT_LSB_REG], INPUT_REG_NULL
0A62: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0A64: 5D 24    MOV   A,REG[0x24]        (0321)    mov   A, reg[PWMPiano2_COUNTER_MSB_REG]       ; DR2 <- DR0 (in the MSB block)
0A66: 5D 26    MOV   A,REG[0x26]        (0322)    mov   A, reg[PWMPiano2_COMPARE_MSB_REG]       ; Stash the Count MSB on the stack
0A68: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
0A69: 5D 20    MOV   A,REG[0x20]        (0324)    mov   A, reg[PWMPiano2_COUNTER_LSB_REG]       ; DR2 <- DR0 (in the LSB block)
0A6B: 5D 22    MOV   A,REG[0x22]        (0325)    mov   A, reg[PWMPiano2_COMPARE_LSB_REG]       ; Stash the Count LSB on the stack
0A6D: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
0A6E: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0A70: 60 26    MOV   REG[0x26],A        (0328)    mov   reg[PWMPiano2_COMPARE_MSB_REG], A       ;
0A72: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0A74: 60 22    MOV   REG[0x22],A        (0330)    mov   reg[PWMPiano2_COMPARE_LSB_REG], A       ;
0A76: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
0A78: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0A7A: 60 21    MOV   REG[0x21],A        (0333)    mov   reg[PWMPiano2_INPUT_LSB_REG], A         ;    and restore it
0A7C: 70 EF    AND   F,0xEF             
0A7E: 43 23 01 OR    REG[0x23],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWMPiano2_Start_M                             ; Now re-enable the PWM function
0A81: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0A82: 20       POP   X                  (0337)    pop   X                                          ;
0A83: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0A85: 70 3F    AND   F,0x3F             
0A87: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0A89: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWMPiano2.asm
FILE: lib\pwmpiano1int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMPiano1INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWMPiano1.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWMPiano1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWMPiano1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWMPiano1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0A8A: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWMPiano1INT.asm
FILE: lib\pwmpiano1.asm                 (0001) ;;*****************************************************************************
0A8B: 43 DF 08 OR    REG[0xDF],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMPiano1.asm
                                        (0004) ;;   Version: 2.5, Updated on 2013/5/19 at 10:44:6
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWMPiano1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWMPiano1_EnableInt
                                        (0030) export _PWMPiano1_EnableInt
                                        (0031) export  PWMPiano1_DisableInt
                                        (0032) export _PWMPiano1_DisableInt
                                        (0033) export  PWMPiano1_Start
                                        (0034) export _PWMPiano1_Start
                                        (0035) export  PWMPiano1_Stop
                                        (0036) export _PWMPiano1_Stop
                                        (0037) export  PWMPiano1_WritePeriod
                                        (0038) export _PWMPiano1_WritePeriod
                                        (0039) export  PWMPiano1_WritePulseWidth
                                        (0040) export _PWMPiano1_WritePulseWidth
                                        (0041) export  PWMPiano1_wReadPulseWidth
                                        (0042) export _PWMPiano1_wReadPulseWidth
                                        (0043) export  PWMPiano1_wReadCounter
                                        (0044) export _PWMPiano1_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWMPiano1_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWMPiano1_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWMPiano1_ReadCounter       ; deprecated
                                        (0051) export _wPWMPiano1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA ps2bitbang_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWMPiano1_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWMPiano1_EnableInt:
                                        (0091) _PWMPiano1_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWMPiano1_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0A8E: 7F       RET                      (0095)    ret
0A8F: 41 DF F7 AND   REG[0xDF],0xF7     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWMPiano1_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWMPiano1_DisableInt:
                                        (0119) _PWMPiano1_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWMPiano1_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0A92: 7F       RET                      (0123)    ret
0A93: 43 4B 01 OR    REG[0x4B],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWMPiano1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWMPiano1_Start:
                                        (0148) _PWMPiano1_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWMPiano1_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0A96: 7F       RET                      (0152)    ret
0A97: 41 4B FE AND   REG[0x4B],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWMPiano1_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWMPiano1_Stop:
                                        (0176) _PWMPiano1_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWMPiano1_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0A9A: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWMPiano1_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWMPiano1_WritePeriod:
                                        (0206) _PWMPiano1_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0A9B: 60 49    MOV   REG[0x49],A        (0208)    mov   reg[PWMPiano1_PERIOD_LSB_REG], A
0A9D: 5B       MOV   A,X                (0209)    mov   A, X
0A9E: 60 4D    MOV   REG[0x4D],A        (0210)    mov   reg[PWMPiano1_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
0AA0: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWMPiano1_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWMPiano1_WritePulseWidth:
                                        (0235) _PWMPiano1_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0AA1: 60 4A    MOV   REG[0x4A],A        (0237)    mov   reg[PWMPiano1_COMPARE_LSB_REG], A
0AA3: 5B       MOV   A,X                (0238)    mov   A, X
0AA4: 60 4E    MOV   REG[0x4E],A        (0239)    mov   reg[PWMPiano1_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
0AA6: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWMPiano1_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWMPiano1_wReadPulseWidth:
                                        (0264) _PWMPiano1_wReadPulseWidth:
                                        (0265)  wPWMPiano1_ReadPulseWidth:                      ; this name deprecated
                                        (0266) _wPWMPiano1_ReadPulseWidth:                      ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
0AA7: 5D 4E    MOV   A,REG[0x4E]        (0268)    mov   A, reg[PWMPiano1_COMPARE_MSB_REG]
0AA9: 5C       MOV   X,A                (0269)    mov   X, A
0AAA: 5D 4A    MOV   A,REG[0x4A]        (0270)    mov   A, reg[PWMPiano1_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
0AAC: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWMPiano1_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWMPiano1_wReadCounter:
                                        (0299) _PWMPiano1_wReadCounter:
                                        (0300)  wPWMPiano1_ReadCounter:                         ; this name deprecated
                                        (0301) _wPWMPiano1_ReadCounter:                         ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
0AAD: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
0AAE: 5D 4E    MOV   A,REG[0x4E]        (0310)    mov   A, reg[PWMPiano1_COMPARE_MSB_REG]       ; Save the Compare register on the stack
0AB0: 08       PUSH  A                  (0311)    push  A                                          ;
0AB1: 5D 4A    MOV   A,REG[0x4A]        (0312)    mov   A, reg[PWMPiano1_COMPARE_LSB_REG]       ;
0AB3: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
0AB4: 41 4B FE AND   REG[0x4B],0xFE     
0AB7: 71 10    OR    F,0x10             
                                        (0314)    PWMPiano1_Stop_M                              ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
0AB9: 5D 49    MOV   A,REG[0x49]        (0316)    mov   A, reg[PWMPiano1_INPUT_LSB_REG]         ; save the LSB clock input setting
0ABB: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
0ABC: 62 49 00 MOV   REG[0x49],0x0      (0319)    mov   reg[PWMPiano1_INPUT_LSB_REG], INPUT_REG_NULL
0ABF: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0AC1: 5D 4C    MOV   A,REG[0x4C]        (0321)    mov   A, reg[PWMPiano1_COUNTER_MSB_REG]       ; DR2 <- DR0 (in the MSB block)
0AC3: 5D 4E    MOV   A,REG[0x4E]        (0322)    mov   A, reg[PWMPiano1_COMPARE_MSB_REG]       ; Stash the Count MSB on the stack
0AC5: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
0AC6: 5D 48    MOV   A,REG[0x48]        (0324)    mov   A, reg[PWMPiano1_COUNTER_LSB_REG]       ; DR2 <- DR0 (in the LSB block)
0AC8: 5D 4A    MOV   A,REG[0x4A]        (0325)    mov   A, reg[PWMPiano1_COMPARE_LSB_REG]       ; Stash the Count LSB on the stack
0ACA: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
0ACB: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0ACD: 60 4E    MOV   REG[0x4E],A        (0328)    mov   reg[PWMPiano1_COMPARE_MSB_REG], A       ;
0ACF: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0AD1: 60 4A    MOV   REG[0x4A],A        (0330)    mov   reg[PWMPiano1_COMPARE_LSB_REG], A       ;
0AD3: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
0AD5: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0AD7: 60 49    MOV   REG[0x49],A        (0333)    mov   reg[PWMPiano1_INPUT_LSB_REG], A         ;    and restore it
0AD9: 70 EF    AND   F,0xEF             
0ADB: 43 4B 01 OR    REG[0x4B],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWMPiano1_Start_M                             ; Now re-enable the PWM function
0ADE: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0ADF: 20       POP   X                  (0337)    pop   X                                          ;
0AE0: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0AE2: 70 3F    AND   F,0x3F             
0AE4: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0AE6: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWMPiano1.asm
FILE: lib\pwm8ledint.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8LEDINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8LED.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8LED_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8LED_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8LED_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0AE7: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8LEDINT.asm
FILE: lib\pwm8led.asm                   (0001) ;;*****************************************************************************
0AE8: 43 DF 01 OR    REG[0xDF],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8LED.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8LED.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8LED_EnableInt
                                        (0030) export _PWM8LED_EnableInt
                                        (0031) export  PWM8LED_DisableInt
                                        (0032) export _PWM8LED_DisableInt
                                        (0033) export  PWM8LED_Start
                                        (0034) export _PWM8LED_Start
                                        (0035) export  PWM8LED_Stop
                                        (0036) export _PWM8LED_Stop
                                        (0037) export  PWM8LED_WritePeriod
                                        (0038) export _PWM8LED_WritePeriod
                                        (0039) export  PWM8LED_WritePulseWidth
                                        (0040) export _PWM8LED_WritePulseWidth
                                        (0041) export  PWM8LED_bReadPulseWidth
                                        (0042) export _PWM8LED_bReadPulseWidth
                                        (0043) export  PWM8LED_bReadCounter
                                        (0044) export _PWM8LED_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8LED_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8LED_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8LED_ReadCounter       ; deprecated
                                        (0051) export _bPWM8LED_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA ps2bitbang_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8LED_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8LED_EnableInt:
                                        (0091) _PWM8LED_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8LED_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0AEB: 7F       RET                      (0095)    ret
0AEC: 41 DF FE AND   REG[0xDF],0xFE     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8LED_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8LED_DisableInt:
                                        (0119) _PWM8LED_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8LED_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0AEF: 7F       RET                      (0123)    ret
0AF0: 43 43 01 OR    REG[0x43],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8LED_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8LED_Start:
                                        (0148) _PWM8LED_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8LED_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0AF3: 7F       RET                      (0152)    ret
0AF4: 41 43 FE AND   REG[0x43],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8LED_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8LED_Stop:
                                        (0176) _PWM8LED_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8LED_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0AF7: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8LED_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8LED_WritePeriod:
                                        (0206) _PWM8LED_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0AF8: 60 41    MOV   REG[0x41],A        (0208)    mov   reg[PWM8LED_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0AFA: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8LED_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8LED_WritePulseWidth:
                                        (0233) _PWM8LED_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0AFB: 60 42    MOV   REG[0x42],A        (0235)    mov   reg[PWM8LED_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0AFD: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8LED_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8LED_bReadPulseWidth:
                                        (0260) _PWM8LED_bReadPulseWidth:
                                        (0261)  bPWM8LED_ReadPulseWidth:                        ; this name deprecated
                                        (0262) _bPWM8LED_ReadPulseWidth:                        ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0AFE: 5D 42    MOV   A,REG[0x42]        (0264)    mov   A, reg[PWM8LED_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0B00: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8LED_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8LED_bReadCounter:
                                        (0293) _PWM8LED_bReadCounter:
                                        (0294)  bPWM8LED_ReadCounter:                           ; this name deprecated
                                        (0295) _bPWM8LED_ReadCounter:                           ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0B01: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
0B02: 5D 42    MOV   A,REG[0x42]        (0304)    mov   A, reg[PWM8LED_COMPARE_REG]             ; Save the Compare register on the stack
0B04: 08       PUSH  A                  (0305)    push  A                                       ;
0B05: 41 43 FE AND   REG[0x43],0xFE     
0B08: 71 10    OR    F,0x10             
                                        (0306)    PWM8LED_Stop_M                                ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
0B0A: 5D 41    MOV   A,REG[0x41]        (0308)    mov   A, reg[PWM8LED_INPUT_REG]               ; save the clock input setting
0B0C: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0B0D: 62 41 00 MOV   REG[0x41],0x0      (0311)    mov   reg[PWM8LED_INPUT_REG], INPUT_REG_NULL
0B10: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0B12: 5D 40    MOV   A,REG[0x40]        (0314)    mov   A, reg[PWM8LED_COUNTER_REG]             ; DR2 <- DR0
0B14: 5D 42    MOV   A,REG[0x42]        (0315)    mov   A, reg[PWM8LED_COMPARE_REG]             ; Stash the Count on the stack
0B16: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
0B17: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0B19: 60 42    MOV   REG[0x42],A        (0318)    mov   reg[PWM8LED_COMPARE_REG], A
0B1B: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0B1D: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0B1F: 60 41    MOV   REG[0x41],A        (0321)    mov   reg[PWM8LED_INPUT_REG], A               ;
0B21: 70 EF    AND   F,0xEF             
0B23: 43 43 01 OR    REG[0x43],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8LED_Start_M                               ;   then re-enable the PWM.
0B26: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0B27: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0B29: 70 3F    AND   F,0x3F             
0B2B: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
0B2D: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8LED.asm
FILE: lib\ps2oneshot.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PS2OneShot.asm
                                        (0004) ;;  Version: 1.0, Updated on 2013/5/19 at 10:43:57
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: OneShot8 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "PS2OneShot.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export   PS2OneShot_Start
                                        (0030) export  _PS2OneShot_Start
                                        (0031) export   PS2OneShot_Stop
                                        (0032) export  _PS2OneShot_Stop
                                        (0033) export   PS2OneShot_EnableInt
                                        (0034) export  _PS2OneShot_EnableInt
                                        (0035) export   PS2OneShot_DisableInt
                                        (0036) export  _PS2OneShot_DisableInt
                                        (0037) export   PS2OneShot_ClearInt
                                        (0038) export  _PS2OneShot_ClearInt
                                        (0039) 
                                        (0040) ;-----------------------------------------------
                                        (0041) ;  Constant Definitions
                                        (0042) ;-----------------------------------------------
                                        (0043) bfCONTROL_REG_START_BIT:   equ   1        ; Control register start bit
                                        (0044) 
                                        (0045) AREA UserModules (ROM, REL)
                                        (0046) 
                                        (0047) .SECTION
                                        (0048) ;-----------------------------------------------------------------------------
                                        (0049) ;  FUNCTION NAME: PS2OneShot_Start
                                        (0050) ;
                                        (0051) ;  DESCRIPTION:
                                        (0052) ;     Starts the OneShot user module.  
                                        (0053) ;
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;
                                        (0056) ;  ARGUMENTS: None
                                        (0057) ;
                                        (0058) ;  RETURNS:   None
                                        (0059) ;
                                        (0060) ;  SIDE EFFECTS:
                                        (0061) ;    The A and X registers may be modified by this or future implementations
                                        (0062) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0063) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0064) ;    responsibility to perserve their values across calls to fastcall16
                                        (0065) ;    functions.
                                        (0066) ;
                                        (0067) ;
                                        (0068)  PS2OneShot_Start:
                                        (0069) _PS2OneShot_Start:
                                        (0070)    RAM_PROLOGUE RAM_USE_CLASS_1
0B2E: 43 37 01 OR    REG[0x37],0x1      (0071)    or    REG[PS2OneShot_CONTROL_REG], bfCONTROL_REG_START_BIT
                                        (0072)    RAM_EPILOGUE RAM_USE_CLASS_1
0B31: 7F       RET                      (0073)    ret
                                        (0074) .ENDSECTION
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: PS2OneShot_Stop
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Disables OneShot operation.
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS: None
                                        (0086) ;
                                        (0087) ;  RETURNS:   None
                                        (0088) ;
                                        (0089) ;  SIDE EFFECTS:
                                        (0090) ;    The A and X registers may be modified by this or future implementations
                                        (0091) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0092) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0093) ;    responsibility to perserve their values across calls to fastcall16
                                        (0094) ;    functions.
                                        (0095) ;
                                        (0096) ;
                                        (0097)  PS2OneShot_Stop:
                                        (0098) _PS2OneShot_Stop:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
0B32: 41 37 FE AND   REG[0x37],0xFE     (0100)    and   REG[PS2OneShot_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0B35: 7F       RET                      (0102)    ret
0B36: 43 E1 20 OR    REG[0xE1],0x20     
                                        (0103) .ENDSECTION
                                        (0104) 
                                        (0105) .SECTION
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) ;  FUNCTION NAME: PS2OneShot_EnableInt
                                        (0108) ;
                                        (0109) ;  DESCRIPTION:
                                        (0110) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0111) ;     associated with this User Module. This function has no effect until and
                                        (0112) ;     unless the global interrupts are enabled (for example by using the
                                        (0113) ;     macro M8C_EnableGInt).
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None.
                                        (0117) ;
                                        (0118) ;  RETURNS:      Nothing.
                                        (0119) ;
                                        (0120) ;  SIDE EFFECTS: 
                                        (0121) ;    The A and X registers may be modified by this or future implementations
                                        (0122) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0123) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0124) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0125) ;    functions.
                                        (0126) ;
                                        (0127)  PS2OneShot_EnableInt:
                                        (0128) _PS2OneShot_EnableInt:
                                        (0129)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0130)    M8C_EnableIntMask PS2OneShot_INT_REG, PS2OneShot_INT_MASK
                                        (0131)    RAM_EPILOGUE RAM_USE_CLASS_1
0B39: 7F       RET                      (0132)    ret
0B3A: 41 E1 DF AND   REG[0xE1],0xDF     
                                        (0133) .ENDSECTION
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: PS2OneShot_DisableInt
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0141) ;     mask bit associated with this User Module.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;
                                        (0146) ;  RETURNS:      Nothing
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS: 
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155)  PS2OneShot_DisableInt:
                                        (0156) _PS2OneShot_DisableInt:
                                        (0157)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0158)    M8C_DisableIntMask PS2OneShot_INT_REG, PS2OneShot_INT_MASK
                                        (0159)    RAM_EPILOGUE RAM_USE_CLASS_1
0B3D: 7F       RET                      (0160)    ret
0B3E: 62 DB DF MOV   REG[0xDB],0xDF     
                                        (0161) .ENDSECTION
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: PS2OneShot_ClearInt
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Clear the pending interrupt from OneShot user module.
                                        (0169) ;-----------------------------------------------------------------------------
                                        (0170) ;
                                        (0171) ;  ARGUMENTS:    None
                                        (0172) ;
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;
                                        (0175) ;  SIDE EFFECTS: 
                                        (0176) ;    The A and X registers may be modified by this or future implementations
                                        (0177) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0178) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0179) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0180) ;    functions.
                                        (0181) ;
                                        (0182)  PS2OneShot_ClearInt:
                                        (0183) _PS2OneShot_ClearInt:
                                        (0184)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0185)    M8C_ClearIntFlag PS2OneShot_INT_CLR, PS2OneShot_INT_MASK  ; Clear the interrupt
                                        (0186)    RAM_EPILOGUE RAM_USE_CLASS_1
0B41: 7F       RET                      (0187)    ret
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) ; End of File PS2OneShot.asm
FILE: lib\ps2digbuf.asm                 (0001) ;;*****************************************************************************
0B42: 43 E1 10 OR    REG[0xE1],0x10     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PS2DigBuf.asm
                                        (0004) ;;  Version: 1.3, Updated on 2013/5/19 at 10:43:26
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DigitalBuffers User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "PS2DigBuf.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PS2DigBuf_EnableInt
                                        (0030) export _PS2DigBuf_EnableInt
                                        (0031) export  PS2DigBuf_DisableInt
                                        (0032) export _PS2DigBuf_DisableInt
                                        (0033) export  PS2DigBuf_Start
                                        (0034) export _PS2DigBuf_Start
                                        (0035) export  PS2DigBuf_Stop
                                        (0036) export _PS2DigBuf_Stop
                                        (0037) 
                                        (0038) AREA bss (RAM,REL)
                                        (0039) 
                                        (0040) ;-----------------------------------------------
                                        (0041) ;  Constant Definitions
                                        (0042) ;-----------------------------------------------
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------
                                        (0046) ; Variable Allocation
                                        (0047) ;-----------------------------------------------
                                        (0048) 
                                        (0049) 
                                        (0050) AREA UserModules (ROM, REL)
                                        (0051) 
                                        (0052) .SECTION
                                        (0053) ;-----------------------------------------------------------------------------
                                        (0054) ;  FUNCTION NAME: PS2DigBuf_EnableInt
                                        (0055) ;
                                        (0056) ;  DESCRIPTION:
                                        (0057) ;     Enables the DigBuf's interrupt by setting the interrupt enable mask bit
                                        (0058) ;     associated with this User Module. This function has no effect until and
                                        (0059) ;     unless the global interrupts are enabled (for example by using the
                                        (0060) ;     macro M8C_EnableGInt).
                                        (0061) ;-----------------------------------------------------------------------------
                                        (0062) ;
                                        (0063) ;  ARGUMENTS:    None.
                                        (0064) ;  RETURNS:      Nothing.
                                        (0065) ;  SIDE EFFECTS:
                                        (0066) ;    The A and X registers may be modified by this or future implementations
                                        (0067) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0068) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0069) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0070) ;    functions.
                                        (0071) ;
                                        (0072)  PS2DigBuf_EnableInt:
                                        (0073) _PS2DigBuf_EnableInt:
                                        (0074)    RAM_PROLOGUE RAM_USE_CLASS_1   
                                        (0075)    PS2DigBuf_EnableInt_M
                                        (0076)    RAM_EPILOGUE RAM_USE_CLASS_1
0B45: 7F       RET                      (0077)    ret
0B46: 41 E1 EF AND   REG[0xE1],0xEF     
                                        (0078) 
                                        (0079) .ENDSECTION
                                        (0080) 
                                        (0081) .SECTION
                                        (0082) ;-----------------------------------------------------------------------------
                                        (0083) ;  FUNCTION NAME: PS2DigBuf_DisableInt
                                        (0084) ;
                                        (0085) ;  DESCRIPTION:
                                        (0086) ;     Disables the DigBuf's interrupt by clearing the interrupt enable mask bit
                                        (0087) ;     associated with this User Module. 
                                        (0088) ;-----------------------------------------------------------------------------
                                        (0089) ;
                                        (0090) ;  ARGUMENTS:    None.
                                        (0091) ;  RETURNS:      Nothing.
                                        (0092) ;  SIDE EFFECTS:
                                        (0093) ;    The A and X registers may be modified by this or future implementations
                                        (0094) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0095) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0096) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0097) ;    functions.
                                        (0098) ;
                                        (0099)  PS2DigBuf_DisableInt:
                                        (0100) _PS2DigBuf_DisableInt:
                                        (0101)    RAM_PROLOGUE RAM_USE_CLASS_1   
                                        (0102)    PS2DigBuf_DisableInt_M
                                        (0103)    RAM_EPILOGUE RAM_USE_CLASS_1
0B49: 7F       RET                      (0104)    ret
0B4A: 43 33 01 OR    REG[0x33],0x1      
                                        (0105) 
                                        (0106) .ENDSECTION
                                        (0107) 
                                        (0108) .SECTION
                                        (0109) ;-----------------------------------------------------------------------------
                                        (0110) ;  FUNCTION NAME: PS2DigBuf_Start
                                        (0111) ;
                                        (0112) ;  DESCRIPTION:
                                        (0113) ;     Starts the Digital Buffers within the block.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS:
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  PS2DigBuf_Start:
                                        (0126) _PS2DigBuf_Start:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    PS2DigBuf_Start_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
0B4D: 7F       RET                      (0130)    ret
0B4E: 41 33 FE AND   REG[0x33],0xFE     
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) .SECTION
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;  FUNCTION NAME: PS2DigBuf_Stop
                                        (0137) ;
                                        (0138) ;  DESCRIPTION:
                                        (0139) ;     Stops the Digital Buffers within the block. The outputs are driven low.
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141) ;
                                        (0142) ;  ARGUMENTS:    None
                                        (0143) ;  RETURNS:      Nothing
                                        (0144) ;  SIDE EFFECTS:
                                        (0145) ;    The A and X registers may be modified by this or future implementations
                                        (0146) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0147) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0148) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0149) ;    functions.
                                        (0150) ;
                                        (0151)  PS2DigBuf_Stop:
                                        (0152) _PS2DigBuf_Stop:
                                        (0153)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0154)    PS2DigBuf_Stop_M
                                        (0155)    RAM_EPILOGUE RAM_USE_CLASS_1
0B51: 7F       RET                      (0156)    ret
                                        (0157) 
                                        (0158) .ENDSECTION
                                        (0159) 
                                        (0160) 
                                        (0161) ; End of File PS2DigBuf.asm
                                        (0162) 
                                        (0163) 
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0B52: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0B53: 10       PUSH  X                  (0209)     push  X
0B54: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0B55: B0 04    JNZ   0x0B5A             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0B57: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0B58: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0B59: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0B5A: 90 44    CALL  LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
0B5C: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0B5D: 18       POP   A                  (0220)     pop   A
0B5E: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0B5F: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0B61: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0B62: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0B74: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0B75: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0B76: 67       ASR   A                  (0262)     asr   A
0B77: 67       ASR   A                  (0263)     asr   A
0B78: 67       ASR   A                  (0264)     asr   A
0B79: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0B7B: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
0B7D: 90 21    CALL  LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
0B7F: 18       POP   A                  (0268)     pop   A                            ; Restore value
0B80: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0B82: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0B84: 90 1A    CALL  LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0B86: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0B87: 4B       SWAP  A,X                (0305)     swap  A,X
0B88: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
0B8A: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0B8B: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0B8D: 7F       RET                      (0310)     ret
0B8E: 70 BF    AND   F,0xBF             
0B90: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0B92: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0B94: A0 06    JZ    0x0B9B             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0B96: 90 08    CALL  LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
0B98: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0B99: 8F F8    JMP   0x0B92             (0351)     jmp   .Loop_PrString               ; Go get next character
0B9B: 70 3F    AND   F,0x3F             
0B9D: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0B9F: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0BA0: 90 65    CALL  0x0C07             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0BA2: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0BA3: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0BA4: 67       ASR   A                  (0390)     asr   A
0BA5: 67       ASR   A                  (0391)     asr   A
0BA6: 67       ASR   A                  (0392)     asr   A
0BA7: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0BA9: 90 3B    CALL  0x0BE6             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0BAB: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0BAC: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0BAE: 40       NOP                      (0397)     nop
0BAF: 40       NOP                      (0398)     nop
0BB0: 40       NOP                      (0399)     nop
0BB1: 90 33    CALL  0x0BE6             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0BB3: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0BB4: 90 51    CALL  0x0C07             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0BB6: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0BB7: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0BB8: 67       ASR   A                  (0436)     asr   A
0BB9: 67       ASR   A                  (0437)     asr   A
0BBA: 67       ASR   A                  (0438)     asr   A
0BBB: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0BBD: 90 09    CALL  0x0BC8             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0BBF: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0BC0: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0BC2: 40       NOP                      (0443)     nop
0BC3: 40       NOP                      (0444)     nop
0BC4: 40       NOP                      (0445)     nop
0BC5: 90 01    CALL  0x0BC8             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0BC7: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0BC8: 08       PUSH  A                  (0477)     push  A
0BC9: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0BCC: 26 01 80 AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0x80(0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0BCF: 51 01    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0480)     mov   A,[Port_2_Data_SHADE]
0BD1: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0BD3: 18       POP   A                  (0483)     pop   A
0BD4: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0BD6: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0BD8: 2A 01    OR    A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0BDA: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0BDC: 53 01    MOV   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],A(0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0BDE: 40       NOP                      (0489)     nop
0BDF: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0BE1: 53 01    MOV   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],A(0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0BE3: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0BE5: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0BE6: 08       PUSH  A                  (0523)     push  A
0BE7: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0BEA: 26 01 80 AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0x80(0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0BED: 2E 01 20 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0x20(0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0BF0: 51 01    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0527)     mov   A,[Port_2_Data_SHADE]
0BF2: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0BF4: 18       POP   A                  (0530)     pop   A
0BF5: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0BF7: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0BF9: 2A 01    OR    A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0BFB: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0BFD: 53 01    MOV   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],A(0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0BFF: 40       NOP                      (0536)     NOP
0C00: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0C02: 53 01    MOV   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],A(0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0C04: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0C06: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0C07: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
0C08: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0C0B: 26 01 80 AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0x80(0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0C0E: 51 01    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0574)     mov   A,[Port_2_Data_SHADE]
0C10: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0C12: 26 02 F0 AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+2],0xF0(0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0C15: 51 02    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+2](0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0C17: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0C19: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0C1B: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0C1D: 2E 01 40 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0x40(0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0C20: 51 01    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0584)     mov   A,[Port_2_Data_SHADE]
0C22: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0C24: 40       NOP                      (0586)     NOP
                                        (0587) 
0C25: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0C26: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0C28: 2E 01 50 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0x50(0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0C2B: 51 01    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0593)     mov   A,[Port_2_Data_SHADE]
0C2D: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0C2F: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0C30: 40       NOP                      (0597)     nop
0C31: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0C33: 08       PUSH  A                  (0610)     push  A
0C34: 26 01 C0 AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0xC0(0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0C37: 51 01    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0612)     mov   A,[Port_2_Data_SHADE]
0C39: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0C3B: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0C3C: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0C3D: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0C3E: 2E 01 50 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0x50(0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0C41: 51 01    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0620)     mov   A,[Port_2_Data_SHADE]
0C43: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0C45: 40       NOP                      (0623)     nop
0C46: 40       NOP                      (0624)     nop
                                        (0625) 
0C47: 26 01 C0 AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1],0xC0(0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0C4A: 51 01    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+1](0627)     mov   A,[Port_2_Data_SHADE]
0C4C: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0C4E: 18       POP   A                  (0630)     pop   A
0C4F: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0C51: A0 04    JZ    0x0C56             (0633)     jz    .UNLOCK
0C53: 79       DEC   X                  (0634)     dec   X
0C54: BF D3    JNZ   0x0C28             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0C56: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0C57: 2E 02 7F OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+2],0x7F(0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0C5A: 51 02    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+2](0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0C5C: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0C5E: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0C60: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0C62: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0C63: 7F       RET                      (0646)     ret
0C64: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0C67: 26 02 80 AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+2],0x80(0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0C6A: 2E 02 7F OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+2],0x7F(0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0C6D: 26 03 80 AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+3],0x80(0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
0C70: 51 02    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+2](0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0C72: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0C74: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0C76: 51 03    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data+3](0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0C78: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0C7A: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0C7C: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0C7E: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
0C80: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0C82: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0C84: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0C86: 9F 40    CALL  0x0BC8             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0C88: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0C8A: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0C8C: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0C8E: 9F 38    CALL  0x0BC8             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
0C90: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0C92: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0C94: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0C96: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0C98: 9F 2E    CALL  0x0BC8             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0C9A: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0C9C: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0C9E: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0CA0: 9F 26    CALL  0x0BC8             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0CA2: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0CA4: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0CA6: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0CA8: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
0CAA: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0CAC: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0CAE: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0CB0: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
0CB2: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0CB4: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0CB6: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0CB8: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0CBA: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0CBC: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0CBE: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0CC0: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0CC2: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0CC4: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0CC6: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0CC8: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0CCA: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0CCC: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0CCE: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0CD0: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0CD2: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0CD7: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0CD9: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0CDA: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0CDC: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0CDD: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0CDF: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0CE0: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
0CE2: 70 3F    AND   F,0x3F             
0CE4: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0CE6: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0CE7: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0CE9: 78       DEC   A                  (0828)     dec   A
0CEA: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0CEC: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0CF5: 08       PUSH  A                  (0871)     push  A
0CF6: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0CF8: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0CFA: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0CFC: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0CFE: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0D00: D0 06    JNC   0x0D07             (0877)     jnc   .Delay50u_End
0D02: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0D04: 78       DEC   A                  (0880)     dec   A                              ; [4]
0D05: BF FE    JNZ   0x0D04             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0D07: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0D08: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: Z:\DOCUME~1\ECE_381\PS2BIT~1\PS2BIT~1\keyboard.c
(0001) //----------------------------------------------------------------------------
(0002) // XXX - Create the comments for this.
(0003) //
(0004) // B. Noble - 18 October 2010
(0005) //----------------------------------------------------------------------------
(0006) 
(0007) #include <m8c.h>        // part specific constants and macros
(0008) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0009) #include "PSoCGPIOINT.h"
(0010) #include "ps2.h"
(0011) #include "keyboard.h"
(0012) 
(0013) //// State names used in the KeyboardDecodeData() function
(0014) #define KBD_START_SEQ	0
(0015) #define KBD_BREAK_SEQ	1
(0016) #define KBD_E0_SEQ		2
(0017) #define	KBD_E0_F0_SEQ	3
(0018) #define KBD_PAUSE_A		4
(0019) #define KBD_PAUSE_B		5
(0020) #define	KBD_PAUSE_C		6
(0021) #define KBD_PAUSE_D		7
(0022) 
(0023) //// All external global variables (identified by names in LeadingCaps)
(0024) extern BYTE NumLock;
(0025) extern BYTE CapsLock;
(0026) extern BYTE ScrollLock;
(0027) extern BYTE ShiftDown;
(0028) extern BYTE CtrlDown;
(0029) extern BYTE AltDown;
(0030) extern BYTE PianoMode;
(0031) extern BYTE DeleteDown;
(0032) extern const unsigned char LEDBrightness[];
(0033) 
(0034) //----------------------------------------------------------------------------
(0035) // PS/2 Keyboard Scan Code Mapping Arrays
(0036) //
(0037) // NOTE: by making theses arrays constant (const) the compiler will place
(0038) // them in the PSoC's EEPROM so we don't waste RAM space on things that
(0039) // won't be changing.
(0040) //
(0041) // B. Noble - 18 October 2010
(0042) //----------------------------------------------------------------------------
(0043) 
(0044) //----------------------------------------------------------------------------
(0045) // Scan Code to printable ASCII mapping
(0046) //
(0047) // Defines an array variable that maps all single-byte scan codes to their
(0048) // respective ASCII values.
(0049) //
(0050) // The 1st column is the the scan code value.
(0051) // The 2nd column gives the ASCII scan code value with Shift pressed.
(0052) // The 3rd column gives the ASCII scan code value without Shift pressed.
(0053) //----------------------------------------------------------------------------
(0054) unsigned char const ShiftableScancode[ ][3] = {
(0055) 	'`',	'~',	0x0E,
(0056) 	'1',	'!',	0x16,
(0057) 	'2',	'@',	0x1E,
(0058) 	'3',	'#',	0x26,
(0059) 	'4',	'$',	0x25,
(0060) 	'5',	'%',	0x2E,
(0061) 	'6',	'^',	0x36,
(0062) 	'7',	'&',	0x3D,
(0063) 	'8',	'*',	0x3E,
(0064) 	'9',	'(',	0x46,
(0065) 	'0',	')',	0x45,
(0066) 	'-',	'_',	0x4E,
(0067) 	'=',	'+',	0X55,
(0068) 	'[',	'{',	0x54,
(0069) 	']',	'}',	0x5B,
(0070) 	'\\',	'|',	0x5D,
(0071) 	';',	':',	0x4C,
(0072) 	'\'',	'\"',	0x52,
(0073) 	',',	'<',	0x41,
(0074) 	'.',	'>',	0x49,
(0075) 	'/',	'?',	0x4A,
(0076) 	' ',	' ',	0x29, // Space
(0077) 	0x09,	0x09,	0x0D, // Tab
(0078) 	0x00,	0x00,	0x00  // Indicates end of this array while searching
(0079) };
(0080) 
(0081) //----------------------------------------------------------------------------
(0082) // Scan Code to printable alphabet ASCII mapping
(0083) //
(0084) // Defines an array variable that maps all single-byte scan codes to their
(0085) // respective ASCII values.
(0086) //
(0087) // The 1st column is the the scan code value.
(0088) // The 2nd column gives the ASCII scan code value with Shift pressed.
(0089) // The 3rd column gives the ASCII scan code value without Shift pressed.
(0090) //----------------------------------------------------------------------------
(0091) unsigned char const AlphabetScancode[ ][3] = {
(0092) 	'a',	'A',	0x1C,
(0093) 	'b',	'B',	0x32,
(0094) 	'c',	'C',	0x21,
(0095) 	'd',	'D',	0x23,
(0096) 	'e',	'E',	0x24,
(0097) 	'f',	'F',	0x2B,
(0098) 	'g',	'G',	0x34,
(0099) 	'h',	'H',	0x33,
(0100) 	'i',	'I',	0x43,
(0101) 	'j',	'J',	0x3B,
(0102) 	'k',	'K',	0x42,
(0103) 	'l',	'L',	0x4B,
(0104) 	'm',	'M',	0x3A,
(0105) 	'n',	'N',	0x31,
(0106) 	'o',	'O',	0x44,
(0107) 	'p',	'P',	0x4D,
(0108) 	'q',	'Q',	0x15,
(0109) 	'r',	'R',	0x2D,
(0110) 	's',	'S',	0x1B,
(0111) 	't',	'T',	0x2C,
(0112) 	'u',	'U',	0x3C,
(0113) 	'v',	'V',	0x2A,
(0114) 	'w',	'W',	0x1D,
(0115) 	'x',	'X',	0x22,
(0116) 	'y',	'Y',	0x35,
(0117) 	'z',	'Z',	0x1A,
(0118) 	0x00,	0x00,	0x00  // Indicates end of this array while searching
(0119) };
(0120) 
(0121) //----------------------------------------------------------------------------
(0122) // Scan Code to control character ASCII mapping
(0123) //
(0124) // Defines an array variable that maps all single-byte scan codes to their
(0125) // respective ASCII values.
(0126) //
(0127) // The 1st column is the the scan code value.
(0128) // The 2nd column gives the ASCII scan code value with Shift pressed.
(0129) // The 3rd column gives the ASCII scan code value without Shift pressed.
(0130) //----------------------------------------------------------------------------
(0131) unsigned char const ControlScancode[ ][2] = {
(0132) 	0x01,	0x1C, // ^A, SOH
(0133) 	0x02,	0x32, // ^B, STX
(0134) 	0x03,	0x21, // ^C, ETX
(0135) 	0x04,	0x23, // ^D, EOT
(0136) 	0x05,	0x24, // ^E, ENQ
(0137) 	0x06,	0x2B, // ^F, ACK
(0138) 	0x07,	0x34, // ^G, BEL
(0139) 	0x08,	0x33, // ^H, BS
(0140) 	0x09,	0x43, // ^I, HT
(0141) 	0x0A,	0x3B, // ^J, NL
(0142) 	0x0B,	0x42, // ^K, VT
(0143) 	0x0C,	0x4B, // ^L, NP
(0144) 	0x0D,	0x3A, // ^M, CR
(0145) 	0x0E,	0x31, // ^N, SO
(0146) 	0x0F,	0x44, // ^O, SI
(0147) 	0x10,	0x4D, // ^P, DLE
(0148) 	0x11,	0x15, // ^Q, DC1
(0149) 	0x12,	0x2D, // ^R, DC2
(0150) 	0x13,	0x1B, // ^S, DC3
(0151) 	0x14,	0x2C, // ^T, DC4
(0152) 	0x15,	0x3C, // ^U, NAK
(0153) 	0x16,	0x2A, // ^V, SYN
(0154) 	0x17,	0x1D, // ^W, ETB
(0155) 	0x18,	0x22, // ^X, CAN
(0156) 	0x19,	0x35, // ^Y, EM
(0157) 	0x1A,	0x1A, // ^Z, SUB
(0158) 	0x1B,	0x54, // ^[, ESC
(0159) 	0x1C,	0x5D, // ^\, FS
(0160) 	0x1D,	0x5B, // ^], GS
(0161) 	0x1E,	0x36, // ^^, RS
(0162) 	0x1F,	0x4E, // ^_, US
(0163) 	0x00,	0x00  // Indicates end of this array while searching
(0164) };
(0165) 
(0166) //----------------------------------------------------------------------------
(0167) // Scan Code to control character ASCII mapping
(0168) //
(0169) // Defines an array variable that maps all single-byte scan codes to their
(0170) // respective ASCII values.
(0171) //
(0172) // The 1st column is the the scan code value.
(0173) // The 2nd column gives the ASCII scan code value with Shift pressed.
(0174) //----------------------------------------------------------------------------
(0175) unsigned char const KeypadScancode[ ][2] = {
(0176) 	'0',	0x70,
(0177) 	'1',	0x69,
(0178) 	'2',	0x72,
(0179) 	'3',	0x7A,
(0180) 	'4',	0x6B,
(0181) 	'5',	0x73,
(0182) 	'6',	0x74,
(0183) 	'7',	0x6C,
(0184) 	'8',	0x75,
(0185) 	'9',	0x7D,
(0186) 	'.',	0x71,
(0187) 	0x00,	0x00  // Indicates end of this array while searching
(0188) };
(0189) 
(0190) //----------------------------------------------------------------------------
(0191) // Scan Code to 3-octave diatonic musical scale.
(0192) //
(0193) // Defines an array variable that maps all single-byte scan codes to their
(0194) // respective period and pulse widths for a 16-bit PWM User Module utilizing
(0195) // an 8MHz clock .
(0196) //
(0197) // The 1st column is the the scan code value.
(0198) // The 2nd column gives the 16-bit PWM Period.
(0199) // The 3rd column gives the 16-bit PWM Pulse Width.
(0200) //----------------------------------------------------------------------------
(0201) unsigned int const PianoScancode[ ][3] = {
(0202) 	//// Lower Octave
(0203) 	0x1A,	61155,	30577,	// 'z' C3 Low C
(0204) 	0x22,	54483,	27241,	// 'x' D3
(0205) 	0x21,	48539,	24269,	// 'c' E3
(0206) 	0x2A,	45814,	22907,	// 'v' F3
(0207) 	0x32,	40816,	20407,	// 'b' G3
(0208) 	0x31,	36363,	18181,	// 'n' A3
(0209) 	0x3A,	32395,	16197,	// 'm' B3
(0210) 	0x41,	30577,	15288,	// ',' C4 Middle C
(0211) 	//// Middle Octave
(0212) 	0x1C,	30577,	15288,	// 'a' C4 Middle C
(0213) 	0x1B,	27241,	13620,	// 's' D4
(0214) 	0x23,	24269,	12134,	// 'd' E4
(0215) 	0x2B,	22907,	11453,	// 'f' F4
(0216) 	0x34,	20407,	10203,	// 'g' G4
(0217) 	0x33,	18181,	9090,	// 'h' A4
(0218) 	0x3B,	16197,	8098,	// 'j' B4
(0219) 	0x42,	15288,	7644,	// 'k' C5 Tenor C
(0220) 	//// Tenor Octave
(0221) 	0x15,	15288,	7644,	// 'q' C5 Tenor C
(0222) 	0x1D,	13620,	6809,	// 'w' D5
(0223) 	0x24,	12134,	6066,	// 'e' E5
(0224) 	0x2D,	11453,	5726,	// 'r' F5
(0225) 	0x2C,	10203,	5101,	// 't' G5
(0226) 	0x35,	9090,	4544,	// 'y' A5
(0227) 	0x3C,	8098,	4049,	// 'u' B5
(0228) 	0x43,	7644,	3821,	// 'i' C6 Soprano C
(0229) 	//// End of array
(0230) 	0x00,	0x00,	0x00	// Indicates end of this array while searching
(0231) };
(0232) 
(0233) //-----------------------------------------------------------------------------
(0234) // Software state machine to decode the PS/2 keyboard scan codes into
(0235) // meaningful actions. See the state diagram in the lab description.
(0236) //
(0237) // XXX - The shift keys have a special response when they are held down
(0238) //       and one of the "gray" (Insert, Delete, Pg Up, Pg Dn, Home, End, etc.)
(0239) //       keys are pressed.
(0240) //       As soon as a gray key is pressed, the shift key pressed gets an E0F0 break
(0241) //       sequence, followed by the gray key (autorepeated if necessary).
(0242) //       When the gray key is released, the keyboard generates an E0 followed
(0243) //       by the scancode for the shift key still down.
(0244) //       Example: This is what happens when Left Shift then Page Down
(0245) //       are pressed, followed by Page Down and then Left Shift being released
(0246) //       12 E0 F0 12 E0 7A E0 F0 7A E0 12 F0 12
(0247) //       Note: This behavior is only true when Num Lock LED is off.
(0248) //       When Num Lock LED is on, they Shift Key behaves normally.
(0249) //
(0250) // XXX - Document PRNT_SCRN's weirdness: PRNT_SCRN's sequence "E0 12" only occurs if no other key is pressed
(0251) // PRNT_SCRN's sequence "E0 F0 12" occurs either at the end of the
(0252) // PRNT_SCRN sequence if there were no other keys pressed -OR- if
(0253) // another key was pressed while PRNT_SCRN was held down.
(0254) // PRNT_SCRN's "E0 12" is basically a fake-shift
(0255) //
(0256) // Note: This function assumes all keyboard-to-host commands have been handled!
(0257) //-----------------------------------------------------------------------------
(0258) BYTE KeyboardDecodeData(BYTE scancode)
(0259) {
__UserModules_end|_KeyboardDecodeData|__text_start|_KeyboardDecodeData:
  codetype             --> X+0
  scancode             --> X-4
    0D09: 10       PUSH  X
    0D0A: 4F       MOV   X,SP
    0D0B: 38 03    ADD   SP,0x3
(0260) 	static BYTE state = 0;
(0261) 	BYTE codetype = 0;
    0D0D: 56 00 00 MOV   [X+0],0x0
(0262) 	
(0263) 	switch(state) {
    0D10: 62 D0 00 MOV   REG[0xD0],0x0
    0D13: 51 71    MOV   A,[DeleteDown+3]
    0D15: 54 02    MOV   [X+2],A
    0D17: 56 01 00 MOV   [X+1],0x0
    0D1A: 3D 01 00 CMP   [X+1],0x0
    0D1D: B0 06    JNZ   0x0D24
    0D1F: 3D 02 00 CMP   [X+2],0x0
    0D22: A0 49    JZ    0x0D6C
    0D24: 3D 01 00 CMP   [X+1],0x0
    0D27: B0 06    JNZ   0x0D2E
    0D29: 3D 02 01 CMP   [X+2],0x1
    0D2C: A0 6B    JZ    0x0D98
    0D2E: 3D 01 00 CMP   [X+1],0x0
    0D31: B0 06    JNZ   0x0D38
    0D33: 3D 02 02 CMP   [X+2],0x2
    0D36: A0 6C    JZ    0x0DA3
    0D38: 3D 01 00 CMP   [X+1],0x0
    0D3B: B0 06    JNZ   0x0D42
    0D3D: 3D 02 03 CMP   [X+2],0x3
    0D40: A0 89    JZ    0x0DCA
    0D42: 3D 01 00 CMP   [X+1],0x0
    0D45: B0 06    JNZ   0x0D4C
    0D47: 3D 02 04 CMP   [X+2],0x4
    0D4A: A0 99    JZ    0x0DE4
    0D4C: 3D 01 00 CMP   [X+1],0x0
    0D4F: B0 06    JNZ   0x0D56
    0D51: 3D 02 05 CMP   [X+2],0x5
    0D54: A0 B1    JZ    0x0E06
    0D56: 3D 01 00 CMP   [X+1],0x0
    0D59: B0 06    JNZ   0x0D60
    0D5B: 3D 02 06 CMP   [X+2],0x6
    0D5E: A0 C9    JZ    0x0E28
    0D60: 3D 01 00 CMP   [X+1],0x0
    0D63: B0 06    JNZ   0x0D6A
    0D65: 3D 02 07 CMP   [X+2],0x7
    0D68: A0 D4    JZ    0x0E3D
    0D6A: 80 ED    JMP   0x0E58
(0264) 	case KBD_START_SEQ:
(0265) 		if (scancode == 0xF0) {
    0D6C: 3D FC F0 CMP   [X-4],0xF0
    0D6F: B0 09    JNZ   0x0D79
(0266) 			state = KBD_BREAK_SEQ;
    0D71: 62 D0 00 MOV   REG[0xD0],0x0
    0D74: 55 71 01 MOV   [DeleteDown+3],0x1
(0267) 			break;
    0D77: 80 E0    JMP   0x0E58
(0268) 		}
(0269) 		if (scancode == 0xE0) {
    0D79: 3D FC E0 CMP   [X-4],0xE0
    0D7C: B0 09    JNZ   0x0D86
(0270) 			state = KBD_E0_SEQ;
    0D7E: 62 D0 00 MOV   REG[0xD0],0x0
    0D81: 55 71 02 MOV   [DeleteDown+3],0x2
(0271) 			break;
    0D84: 80 D3    JMP   0x0E58
(0272) 		}
(0273) 		if (scancode == 0xE1) {
    0D86: 3D FC E1 CMP   [X-4],0xE1
    0D89: B0 09    JNZ   0x0D93
(0274) 			state = KBD_PAUSE_A;
    0D8B: 62 D0 00 MOV   REG[0xD0],0x0
    0D8E: 55 71 04 MOV   [DeleteDown+3],0x4
(0275) 			break;
    0D91: 80 C6    JMP   0x0E58
(0276) 		}
(0277) 		codetype = KEY_MAKE;
    0D93: 56 00 01 MOV   [X+0],0x1
(0278) 		break;
    0D96: 80 C1    JMP   0x0E58
(0279) 	case KBD_BREAK_SEQ:
(0280) 		state = KBD_START_SEQ;
    0D98: 62 D0 00 MOV   REG[0xD0],0x0
    0D9B: 55 71 00 MOV   [DeleteDown+3],0x0
(0281) 		codetype = KEY_BREAK;
    0D9E: 56 00 02 MOV   [X+0],0x2
(0282) 		break;
    0DA1: 80 B6    JMP   0x0E58
(0283) 	case KBD_E0_SEQ:
(0284) 		if (scancode == 0xF0) {
    0DA3: 3D FC F0 CMP   [X-4],0xF0
    0DA6: B0 09    JNZ   0x0DB0
(0285) 			state = KBD_E0_F0_SEQ;
    0DA8: 62 D0 00 MOV   REG[0xD0],0x0
    0DAB: 55 71 03 MOV   [DeleteDown+3],0x3
(0286) 			break;
    0DAE: 80 A9    JMP   0x0E58
(0287) 		}
(0288) 		state = KBD_START_SEQ;
    0DB0: 62 D0 00 MOV   REG[0xD0],0x0
    0DB3: 55 71 00 MOV   [DeleteDown+3],0x0
(0289) 		// See if this is a fake-shift MAKE.
(0290) 		if ((scancode == 0x12)||(scancode == 0x59)) {
    0DB6: 3D FC 12 CMP   [X-4],0x12
    0DB9: A0 06    JZ    0x0DC0
    0DBB: 3D FC 59 CMP   [X-4],0x59
    0DBE: B0 06    JNZ   0x0DC5
(0291) 				codetype = KEY_FAKE_SHIFT|KEY_MAKE;
    0DC0: 56 00 11 MOV   [X+0],0x11
(0292) 				break;
    0DC3: 80 94    JMP   0x0E58
(0293) 		}
(0294) 		codetype = KEY_E0|KEY_MAKE;
    0DC5: 56 00 05 MOV   [X+0],0x5
(0295) 		break;
    0DC8: 80 8F    JMP   0x0E58
(0296) 	case KBD_E0_F0_SEQ:
(0297) 		state = KBD_START_SEQ;
    0DCA: 62 D0 00 MOV   REG[0xD0],0x0
    0DCD: 55 71 00 MOV   [DeleteDown+3],0x0
(0298) 		// See if this is a fake-shift BREAK.
(0299) 		if ((scancode == 0x12)||(scancode == 0x59)) {
    0DD0: 3D FC 12 CMP   [X-4],0x12
    0DD3: A0 06    JZ    0x0DDA
    0DD5: 3D FC 59 CMP   [X-4],0x59
    0DD8: B0 06    JNZ   0x0DDF
(0300) 			codetype = KEY_FAKE_SHIFT|KEY_BREAK;
    0DDA: 56 00 12 MOV   [X+0],0x12
(0301) 			break;
    0DDD: 80 7A    JMP   0x0E58
(0302) 		}
(0303) 		codetype = KEY_E0|KEY_BREAK;
    0DDF: 56 00 06 MOV   [X+0],0x6
(0304) 		break;
    0DE2: 80 75    JMP   0x0E58
(0305) 	case KBD_PAUSE_A:
(0306) 		if (scancode == 0x14) {
    0DE4: 3D FC 14 CMP   [X-4],0x14
    0DE7: B0 09    JNZ   0x0DF1
(0307) 			state = KBD_PAUSE_B;
    0DE9: 62 D0 00 MOV   REG[0xD0],0x0
    0DEC: 55 71 05 MOV   [DeleteDown+3],0x5
(0308) 			break;
    0DEF: 80 68    JMP   0x0E58
(0309) 		}
(0310) 		if (scancode == 0xF0) {
    0DF1: 3D FC F0 CMP   [X-4],0xF0
    0DF4: B0 09    JNZ   0x0DFE
(0311) 			state = KBD_PAUSE_D;
    0DF6: 62 D0 00 MOV   REG[0xD0],0x0
    0DF9: 55 71 07 MOV   [DeleteDown+3],0x7
(0312) 			break;
    0DFC: 80 5B    JMP   0x0E58
(0313) 		}
(0314) 		state = KBD_START_SEQ;
    0DFE: 62 D0 00 MOV   REG[0xD0],0x0
    0E01: 55 71 00 MOV   [DeleteDown+3],0x0
(0315) 		break;
    0E04: 80 53    JMP   0x0E58
(0316) 	case KBD_PAUSE_B:
(0317) 		if (scancode == 0x77) {
    0E06: 3D FC 77 CMP   [X-4],0x77
    0E09: B0 09    JNZ   0x0E13
(0318) 			state = KBD_PAUSE_C;
    0E0B: 62 D0 00 MOV   REG[0xD0],0x0
    0E0E: 55 71 06 MOV   [DeleteDown+3],0x6
(0319) 			break;
    0E11: 80 46    JMP   0x0E58
(0320) 		}
(0321) 		if (scancode == 0xF0) {
    0E13: 3D FC F0 CMP   [X-4],0xF0
    0E16: B0 09    JNZ   0x0E20
(0322) 			state = KBD_PAUSE_D;
    0E18: 62 D0 00 MOV   REG[0xD0],0x0
    0E1B: 55 71 07 MOV   [DeleteDown+3],0x7
(0323) 			break;
    0E1E: 80 39    JMP   0x0E58
(0324) 		}
(0325) 		state = KBD_START_SEQ;
    0E20: 62 D0 00 MOV   REG[0xD0],0x0
    0E23: 55 71 00 MOV   [DeleteDown+3],0x0
(0326) 		break;
    0E26: 80 31    JMP   0x0E58
(0327) 	case KBD_PAUSE_C:
(0328) 		if (scancode == 0xE1) {
    0E28: 3D FC E1 CMP   [X-4],0xE1
    0E2B: B0 09    JNZ   0x0E35
(0329) 			state = KBD_PAUSE_A;
    0E2D: 62 D0 00 MOV   REG[0xD0],0x0
    0E30: 55 71 04 MOV   [DeleteDown+3],0x4
(0330) 			break;
    0E33: 80 24    JMP   0x0E58
(0331) 		}
(0332) 		state = KBD_START_SEQ;
    0E35: 62 D0 00 MOV   REG[0xD0],0x0
    0E38: 55 71 00 MOV   [DeleteDown+3],0x0
(0333) 		break;
    0E3B: 80 1C    JMP   0x0E58
(0334) 	case KBD_PAUSE_D:
(0335) 		if (scancode == 0x14) {
    0E3D: 3D FC 14 CMP   [X-4],0x14
    0E40: B0 09    JNZ   0x0E4A
(0336) 			state = KBD_PAUSE_B;
    0E42: 62 D0 00 MOV   REG[0xD0],0x0
    0E45: 55 71 05 MOV   [DeleteDown+3],0x5
(0337) 			break;
    0E48: 80 0F    JMP   0x0E58
(0338) 		}
(0339) 		if (scancode == 0x77) {
    0E4A: 3D FC 77 CMP   [X-4],0x77
    0E4D: B0 04    JNZ   0x0E52
(0340) 			codetype = KEY_PAUSE;
    0E4F: 56 00 08 MOV   [X+0],0x8
(0341) 		}
(0342) 		state = KBD_START_SEQ;
    0E52: 62 D0 00 MOV   REG[0xD0],0x0
    0E55: 55 71 00 MOV   [DeleteDown+3],0x0
(0343) 		break;
(0344) 	}
(0345) 	return(codetype);
    0E58: 52 00    MOV   A,[X+0]
    0E5A: 62 D0 00 MOV   REG[0xD0],0x0
    0E5D: 38 FD    ADD   SP,0xFD
    0E5F: 20       POP   X
    0E60: 7F       RET   
(0346) }
(0347) 
(0348) BYTE KeyboardTotalPressed(BYTE scancode, BYTE codetype)
(0349) {
_KeyboardTotalPressed:
  found                --> X+2
  j                    --> X+1
  i                    --> X+0
  codetype             --> X-5
  scancode             --> X-4
    0E61: 10       PUSH  X
    0E62: 4F       MOV   X,SP
    0E63: 38 03    ADD   SP,0x3
(0350) 	static BYTE keys[12];
(0351) 	static BYTE types[12];
(0352) 	static BYTE pressed = 0;
(0353) 	BYTE i,j;
(0354) 	BYTE found=0;
    0E65: 56 02 00 MOV   [X+2],0x0
(0355) 
(0356) 	//// If this is a fake-shift it is not an actual key change.
(0357) 	if (codetype & KEY_FAKE_SHIFT) {
    0E68: 48 FB 10 TST   [X-5],0x10
    0E6B: A0 0B    JZ    0x0E77
(0358) 		return(pressed);
    0E6D: 62 D0 00 MOV   REG[0xD0],0x0
    0E70: 51 70    MOV   A,[DeleteDown+2]
    0E72: 62 D0 00 MOV   REG[0xD0],0x0
    0E75: 81 B9    JMP   0x102F
(0359) 	}
(0360) 	//// If this is the Pause key, it won't change the number of keys held down.
(0361) 	if (codetype & KEY_PAUSE) {
    0E77: 48 FB 08 TST   [X-5],0x8
    0E7A: A0 0B    JZ    0x0E86
(0362) 		return(pressed);
    0E7C: 62 D0 00 MOV   REG[0xD0],0x0
    0E7F: 51 70    MOV   A,[DeleteDown+2]
    0E81: 62 D0 00 MOV   REG[0xD0],0x0
    0E84: 81 AA    JMP   0x102F
(0363) 	}
(0364) 	//// If this is a key-make, check if it is on the list and add it if not.
(0365) 	if (codetype & KEY_MAKE) {
    0E86: 48 FB 01 TST   [X-5],0x1
    0E89: A0 DD    JZ    0x0F67
(0366) 		if (pressed == 0) {
    0E8B: 62 D0 00 MOV   REG[0xD0],0x0
    0E8E: 3C 70 00 CMP   [DeleteDown+2],0x0
    0E91: B0 42    JNZ   0x0ED4
(0367) 			keys[pressed] = scancode;
    0E93: 51 70    MOV   A,[DeleteDown+2]
    0E95: 62 D0 00 MOV   REG[0xD0],0x0
    0E98: 53 21    MOV   [__r1],A
    0E9A: 55 22 00 MOV   [__r0],0x0
    0E9D: 06 21 23 ADD   [__r1],0x23
    0EA0: 0E 22 00 ADC   [__r0],0x0
    0EA3: 51 22    MOV   A,[__r0]
    0EA5: 60 D5    MOV   REG[0xD5],A
    0EA7: 52 FC    MOV   A,[X-4]
    0EA9: 3F 21    MVI   [__r1],A
(0368) 			types[pressed] = codetype & KEY_E0;
    0EAB: 52 FB    MOV   A,[X-5]
    0EAD: 21 04    AND   A,0x4
    0EAF: 53 22    MOV   [__r0],A
    0EB1: 62 D0 00 MOV   REG[0xD0],0x0
    0EB4: 51 70    MOV   A,[DeleteDown+2]
    0EB6: 62 D0 00 MOV   REG[0xD0],0x0
    0EB9: 53 1F    MOV   [__r3],A
    0EBB: 55 20 00 MOV   [__r2],0x0
    0EBE: 06 1F 2F ADD   [__r3],0x2F
    0EC1: 0E 20 00 ADC   [__r2],0x0
    0EC4: 51 20    MOV   A,[__r2]
    0EC6: 60 D5    MOV   REG[0xD5],A
    0EC8: 51 22    MOV   A,[__r0]
    0ECA: 3F 1F    MVI   [__r3],A
(0369) 			pressed = 1;
    0ECC: 62 D0 00 MOV   REG[0xD0],0x0
    0ECF: 55 70 01 MOV   [DeleteDown+2],0x1
(0370) 		}
    0ED2: 80 94    JMP   0x0F67
(0371) 		else {
(0372) 			found = 0;
    0ED4: 56 02 00 MOV   [X+2],0x0
(0373) 			for (i=0 ; i<pressed ; i++) {
    0ED7: 56 00 00 MOV   [X+0],0x0
    0EDA: 80 3D    JMP   0x0F18
(0374) 				if (keys[i] == scancode) {
    0EDC: 62 D0 00 MOV   REG[0xD0],0x0
    0EDF: 52 00    MOV   A,[X+0]
    0EE1: 53 21    MOV   [__r1],A
    0EE3: 55 22 00 MOV   [__r0],0x0
    0EE6: 06 21 23 ADD   [__r1],0x23
    0EE9: 0E 22 00 ADC   [__r0],0x0
    0EEC: 51 22    MOV   A,[__r0]
    0EEE: 60 D4    MOV   REG[0xD4],A
    0EF0: 3E 21    MVI   A,[__r1]
    0EF2: 3B FC    CMP   A,[X-4]
    0EF4: B0 21    JNZ   0x0F16
(0375) 					if (types[i] == (codetype & KEY_E0)) {
    0EF6: 52 FB    MOV   A,[X-5]
    0EF8: 21 04    AND   A,0x4
    0EFA: 53 22    MOV   [__r0],A
    0EFC: 52 00    MOV   A,[X+0]
    0EFE: 53 1F    MOV   [__r3],A
    0F00: 55 20 00 MOV   [__r2],0x0
    0F03: 06 1F 2F ADD   [__r3],0x2F
    0F06: 0E 20 00 ADC   [__r2],0x0
    0F09: 51 20    MOV   A,[__r2]
    0F0B: 60 D4    MOV   REG[0xD4],A
    0F0D: 3E 1F    MVI   A,[__r3]
    0F0F: 3A 22    CMP   A,[__r0]
    0F11: B0 04    JNZ   0x0F16
(0376) 						found=1;
    0F13: 56 02 01 MOV   [X+2],0x1
(0377) 					}
(0378) 				}
(0379) 			}
    0F16: 77 00    INC   [X+0]
    0F18: 62 D0 00 MOV   REG[0xD0],0x0
    0F1B: 52 00    MOV   A,[X+0]
    0F1D: 3A 70    CMP   A,[DeleteDown+2]
    0F1F: CF BC    JC    0x0EDC
(0380) 			if (found==0) {
    0F21: 3D 02 00 CMP   [X+2],0x0
    0F24: B0 42    JNZ   0x0F67
(0381) 				keys[pressed] = scancode;
    0F26: 62 D0 00 MOV   REG[0xD0],0x0
    0F29: 51 70    MOV   A,[DeleteDown+2]
    0F2B: 62 D0 00 MOV   REG[0xD0],0x0
    0F2E: 53 21    MOV   [__r1],A
    0F30: 55 22 00 MOV   [__r0],0x0
    0F33: 06 21 23 ADD   [__r1],0x23
    0F36: 0E 22 00 ADC   [__r0],0x0
    0F39: 51 22    MOV   A,[__r0]
    0F3B: 60 D5    MOV   REG[0xD5],A
    0F3D: 52 FC    MOV   A,[X-4]
    0F3F: 3F 21    MVI   [__r1],A
(0382) 				types[pressed] = codetype & KEY_E0;
    0F41: 52 FB    MOV   A,[X-5]
    0F43: 21 04    AND   A,0x4
    0F45: 53 22    MOV   [__r0],A
    0F47: 62 D0 00 MOV   REG[0xD0],0x0
    0F4A: 51 70    MOV   A,[DeleteDown+2]
    0F4C: 62 D0 00 MOV   REG[0xD0],0x0
    0F4F: 53 1F    MOV   [__r3],A
    0F51: 55 20 00 MOV   [__r2],0x0
    0F54: 06 1F 2F ADD   [__r3],0x2F
    0F57: 0E 20 00 ADC   [__r2],0x0
    0F5A: 51 20    MOV   A,[__r2]
    0F5C: 60 D5    MOV   REG[0xD5],A
    0F5E: 51 22    MOV   A,[__r0]
    0F60: 3F 1F    MVI   [__r3],A
(0383) 				pressed++;
    0F62: 62 D0 00 MOV   REG[0xD0],0x0
    0F65: 76 70    INC   [DeleteDown+2]
(0384) 			}
(0385) 		}
(0386) 	}
(0387) 	//// If this is a key-break:
(0388) 	//// "pressed" should never be zero when we receive a KEY_BREAK
(0389) 	//// but, since some keyboards may have debouncing problems which
(0390) 	//// can generate multiple breaks, we will check anyway.
(0391) 	if (codetype & KEY_BREAK) {
    0F67: 48 FB 02 TST   [X-5],0x2
    0F6A: A0 BC    JZ    0x1027
(0392) 		if (!pressed) {
    0F6C: 62 D0 00 MOV   REG[0xD0],0x0
    0F6F: 3C 70 00 CMP   [DeleteDown+2],0x0
    0F72: B0 08    JNZ   0x0F7B
(0393) 			return(0);
    0F74: 62 D0 00 MOV   REG[0xD0],0x0
    0F77: 50 00    MOV   A,0x0
    0F79: 80 B5    JMP   0x102F
(0394) 		}
(0395) 		// Remove the key from the list
(0396) 		for (i=0,j=0 ; i<pressed ; i++) {
    0F7B: 56 00 00 MOV   [X+0],0x0
    0F7E: 56 01 00 MOV   [X+1],0x0
    0F81: 80 95    JMP   0x1017
(0397) 			// if the key & type matches, skip it
(0398) 			if (keys[i] == scancode) {
    0F83: 62 D0 00 MOV   REG[0xD0],0x0
    0F86: 52 00    MOV   A,[X+0]
    0F88: 53 21    MOV   [__r1],A
    0F8A: 55 22 00 MOV   [__r0],0x0
    0F8D: 06 21 23 ADD   [__r1],0x23
    0F90: 0E 22 00 ADC   [__r0],0x0
    0F93: 51 22    MOV   A,[__r0]
    0F95: 60 D4    MOV   REG[0xD4],A
    0F97: 3E 21    MVI   A,[__r1]
    0F99: 3B FC    CMP   A,[X-4]
    0F9B: B0 20    JNZ   0x0FBC
(0399) 				if (types[i] == (codetype & KEY_E0)) {
    0F9D: 52 FB    MOV   A,[X-5]
    0F9F: 21 04    AND   A,0x4
    0FA1: 53 22    MOV   [__r0],A
    0FA3: 52 00    MOV   A,[X+0]
    0FA5: 53 1F    MOV   [__r3],A
    0FA7: 55 20 00 MOV   [__r2],0x0
    0FAA: 06 1F 2F ADD   [__r3],0x2F
    0FAD: 0E 20 00 ADC   [__r2],0x0
    0FB0: 51 20    MOV   A,[__r2]
    0FB2: 60 D4    MOV   REG[0xD4],A
    0FB4: 3E 1F    MVI   A,[__r3]
    0FB6: 3A 22    CMP   A,[__r0]
    0FB8: B0 03    JNZ   0x0FBC
(0400) 					continue;
    0FBA: 80 5A    JMP   0x1015
(0401) 				}
(0402) 			}
(0403) 			keys[j]=keys[i];
    0FBC: 62 D0 00 MOV   REG[0xD0],0x0
    0FBF: 52 00    MOV   A,[X+0]
    0FC1: 53 21    MOV   [__r1],A
    0FC3: 55 22 00 MOV   [__r0],0x0
    0FC6: 06 21 23 ADD   [__r1],0x23
    0FC9: 0E 22 00 ADC   [__r0],0x0
    0FCC: 51 22    MOV   A,[__r0]
    0FCE: 60 D4    MOV   REG[0xD4],A
    0FD0: 3E 21    MVI   A,[__r1]
    0FD2: 53 22    MOV   [__r0],A
    0FD4: 52 01    MOV   A,[X+1]
    0FD6: 53 1F    MOV   [__r3],A
    0FD8: 55 20 00 MOV   [__r2],0x0
    0FDB: 06 1F 23 ADD   [__r3],0x23
    0FDE: 0E 20 00 ADC   [__r2],0x0
    0FE1: 51 20    MOV   A,[__r2]
    0FE3: 60 D5    MOV   REG[0xD5],A
    0FE5: 51 22    MOV   A,[__r0]
    0FE7: 3F 1F    MVI   [__r3],A
(0404) 			types[j]=types[i];
    0FE9: 52 00    MOV   A,[X+0]
    0FEB: 53 21    MOV   [__r1],A
    0FED: 55 22 00 MOV   [__r0],0x0
    0FF0: 06 21 2F ADD   [__r1],0x2F
    0FF3: 0E 22 00 ADC   [__r0],0x0
    0FF6: 51 22    MOV   A,[__r0]
    0FF8: 60 D4    MOV   REG[0xD4],A
    0FFA: 3E 21    MVI   A,[__r1]
    0FFC: 53 22    MOV   [__r0],A
    0FFE: 52 01    MOV   A,[X+1]
    1000: 53 1F    MOV   [__r3],A
    1002: 55 20 00 MOV   [__r2],0x0
    1005: 06 1F 2F ADD   [__r3],0x2F
    1008: 0E 20 00 ADC   [__r2],0x0
    100B: 51 20    MOV   A,[__r2]
    100D: 60 D5    MOV   REG[0xD5],A
    100F: 51 22    MOV   A,[__r0]
    1011: 3F 1F    MVI   [__r3],A
(0405) 			j++;
    1013: 77 01    INC   [X+1]
(0406) 		}
    1015: 77 00    INC   [X+0]
    1017: 62 D0 00 MOV   REG[0xD0],0x0
    101A: 52 00    MOV   A,[X+0]
    101C: 3A 70    CMP   A,[DeleteDown+2]
    101E: CF 64    JC    0x0F83
(0407) 		pressed = j;
    1020: 52 01    MOV   A,[X+1]
    1022: 62 D0 00 MOV   REG[0xD0],0x0
    1025: 53 70    MOV   [DeleteDown+2],A
(0408) 	}
(0409) 	///////////////////////////////////////////////////////////////////////////
(0410) 	return(pressed);
    1027: 62 D0 00 MOV   REG[0xD0],0x0
    102A: 51 70    MOV   A,[DeleteDown+2]
    102C: 62 D0 00 MOV   REG[0xD0],0x0
    102F: 38 FD    ADD   SP,0xFD
    1031: 20       POP   X
    1032: 7F       RET   
(0411) }
(0412) 
(0413) char KeyboardToASCII(BYTE scancode, BYTE codetype)
(0414) {
_KeyboardToASCII:
  i                    --> X+0
  codetype             --> X-5
  scancode             --> X-4
    1033: 10       PUSH  X
    1034: 4F       MOV   X,SP
    1035: 38 02    ADD   SP,0x2
(0415) 	int i;
(0416) 	
(0417) 	static int print1 = 0;                                                                      // we added this
(0418) 	static int count = 0;																		// we added this
(0419) 	static int print2 = 0;																	    // we added this
(0420) 	static int rst = 0;
(0421) 
(0422) 	//// Ignore fake-shifts
(0423) 	if (codetype & KEY_FAKE_SHIFT) {
    1037: 48 FB 10 TST   [X-5],0x10
    103A: A0 08    JZ    0x1043
(0424) 		return(0);
    103C: 62 D0 00 MOV   REG[0xD0],0x0
    103F: 50 00    MOV   A,0x0
    1041: 84 7D    JMP   0x14BF
(0425) 	}
(0426) 	if (codetype & KEY_MAKE) {
    1043: 48 FB 01 TST   [X-5],0x1
    1046: A4 73    JZ    0x14BA
(0427) 		//// Convert any two byte (E0) scancodes to their ASCII equivalent
(0428) 		if (codetype & KEY_E0 && AltDown != 1 && CtrlDown != 1) {
    1048: 48 FB 04 TST   [X-5],0x4
    104B: A0 44    JZ    0x1090
    104D: 62 D0 00 MOV   REG[0xD0],0x0
    1050: 3C 6B 01 CMP   [AltDown],0x1
    1053: A0 3C    JZ    0x1090
    1055: 62 D0 00 MOV   REG[0xD0],0x0
    1058: 3C 6A 01 CMP   [CtrlDown],0x1
    105B: A0 34    JZ    0x1090
(0429) 			if (scancode == 0x71) {
    105D: 3D FC 71 CMP   [X-4],0x71
    1060: B0 08    JNZ   0x1069
(0430) 				return(0x08);	// Delete (return backspace)
    1062: 62 D0 00 MOV   REG[0xD0],0x0
    1065: 50 08    MOV   A,0x8
    1067: 84 57    JMP   0x14BF
(0431) 			}
(0432) 			if (scancode == 0x4A) return('/');	// Keypad /
    1069: 3D FC 4A CMP   [X-4],0x4A
    106C: B0 08    JNZ   0x1075
    106E: 62 D0 00 MOV   REG[0xD0],0x0
    1071: 50 2F    MOV   A,0x2F
    1073: 84 4B    JMP   0x14BF
(0433) 			if (scancode == 0x5A) { // Keypad Enter
    1075: 3D FC 5A CMP   [X-4],0x5A
    1078: B4 41    JNZ   0x14BA
(0434) 				if (CtrlDown) return(0x0A);	// ^Enter (return line-feed)
    107A: 62 D0 00 MOV   REG[0xD0],0x0
    107D: 3C 6A 00 CMP   [CtrlDown],0x0
    1080: A0 08    JZ    0x1089
    1082: 62 D0 00 MOV   REG[0xD0],0x0
    1085: 50 0A    MOV   A,0xA
    1087: 84 37    JMP   0x14BF
(0435) 				else return(0x0D); // (return carriage-return)
    1089: 62 D0 00 MOV   REG[0xD0],0x0
    108C: 50 0D    MOV   A,0xD
    108E: 84 30    JMP   0x14BF
(0436) 			}
(0437) 		}
(0438) 		//// Convert any single byte scancodes to their ASCII equivalent
(0439) 		else {
(0440) 			//// Check for special case keys
(0441) 			if (scancode == 0x5A) { // Enter
    1090: 3D FC 5A CMP   [X-4],0x5A
    1093: B0 17    JNZ   0x10AB
(0442) 				if (CtrlDown) return(0x0A);	// ^Enter (return line-feed)
    1095: 62 D0 00 MOV   REG[0xD0],0x0
    1098: 3C 6A 00 CMP   [CtrlDown],0x0
    109B: A0 08    JZ    0x10A4
    109D: 62 D0 00 MOV   REG[0xD0],0x0
    10A0: 50 0A    MOV   A,0xA
    10A2: 84 1C    JMP   0x14BF
(0443) 				else return(0x0D); // (return carriage-return)
    10A4: 62 D0 00 MOV   REG[0xD0],0x0
    10A7: 50 0D    MOV   A,0xD
    10A9: 84 15    JMP   0x14BF
(0444) 			}
(0445) 			if (scancode == 0x76) return(0x1B);	// ESC key returns ASCII ESC
    10AB: 3D FC 76 CMP   [X-4],0x76
    10AE: B0 08    JNZ   0x10B7
    10B0: 62 D0 00 MOV   REG[0xD0],0x0
    10B3: 50 1B    MOV   A,0x1B
    10B5: 84 09    JMP   0x14BF
(0446) 			if (scancode == 0x7C) return('*');	// KP *
    10B7: 3D FC 7C CMP   [X-4],0x7C
    10BA: B0 08    JNZ   0x10C3
    10BC: 62 D0 00 MOV   REG[0xD0],0x0
    10BF: 50 2A    MOV   A,0x2A
    10C1: 83 FD    JMP   0x14BF
(0447) 			if (scancode == 0x7B) return('-');	// KP -
    10C3: 3D FC 7B CMP   [X-4],0x7B
    10C6: B0 08    JNZ   0x10CF
    10C8: 62 D0 00 MOV   REG[0xD0],0x0
    10CB: 50 2D    MOV   A,0x2D
    10CD: 83 F1    JMP   0x14BF
(0448) 			if (scancode == 0x79) return('+');	// KP +
    10CF: 3D FC 79 CMP   [X-4],0x79
    10D2: B0 08    JNZ   0x10DB
    10D4: 62 D0 00 MOV   REG[0xD0],0x0
    10D7: 50 2B    MOV   A,0x2B
    10D9: 83 E5    JMP   0x14BF
(0449) 			if (scancode == 0x66) return(0x08); // Backspace (return delete)                       ***We added this***
    10DB: 3D FC 66 CMP   [X-4],0x66
    10DE: B0 08    JNZ   0x10E7
    10E0: 62 D0 00 MOV   REG[0xD0],0x0
    10E3: 50 08    MOV   A,0x8
    10E5: 83 D9    JMP   0x14BF
(0450) 			//// If one of the Control keys is down, return their ASCII value
(0451) 			/// 
(0452) 			
(0453) 			if (CtrlDown) {
    10E7: 62 D0 00 MOV   REG[0xD0],0x0
    10EA: 3C 6A 00 CMP   [CtrlDown],0x0
    10ED: A0 96    JZ    0x1184
(0454) 				i = 0;
    10EF: 56 01 00 MOV   [X+1],0x0
    10F2: 56 00 00 MOV   [X+0],0x0
    10F5: 80 06    JMP   0x10FC
(0455) 				while((ControlScancode[i][1] != scancode) && (ControlScancode[i][1] != 0)) {
(0456) 					i++;
    10F7: 77 01    INC   [X+1]
    10F9: 0F 00 00 ADC   [X+0],0x0
(0457) 				}
    10FC: 62 D0 00 MOV   REG[0xD0],0x0
    10FF: 52 01    MOV   A,[X+1]
    1101: 53 21    MOV   [__r1],A
    1103: 52 00    MOV   A,[X+0]
    1105: 53 22    MOV   [__r0],A
    1107: 65 21    ASL   [__r1]
    1109: 6B 22    RLC   [__r0]
    110B: 51 21    MOV   A,[__r1]
    110D: 01 3A    ADD   A,0x3A
    110F: 53 1F    MOV   [__r3],A
    1111: 51 22    MOV   A,[__r0]
    1113: 09 02    ADC   A,0x2
    1115: 10       PUSH  X
    1116: 58 1F    MOV   X,[__r3]
    1118: 28       ROMX  
    1119: 20       POP   X
    111A: 3B FC    CMP   A,[X-4]
    111C: A0 12    JZ    0x112F
    111E: 06 21 3A ADD   [__r1],0x3A
    1121: 0E 22 02 ADC   [__r0],0x2
    1124: 51 22    MOV   A,[__r0]
    1126: 10       PUSH  X
    1127: 58 21    MOV   X,[__r1]
    1129: 28       ROMX  
    112A: 20       POP   X
    112B: 39 00    CMP   A,0x0
    112D: BF C9    JNZ   0x10F7
(0458) 				if (ControlScancode[i][1] > 0) {
    112F: 62 D0 00 MOV   REG[0xD0],0x0
    1132: 52 01    MOV   A,[X+1]
    1134: 53 21    MOV   [__r1],A
    1136: 52 00    MOV   A,[X+0]
    1138: 53 22    MOV   [__r0],A
    113A: 65 21    ASL   [__r1]
    113C: 6B 22    RLC   [__r0]
    113E: 06 21 3A ADD   [__r1],0x3A
    1141: 0E 22 02 ADC   [__r0],0x2
    1144: 51 22    MOV   A,[__r0]
    1146: 10       PUSH  X
    1147: 58 21    MOV   X,[__r1]
    1149: 28       ROMX  
    114A: 20       POP   X
    114B: 53 22    MOV   [__r0],A
    114D: 50 00    MOV   A,0x0
    114F: 3A 22    CMP   A,[__r0]
    1151: D0 1F    JNC   0x1171
(0459) 					return(ControlScancode[i][0]);
    1153: 62 D0 00 MOV   REG[0xD0],0x0
    1156: 52 01    MOV   A,[X+1]
    1158: 53 21    MOV   [__r1],A
    115A: 52 00    MOV   A,[X+0]
    115C: 53 22    MOV   [__r0],A
    115E: 65 21    ASL   [__r1]
    1160: 6B 22    RLC   [__r0]
    1162: 06 21 39 ADD   [__r1],0x39
    1165: 0E 22 02 ADC   [__r0],0x2
    1168: 51 22    MOV   A,[__r0]
    116A: 10       PUSH  X
    116B: 58 21    MOV   X,[__r1]
    116D: 28       ROMX  
    116E: 20       POP   X
    116F: 83 4F    JMP   0x14BF
(0460) 				}
(0461) 				
(0462) 				if (AltDown && DeleteDown) {
    1171: 62 D0 00 MOV   REG[0xD0],0x0
    1174: 3C 6B 00 CMP   [AltDown],0x0
    1177: A0 0C    JZ    0x1184
    1179: 62 D0 00 MOV   REG[0xD0],0x0
    117C: 3C 6E 00 CMP   [DeleteDown],0x0
    117F: A0 04    JZ    0x1184
(0463) 					
(0464) 					M8C_Reset;
    1181: 50 00    MOV   A,0x0
    1183: 00       SWI   
(0465) 					
(0466) 				}
(0467) 				
(0468) //				if (scancode == 0x11) {
(0469) //					rst = 1;	
(0470) //				} else if (rst == 1) {
(0471) //					UART_CPutString("\r\nSoft Reset\r\n");
(0472) //				}
(0473) 			}
(0474) 			//// If NumLock is on, return any appropriate key pad ASCII values
(0475) 			if (NumLock) {
    1184: 62 D0 00 MOV   REG[0xD0],0x0
    1187: 3C 66 00 CMP   [NumLock],0x0
    118A: A0 83    JZ    0x120E
(0476) 				i = 0;
    118C: 56 01 00 MOV   [X+1],0x0
    118F: 56 00 00 MOV   [X+0],0x0
    1192: 80 06    JMP   0x1199
(0477) 				while((KeypadScancode[i][1] != scancode) && (KeypadScancode[i][1] != 0)) {
(0478) 					i++;
    1194: 77 01    INC   [X+1]
    1196: 0F 00 00 ADC   [X+0],0x0
(0479) 				}
    1199: 62 D0 00 MOV   REG[0xD0],0x0
    119C: 52 01    MOV   A,[X+1]
    119E: 53 21    MOV   [__r1],A
    11A0: 52 00    MOV   A,[X+0]
    11A2: 53 22    MOV   [__r0],A
    11A4: 65 21    ASL   [__r1]
    11A6: 6B 22    RLC   [__r0]
    11A8: 51 21    MOV   A,[__r1]
    11AA: 01 7A    ADD   A,0x7A
    11AC: 53 1F    MOV   [__r3],A
    11AE: 51 22    MOV   A,[__r0]
    11B0: 09 02    ADC   A,0x2
    11B2: 10       PUSH  X
    11B3: 58 1F    MOV   X,[__r3]
    11B5: 28       ROMX  
    11B6: 20       POP   X
    11B7: 3B FC    CMP   A,[X-4]
    11B9: A0 12    JZ    0x11CC
    11BB: 06 21 7A ADD   [__r1],0x7A
    11BE: 0E 22 02 ADC   [__r0],0x2
    11C1: 51 22    MOV   A,[__r0]
    11C3: 10       PUSH  X
    11C4: 58 21    MOV   X,[__r1]
    11C6: 28       ROMX  
    11C7: 20       POP   X
    11C8: 39 00    CMP   A,0x0
    11CA: BF C9    JNZ   0x1194
(0480) 				if (KeypadScancode[i][1] > 0) {
    11CC: 62 D0 00 MOV   REG[0xD0],0x0
    11CF: 52 01    MOV   A,[X+1]
    11D1: 53 21    MOV   [__r1],A
    11D3: 52 00    MOV   A,[X+0]
    11D5: 53 22    MOV   [__r0],A
    11D7: 65 21    ASL   [__r1]
    11D9: 6B 22    RLC   [__r0]
    11DB: 06 21 7A ADD   [__r1],0x7A
    11DE: 0E 22 02 ADC   [__r0],0x2
    11E1: 51 22    MOV   A,[__r0]
    11E3: 10       PUSH  X
    11E4: 58 21    MOV   X,[__r1]
    11E6: 28       ROMX  
    11E7: 20       POP   X
    11E8: 53 22    MOV   [__r0],A
    11EA: 50 00    MOV   A,0x0
    11EC: 3A 22    CMP   A,[__r0]
    11EE: D0 1F    JNC   0x120E
(0481) 					return(KeypadScancode[i][0]);
    11F0: 62 D0 00 MOV   REG[0xD0],0x0
    11F3: 52 01    MOV   A,[X+1]
    11F5: 53 21    MOV   [__r1],A
    11F7: 52 00    MOV   A,[X+0]
    11F9: 53 22    MOV   [__r0],A
    11FB: 65 21    ASL   [__r1]
    11FD: 6B 22    RLC   [__r0]
    11FF: 06 21 79 ADD   [__r1],0x79
    1202: 0E 22 02 ADC   [__r0],0x2
    1205: 51 22    MOV   A,[__r0]
    1207: 10       PUSH  X
    1208: 58 21    MOV   X,[__r1]
    120A: 28       ROMX  
    120B: 20       POP   X
    120C: 82 B2    JMP   0x14BF
(0482) 				}
(0483) 			}
(0484) 			
(0485) 			/* CODE ADDED BY JEREMY AND DAVE      ************************************/
(0486) 			/************* DON'T BREAK IT ********************************************/
(0487) 			if (AltDown) {
    120E: 62 D0 00 MOV   REG[0xD0],0x0
    1211: 3C 6B 00 CMP   [AltDown],0x0
    1214: A1 16    JZ    0x132B
(0488) 				
(0489) 				// FOX PART
(0490) 				
(0491) 				if (scancode == 0x16) {
    1216: 3D FC 16 CMP   [X-4],0x16
    1219: B0 0C    JNZ   0x1226
(0492) 					print1 = 1;
    121B: 62 D0 00 MOV   REG[0xD0],0x0
    121E: 55 40 01 MOV   [0x40],0x1
    1221: 55 3F 00 MOV   [0x3F],0x0
(0493) 				} else if (scancode == 0x1E && print1 == 1) {
    1224: 80 5A    JMP   0x127F
    1226: 3D FC 1E CMP   [X-4],0x1E
    1229: B0 19    JNZ   0x1243
    122B: 62 D0 00 MOV   REG[0xD0],0x0
    122E: 3C 3F 00 CMP   [0x3F],0x0
    1231: B0 11    JNZ   0x1243
    1233: 3C 40 01 CMP   [0x40],0x1
    1236: B0 0C    JNZ   0x1243
(0494) 					print1 = 2;
    1238: 62 D0 00 MOV   REG[0xD0],0x0
    123B: 55 40 02 MOV   [0x40],0x2
    123E: 55 3F 00 MOV   [0x3F],0x0
(0495) 				} else if (scancode == 0x26 && print1 == 2) {
    1241: 80 3D    JMP   0x127F
    1243: 3D FC 26 CMP   [X-4],0x26
    1246: B0 25    JNZ   0x126C
    1248: 62 D0 00 MOV   REG[0xD0],0x0
    124B: 3C 3F 00 CMP   [0x3F],0x0
    124E: B0 1D    JNZ   0x126C
    1250: 3C 40 02 CMP   [0x40],0x2
    1253: B0 18    JNZ   0x126C
(0496) 					UART_CPutString("\r\nThe quick brown fox jumps over the lazy dog.\r\n");				// we added this section
    1255: 10       PUSH  X
    1256: 50 03    MOV   A,0x3
    1258: 08       PUSH  A
    1259: 50 B1    MOV   A,0xB1
    125B: 5C       MOV   X,A
    125C: 18       POP   A
    125D: 7C 09 55 LCALL _UART_CPutString
    1260: 20       POP   X
(0497) 					print1 = 0;
    1261: 62 D0 00 MOV   REG[0xD0],0x0
    1264: 55 40 00 MOV   [0x40],0x0
    1267: 55 3F 00 MOV   [0x3F],0x0
(0498) 				} else if (scancode != 0xF0 && scancode != 0x11) {
    126A: 80 14    JMP   0x127F
    126C: 3D FC F0 CMP   [X-4],0xF0
    126F: A0 0F    JZ    0x127F
    1271: 3D FC 11 CMP   [X-4],0x11
    1274: A0 0A    JZ    0x127F
(0499) 					print1 = 0;
    1276: 62 D0 00 MOV   REG[0xD0],0x0
    1279: 55 40 00 MOV   [0x40],0x0
    127C: 55 3F 00 MOV   [0x3F],0x0
(0500) 				}
(0501) 				
(0502) 				// PI PART
(0503) 				if (scancode == 0x26) {
    127F: 3D FC 26 CMP   [X-4],0x26
    1282: B0 0C    JNZ   0x128F
(0504) 					print2 = 1;
    1284: 62 D0 00 MOV   REG[0xD0],0x0
    1287: 55 44 01 MOV   [0x44],0x1
    128A: 55 43 00 MOV   [0x43],0x0
(0505) 				} else if (scancode == 0x16 && print2 == 1) {
    128D: 80 5A    JMP   0x12E8
    128F: 3D FC 16 CMP   [X-4],0x16
    1292: B0 19    JNZ   0x12AC
    1294: 62 D0 00 MOV   REG[0xD0],0x0
    1297: 3C 43 00 CMP   [0x43],0x0
    129A: B0 11    JNZ   0x12AC
    129C: 3C 44 01 CMP   [0x44],0x1
    129F: B0 0C    JNZ   0x12AC
(0506) 					print2 =2 ;
    12A1: 62 D0 00 MOV   REG[0xD0],0x0
    12A4: 55 44 02 MOV   [0x44],0x2
    12A7: 55 43 00 MOV   [0x43],0x0
(0507) 				} else if (scancode == 0x25 && print2 == 2) {
    12AA: 80 3D    JMP   0x12E8
    12AC: 3D FC 25 CMP   [X-4],0x25
    12AF: B0 25    JNZ   0x12D5
    12B1: 62 D0 00 MOV   REG[0xD0],0x0
    12B4: 3C 43 00 CMP   [0x43],0x0
    12B7: B0 1D    JNZ   0x12D5
    12B9: 3C 44 02 CMP   [0x44],0x2
    12BC: B0 18    JNZ   0x12D5
(0508) 					UART_CPutString("\r\n3.1415926535897932386\r\n");
    12BE: 10       PUSH  X
    12BF: 50 03    MOV   A,0x3
    12C1: 08       PUSH  A
    12C2: 50 97    MOV   A,0x97
    12C4: 5C       MOV   X,A
    12C5: 18       POP   A
    12C6: 7C 09 55 LCALL _UART_CPutString
    12C9: 20       POP   X
(0509) 					print2 = 0;
    12CA: 62 D0 00 MOV   REG[0xD0],0x0
    12CD: 55 44 00 MOV   [0x44],0x0
    12D0: 55 43 00 MOV   [0x43],0x0
(0510) 				} else if (scancode != 0xF0 && scancode != 0xF0) {
    12D3: 80 14    JMP   0x12E8
    12D5: 3D FC F0 CMP   [X-4],0xF0
    12D8: A0 0F    JZ    0x12E8
    12DA: 3D FC F0 CMP   [X-4],0xF0
    12DD: A0 0A    JZ    0x12E8
(0511) 					print2 = 0;
    12DF: 62 D0 00 MOV   REG[0xD0],0x0
    12E2: 55 44 00 MOV   [0x44],0x0
    12E5: 55 43 00 MOV   [0x43],0x0
(0512) 				}
(0513) 				
(0514) 				// THREE ZEROS PART
(0515) 				if (scancode == 0x45) {
    12E8: 3D FC 45 CMP   [X-4],0x45
    12EB: B0 2A    JNZ   0x1316
(0516) 					count++;
    12ED: 62 D0 00 MOV   REG[0xD0],0x0
    12F0: 76 42    INC   [0x42]
    12F2: 0E 41 00 ADC   [0x41],0x0
(0517) 					if (count == 3) {
    12F5: 3C 41 00 CMP   [0x41],0x0
    12F8: B0 3E    JNZ   0x1337
    12FA: 3C 42 03 CMP   [0x42],0x3
    12FD: B0 39    JNZ   0x1337
(0518) 						UART_CPutString("\r\nI love/hate ECE381!.\r\n");	
    12FF: 10       PUSH  X
    1300: 50 03    MOV   A,0x3
    1302: 08       PUSH  A
    1303: 50 7E    MOV   A,0x7E
    1305: 5C       MOV   X,A
    1306: 18       POP   A
    1307: 7C 09 55 LCALL _UART_CPutString
    130A: 20       POP   X
(0519) 						count = 0;
    130B: 62 D0 00 MOV   REG[0xD0],0x0
    130E: 55 42 00 MOV   [0x42],0x0
    1311: 55 41 00 MOV   [0x41],0x0
(0520) 					}
(0521) 				} else if (scancode != 0xF0 && scancode != 0x11) {
    1314: 80 22    JMP   0x1337
    1316: 3D FC F0 CMP   [X-4],0xF0
    1319: A0 1D    JZ    0x1337
    131B: 3D FC 11 CMP   [X-4],0x11
    131E: A0 18    JZ    0x1337
(0522) 					count = 0;
    1320: 62 D0 00 MOV   REG[0xD0],0x0
    1323: 55 42 00 MOV   [0x42],0x0
    1326: 55 41 00 MOV   [0x41],0x0
(0523) 				}
(0524) 			}
    1329: 80 0D    JMP   0x1337
(0525) 			
(0526) 			/* END OF CODE ADDED BY JEREMY AND DAVE **********************************/
(0527) 			/*************************************************************************/
(0528) 			
(0529) 			
(0530) 			//// Keypad ./DEL returns backspace if NumLock is off
(0531) 			else {
(0532) 				if (scancode == 0x71) return(0x08);	// KP ./Del (return backspace)
    132B: 3D FC 71 CMP   [X-4],0x71
    132E: B0 08    JNZ   0x1337
    1330: 62 D0 00 MOV   REG[0xD0],0x0
    1333: 50 08    MOV   A,0x8
    1335: 81 89    JMP   0x14BF
(0533) 			}
(0534) 			//// Search for all others in their shifted or CapsLock form
(0535) 			i = 0;
    1337: 56 01 00 MOV   [X+1],0x0
    133A: 56 00 00 MOV   [X+0],0x0
    133D: 80 06    JMP   0x1344
(0536) 			while((AlphabetScancode[i][2] != scancode) && (AlphabetScancode[i][2] != 0)) {
(0537) 				i++;
    133F: 77 01    INC   [X+1]
    1341: 0F 00 00 ADC   [X+0],0x0
(0538) 			}
    1344: 62 D0 00 MOV   REG[0xD0],0x0
    1347: 52 00    MOV   A,[X+0]
    1349: 08       PUSH  A
    134A: 52 01    MOV   A,[X+1]
    134C: 08       PUSH  A
    134D: 50 00    MOV   A,0x0
    134F: 08       PUSH  A
    1350: 50 03    MOV   A,0x3
    1352: 08       PUSH  A
    1353: 7C 2D 9C LCALL 0x2D9C
    1356: 38 FC    ADD   SP,0xFC
    1358: 51 16    MOV   A,[__rX]
    135A: 53 21    MOV   [__r1],A
    135C: 51 15    MOV   A,[__rY]
    135E: 53 22    MOV   [__r0],A
    1360: 51 21    MOV   A,[__r1]
    1362: 01 EA    ADD   A,0xEA
    1364: 53 1F    MOV   [__r3],A
    1366: 51 22    MOV   A,[__r0]
    1368: 09 01    ADC   A,0x1
    136A: 10       PUSH  X
    136B: 58 1F    MOV   X,[__r3]
    136D: 28       ROMX  
    136E: 20       POP   X
    136F: 3B FC    CMP   A,[X-4]
    1371: A0 12    JZ    0x1384
    1373: 06 21 EA ADD   [__r1],0xEA
    1376: 0E 22 01 ADC   [__r0],0x1
    1379: 51 22    MOV   A,[__r0]
    137B: 10       PUSH  X
    137C: 58 21    MOV   X,[__r1]
    137E: 28       ROMX  
    137F: 20       POP   X
    1380: 39 00    CMP   A,0x0
    1382: BF BC    JNZ   0x133F
(0539) 			if (AlphabetScancode[i][2] > 0) {
    1384: 62 D0 00 MOV   REG[0xD0],0x0
    1387: 52 00    MOV   A,[X+0]
    1389: 08       PUSH  A
    138A: 52 01    MOV   A,[X+1]
    138C: 08       PUSH  A
    138D: 50 00    MOV   A,0x0
    138F: 08       PUSH  A
    1390: 50 03    MOV   A,0x3
    1392: 08       PUSH  A
    1393: 7C 2D 9C LCALL 0x2D9C
    1396: 38 FC    ADD   SP,0xFC
    1398: 51 16    MOV   A,[__rX]
    139A: 53 21    MOV   [__r1],A
    139C: 51 15    MOV   A,[__rY]
    139E: 53 22    MOV   [__r0],A
    13A0: 06 21 EA ADD   [__r1],0xEA
    13A3: 0E 22 01 ADC   [__r0],0x1
    13A6: 51 22    MOV   A,[__r0]
    13A8: 10       PUSH  X
    13A9: 58 21    MOV   X,[__r1]
    13AB: 28       ROMX  
    13AC: 20       POP   X
    13AD: 53 22    MOV   [__r0],A
    13AF: 50 00    MOV   A,0x0
    13B1: 3A 22    CMP   A,[__r0]
    13B3: D0 4B    JNC   0x13FF
(0540) 				return(AlphabetScancode[i][ShiftDown^CapsLock]);
    13B5: 62 D0 00 MOV   REG[0xD0],0x0
    13B8: 51 69    MOV   A,[ShiftDown]
    13BA: 62 D0 00 MOV   REG[0xD0],0x0
    13BD: 53 21    MOV   [__r1],A
    13BF: 55 22 00 MOV   [__r0],0x0
    13C2: 62 D0 00 MOV   REG[0xD0],0x0
    13C5: 51 67    MOV   A,[CapsLock]
    13C7: 62 D0 00 MOV   REG[0xD0],0x0
    13CA: 34 21    XOR   [__r1],A
    13CC: 36 22 00 XOR   [__r0],0x0
    13CF: 52 00    MOV   A,[X+0]
    13D1: 08       PUSH  A
    13D2: 52 01    MOV   A,[X+1]
    13D4: 08       PUSH  A
    13D5: 50 00    MOV   A,0x0
    13D7: 08       PUSH  A
    13D8: 50 03    MOV   A,0x3
    13DA: 08       PUSH  A
    13DB: 7C 2D 9C LCALL 0x2D9C
    13DE: 38 FC    ADD   SP,0xFC
    13E0: 51 16    MOV   A,[__rX]
    13E2: 53 1F    MOV   [__r3],A
    13E4: 51 15    MOV   A,[__rY]
    13E6: 53 20    MOV   [__r2],A
    13E8: 06 1F E8 ADD   [__r3],0xE8
    13EB: 0E 20 01 ADC   [__r2],0x1
    13EE: 51 1F    MOV   A,[__r3]
    13F0: 04 21    ADD   [__r1],A
    13F2: 51 20    MOV   A,[__r2]
    13F4: 0C 22    ADC   [__r0],A
    13F6: 51 22    MOV   A,[__r0]
    13F8: 10       PUSH  X
    13F9: 58 21    MOV   X,[__r1]
    13FB: 28       ROMX  
    13FC: 20       POP   X
    13FD: 80 C1    JMP   0x14BF
(0541) 			}
(0542) 			else {
(0543) 				i = 0;
    13FF: 56 01 00 MOV   [X+1],0x0
    1402: 56 00 00 MOV   [X+0],0x0
    1405: 80 06    JMP   0x140C
(0544) 				while((ShiftableScancode[i][2] != scancode) && (ShiftableScancode[i][2] != 0)) {
(0545) 					i++;
    1407: 77 01    INC   [X+1]
    1409: 0F 00 00 ADC   [X+0],0x0
(0546) 				}
    140C: 62 D0 00 MOV   REG[0xD0],0x0
    140F: 52 00    MOV   A,[X+0]
    1411: 08       PUSH  A
    1412: 52 01    MOV   A,[X+1]
    1414: 08       PUSH  A
    1415: 50 00    MOV   A,0x0
    1417: 08       PUSH  A
    1418: 50 03    MOV   A,0x3
    141A: 08       PUSH  A
    141B: 7C 2D 9C LCALL 0x2D9C
    141E: 38 FC    ADD   SP,0xFC
    1420: 51 16    MOV   A,[__rX]
    1422: 53 21    MOV   [__r1],A
    1424: 51 15    MOV   A,[__rY]
    1426: 53 22    MOV   [__r0],A
    1428: 51 21    MOV   A,[__r1]
    142A: 01 A2    ADD   A,0xA2
    142C: 53 1F    MOV   [__r3],A
    142E: 51 22    MOV   A,[__r0]
    1430: 09 01    ADC   A,0x1
    1432: 10       PUSH  X
    1433: 58 1F    MOV   X,[__r3]
    1435: 28       ROMX  
    1436: 20       POP   X
    1437: 3B FC    CMP   A,[X-4]
    1439: A0 12    JZ    0x144C
    143B: 06 21 A2 ADD   [__r1],0xA2
    143E: 0E 22 01 ADC   [__r0],0x1
    1441: 51 22    MOV   A,[__r0]
    1443: 10       PUSH  X
    1444: 58 21    MOV   X,[__r1]
    1446: 28       ROMX  
    1447: 20       POP   X
    1448: 39 00    CMP   A,0x0
    144A: BF BC    JNZ   0x1407
(0547) 				if (ShiftableScancode[i][2] > 0) {
    144C: 62 D0 00 MOV   REG[0xD0],0x0
    144F: 52 00    MOV   A,[X+0]
    1451: 08       PUSH  A
    1452: 52 01    MOV   A,[X+1]
    1454: 08       PUSH  A
    1455: 50 00    MOV   A,0x0
    1457: 08       PUSH  A
    1458: 50 03    MOV   A,0x3
    145A: 08       PUSH  A
    145B: 7C 2D 9C LCALL 0x2D9C
    145E: 38 FC    ADD   SP,0xFC
    1460: 51 16    MOV   A,[__rX]
    1462: 53 21    MOV   [__r1],A
    1464: 51 15    MOV   A,[__rY]
    1466: 53 22    MOV   [__r0],A
    1468: 06 21 A2 ADD   [__r1],0xA2
    146B: 0E 22 01 ADC   [__r0],0x1
    146E: 51 22    MOV   A,[__r0]
    1470: 10       PUSH  X
    1471: 58 21    MOV   X,[__r1]
    1473: 28       ROMX  
    1474: 20       POP   X
    1475: 53 22    MOV   [__r0],A
    1477: 50 00    MOV   A,0x0
    1479: 3A 22    CMP   A,[__r0]
    147B: D0 3E    JNC   0x14BA
(0548) 					return(ShiftableScancode[i][ShiftDown]);
    147D: 62 D0 00 MOV   REG[0xD0],0x0
    1480: 51 69    MOV   A,[ShiftDown]
    1482: 62 D0 00 MOV   REG[0xD0],0x0
    1485: 53 21    MOV   [__r1],A
    1487: 55 22 00 MOV   [__r0],0x0
    148A: 52 00    MOV   A,[X+0]
    148C: 08       PUSH  A
    148D: 52 01    MOV   A,[X+1]
    148F: 08       PUSH  A
    1490: 50 00    MOV   A,0x0
    1492: 08       PUSH  A
    1493: 50 03    MOV   A,0x3
    1495: 08       PUSH  A
    1496: 7C 2D 9C LCALL 0x2D9C
    1499: 38 FC    ADD   SP,0xFC
    149B: 51 16    MOV   A,[__rX]
    149D: 53 1F    MOV   [__r3],A
    149F: 51 15    MOV   A,[__rY]
    14A1: 53 20    MOV   [__r2],A
    14A3: 06 1F A0 ADD   [__r3],0xA0
    14A6: 0E 20 01 ADC   [__r2],0x1
    14A9: 51 1F    MOV   A,[__r3]
    14AB: 04 21    ADD   [__r1],A
    14AD: 51 20    MOV   A,[__r2]
    14AF: 0C 22    ADC   [__r0],A
    14B1: 51 22    MOV   A,[__r0]
    14B3: 10       PUSH  X
    14B4: 58 21    MOV   X,[__r1]
    14B6: 28       ROMX  
    14B7: 20       POP   X
    14B8: 80 06    JMP   0x14BF
(0549) 				}
(0550) 			}
(0551) 		}
(0552) 	}
(0553) 	//// No ASCII match returns zero
(0554) 	return(0);
    14BA: 62 D0 00 MOV   REG[0xD0],0x0
    14BD: 50 00    MOV   A,0x0
    14BF: 38 FE    ADD   SP,0xFE
    14C1: 20       POP   X
    14C2: 7F       RET   
(0555) }
(0556) 
(0557) void KeyboardAction(BYTE scancode, BYTE codetype, BYTE keyspressed)
(0558) {
_KeyboardAction:
  status               --> X+2
  i                    --> X+0
  keyspressed          --> X-6
  codetype             --> X-5
  scancode             --> X-4
    14C3: 10       PUSH  X
    14C4: 4F       MOV   X,SP
    14C5: 38 05    ADD   SP,0x5
(0559) 	//// Keyboard variables below
(0560) 	BYTE status;
(0561) 	int i;
(0562) 	static BYTE brightindex = 127;	// PWM LED brightness index
(0563) 	static BYTE pwm_on = 1;		// PWM User Module on or off
(0564) 	static BYTE statusLEDs=0;
(0565) 	static BYTE shiftstatus = 0;
(0566) 	static BYTE ctrlstatus = 0;
(0567) 	static BYTE altstatus = 0;
(0568) 	static BYTE ctrlaltdelete = 0;
(0569) 	static BYTE delstatus = 0;
(0570) 	
(0571) 	static int keycounthigh = 0;    																// we added this
(0572) 	static int keycountmid = 0;    																// we added this
(0573) 	static int keycountlow = 0;    																// we added this
(0574) 	static BYTE lows[] = {0x0, 0x0}; 																		// we added this
(0575) 	static BYTE mids[] = {0x0, 0x0}; 																		// we added this
(0576) 	static BYTE highs[] = {0x0, 0x0}; 																		// we added this
(0577) 	static int m = 0;
(0578) 	static int n = 0;
(0579) 	static int o = 0;
(0580) 	
(0581) 
(0582) 	//// Ignore fake-shifts (unless you care about them)
(0583) 	if (codetype & KEY_FAKE_SHIFT) {
    14C7: 48 FB 10 TST   [X-5],0x10
    14CA: A0 03    JZ    0x14CE
(0584) 		return;
    14CC: 87 91    JMP   0x1C5E
(0585) 	}
(0586) 	//// Every other code type is a key change
(0587) 	if (codetype) {
    14CE: 3D FB 00 CMP   [X-5],0x0
    14D1: A7 8C    JZ    0x1C5E
(0588) 		//// If the Pause key is pressed, switch to Piano mode
(0589) 		if (codetype == KEY_PAUSE) {
    14D3: 3D FB 08 CMP   [X-5],0x8
    14D6: B0 35    JNZ   0x150C
(0590) 			PianoMode ^= 0x01;
    14D8: 62 D0 00 MOV   REG[0xD0],0x0
    14DB: 51 6C    MOV   A,[PianoMode]
    14DD: 31 01    XOR   A,0x1
    14DF: 53 6C    MOV   [PianoMode],A
(0591) 			if (PianoMode) {
    14E1: 3C 6C 00 CMP   [PianoMode],0x0
    14E4: A0 19    JZ    0x14FE
(0592) 				UART_CPutString("\r\nPiano mode on.\r\n");
    14E6: 10       PUSH  X
    14E7: 50 03    MOV   A,0x3
    14E9: 08       PUSH  A
    14EA: 50 6B    MOV   A,0x6B
    14EC: 5C       MOV   X,A
    14ED: 18       POP   A
    14EE: 7C 09 55 LCALL _UART_CPutString
(0593) 				UART_CPutString("\tPress [ZXCVBNM,], [ASDFGHJK], or [QWERTYUI].\r\n");
    14F1: 50 03    MOV   A,0x3
    14F3: 08       PUSH  A
    14F4: 50 3B    MOV   A,0x3B
    14F6: 5C       MOV   X,A
    14F7: 18       POP   A
    14F8: 7C 09 55 LCALL _UART_CPutString
    14FB: 20       POP   X
(0594) 			}
    14FC: 87 61    JMP   0x1C5E
(0595) 			else
(0596) 				UART_CPutString("\r\nPiano mode off.\r\n");
    14FE: 10       PUSH  X
    14FF: 50 03    MOV   A,0x3
    1501: 08       PUSH  A
    1502: 50 27    MOV   A,0x27
    1504: 5C       MOV   X,A
    1505: 18       POP   A
    1506: 7C 09 55 LCALL _UART_CPutString
    1509: 20       POP   X
(0597) 			return;
    150A: 87 53    JMP   0x1C5E
(0598) 		}
(0599) 		//// Things to do when one of the E0 keys is pressed
(0600) 		if ((codetype & KEY_E0)&&(codetype & KEY_MAKE)) {
    150C: 48 FB 04 TST   [X-5],0x4
    150F: A0 99    JZ    0x15A9
    1511: 48 FB 01 TST   [X-5],0x1
    1514: A0 94    JZ    0x15A9
(0601) 			switch(scancode) {
    1516: 52 FC    MOV   A,[X-4]
    1518: 54 04    MOV   [X+4],A
    151A: 56 03 00 MOV   [X+3],0x0
    151D: 52 04    MOV   A,[X+4]
    151F: 11 71    SUB   A,0x71
    1521: 62 D0 00 MOV   REG[0xD0],0x0
    1524: 53 15    MOV   [__rY],A
    1526: 52 03    MOV   A,[X+3]
    1528: 31 80    XOR   A,0x80
    152A: 19 80    SBB   A,0x80
    152C: 2A 15    OR    A,[__rY]
    152E: A0 6C    JZ    0x159B
    1530: D0 17    JNC   0x1548
    1532: 3D 03 00 CMP   [X+3],0x0
    1535: B0 06    JNZ   0x153C
    1537: 3D 04 11 CMP   [X+4],0x11
    153A: A0 52    JZ    0x158D
    153C: 3D 03 00 CMP   [X+3],0x0
    153F: B0 06    JNZ   0x1546
    1541: 3D 04 14 CMP   [X+4],0x14
    1544: A0 3A    JZ    0x157F
    1546: 87 17    JMP   0x1C5E
    1548: 3D 03 00 CMP   [X+3],0x0
    154B: B0 06    JNZ   0x1552
    154D: 3D 04 7C CMP   [X+4],0x7C
    1550: A0 03    JZ    0x1554
    1552: 87 0B    JMP   0x1C5E
(0602) 			case 0x7C:	// E0 7C - PRNT SCRN
(0603) 				// If we successfully send and receive an echo, toggle the PWM LED
(0604) 				if (!PS2_Send_Command_Process_Response(0xEE)) {
    1554: 50 EE    MOV   A,0xEE
    1556: 08       PUSH  A
    1557: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    155A: 38 FF    ADD   SP,0xFF
    155C: 39 00    CMP   A,0x0
    155E: B6 FF    JNZ   0x1C5E
(0605) 					if (pwm_on) {
    1560: 62 D0 00 MOV   REG[0xD0],0x0
    1563: 3C 61 00 CMP   [0x61],0x0
    1566: A0 0B    JZ    0x1572
(0606) 						pwm_on = 0;
    1568: 55 61 00 MOV   [0x61],0x0
(0607) 						PWM8LED_Stop();
    156B: 10       PUSH  X
    156C: 7C 0A F4 LCALL _PWM8LED_Stop
    156F: 20       POP   X
(0608) 					}
    1570: 86 ED    JMP   0x1C5E
(0609) 					else {
(0610) 						pwm_on = 1;
    1572: 62 D0 00 MOV   REG[0xD0],0x0
    1575: 55 61 01 MOV   [0x61],0x1
(0611) 						PWM8LED_Start();
    1578: 10       PUSH  X
    1579: 7C 0A F0 LCALL _PWM8LED_Start
    157C: 20       POP   X
(0612) 					}
(0613) 				}
(0614) 				break;
    157D: 86 E0    JMP   0x1C5E
(0615) 			case 0x14:	// E0 14 - Right Control
(0616) 				ctrlstatus |= 0x01;
    157F: 62 D0 00 MOV   REG[0xD0],0x0
    1582: 2E 5E 01 OR    [0x5E],0x1
(0617) 				CtrlDown = 1;
    1585: 62 D0 00 MOV   REG[0xD0],0x0
    1588: 55 6A 01 MOV   [CtrlDown],0x1
(0618) 				break;
    158B: 86 D2    JMP   0x1C5E
(0619) 			case 0x11:	// E0 11 - Right Alt
(0620) 				altstatus |= 0x01;
    158D: 62 D0 00 MOV   REG[0xD0],0x0
    1590: 2E 5D 01 OR    [0x5D],0x1
(0621) 				AltDown = 1;
    1593: 62 D0 00 MOV   REG[0xD0],0x0
    1596: 55 6B 01 MOV   [AltDown],0x1
(0622) 				break;
    1599: 86 C4    JMP   0x1C5E
(0623) 			case 0x71:  // E0 71 - Delete 
(0624) 				delstatus |= 0x01;
    159B: 62 D0 00 MOV   REG[0xD0],0x0
    159E: 2E 5B 01 OR    [0x5B],0x1
(0625) 					//UART_CPutString("\r\nDELETE DELETE DELETE\r\n");
(0626) 				DeleteDown = 1;
    15A1: 62 D0 00 MOV   REG[0xD0],0x0
    15A4: 55 6E 01 MOV   [DeleteDown],0x1
(0627) 				break;
(0628) 			//// Any scan codes not handled specially in the above case statements are
(0629) 			//// handled here:
(0630) 			default:
(0631) 				break;
(0632) 			}
(0633) 			return;
    15A7: 86 B6    JMP   0x1C5E
(0634) 		}
(0635) 		//
(0636) 		//// Things to do when one of the E0 keys is released
(0637) 		if ((codetype & KEY_E0)&&(codetype & KEY_BREAK)) {
    15A9: 48 FB 04 TST   [X-5],0x4
    15AC: A0 72    JZ    0x161F
    15AE: 48 FB 02 TST   [X-5],0x2
    15B1: A0 6D    JZ    0x161F
(0638) 			switch(scancode) {
    15B3: 52 FC    MOV   A,[X-4]
    15B5: 54 04    MOV   [X+4],A
    15B7: 56 03 00 MOV   [X+3],0x0
    15BA: 52 04    MOV   A,[X+4]
    15BC: 11 71    SUB   A,0x71
    15BE: 62 D0 00 MOV   REG[0xD0],0x0
    15C1: 53 15    MOV   [__rY],A
    15C3: 52 03    MOV   A,[X+3]
    15C5: 31 80    XOR   A,0x80
    15C7: 19 80    SBB   A,0x80
    15C9: 2A 15    OR    A,[__rY]
    15CB: A0 4B    JZ    0x1617
    15CD: D0 17    JNC   0x15E5
    15CF: 3D 03 00 CMP   [X+3],0x0
    15D2: B0 06    JNZ   0x15D9
    15D4: 3D 04 11 CMP   [X+4],0x11
    15D7: A0 2C    JZ    0x1604
    15D9: 3D 03 00 CMP   [X+3],0x0
    15DC: B0 06    JNZ   0x15E3
    15DE: 3D 04 14 CMP   [X+4],0x14
    15E1: A0 0F    JZ    0x15F1
    15E3: 86 7A    JMP   0x1C5E
    15E5: 3D 03 00 CMP   [X+3],0x0
    15E8: B0 06    JNZ   0x15EF
    15EA: 3D 04 7C CMP   [X+4],0x7C
    15ED: A6 70    JZ    0x1C5E
    15EF: 86 6E    JMP   0x1C5E
(0639) 			case 0x7C:	// E0 F0 7C - PRNT SCRN
(0640) 				break;
(0641) 			case 0x14:	// E0 F0 14 - Right Control
(0642) 				ctrlstatus &= ~0x01;
    15F1: 62 D0 00 MOV   REG[0xD0],0x0
    15F4: 26 5E FE AND   [0x5E],0xFE
(0643) 				if (!ctrlstatus) CtrlDown = 0;
    15F7: 3C 5E 00 CMP   [0x5E],0x0
    15FA: B6 63    JNZ   0x1C5E
    15FC: 62 D0 00 MOV   REG[0xD0],0x0
    15FF: 55 6A 00 MOV   [CtrlDown],0x0
(0644) 				break;
    1602: 86 5B    JMP   0x1C5E
(0645) 			case 0x11:	// E0 F0 11 - Right Alt
(0646) 				altstatus &= ~0x01;
    1604: 62 D0 00 MOV   REG[0xD0],0x0
    1607: 26 5D FE AND   [0x5D],0xFE
(0647) 				if (!altstatus) AltDown = 0;
    160A: 3C 5D 00 CMP   [0x5D],0x0
    160D: B6 50    JNZ   0x1C5E
    160F: 62 D0 00 MOV   REG[0xD0],0x0
    1612: 55 6B 00 MOV   [AltDown],0x0
(0648) 				break;
    1615: 86 48    JMP   0x1C5E
(0649) 			case 0x71:
(0650) 				DeleteDown = 0;
    1617: 62 D0 00 MOV   REG[0xD0],0x0
    161A: 55 6E 00 MOV   [DeleteDown],0x0
(0651) 					//UART_CPutString("\r\nSTOP DELETING \r\n");
(0652) 				break;
(0653) 					
(0654) 			//// Any scan codes not handled specially in the above case statements are
(0655) 			//// handled here:
(0656) 			default:
(0657) 				break;
(0658) 			}
(0659) 			return;
    161D: 86 40    JMP   0x1C5E
(0660) 		}
(0661) 		//
(0662) 		//// Things to do when one of the single byte "make" scan code keys is pressed
(0663) 		if (codetype & KEY_MAKE) {
    161F: 48 FB 01 TST   [X-5],0x1
    1622: A5 0C    JZ    0x1B2F
(0664) 			switch(scancode) {
    1624: 52 FC    MOV   A,[X-4]
    1626: 54 04    MOV   [X+4],A
    1628: 56 03 00 MOV   [X+3],0x0
    162B: 3D 03 00 CMP   [X+3],0x0
    162E: B0 06    JNZ   0x1635
    1630: 3D 04 58 CMP   [X+4],0x58
    1633: A1 05    JZ    0x1739
    1635: 52 04    MOV   A,[X+4]
    1637: 11 59    SUB   A,0x59
    1639: 62 D0 00 MOV   REG[0xD0],0x0
    163C: 53 15    MOV   [__rY],A
    163E: 52 03    MOV   A,[X+3]
    1640: 31 80    XOR   A,0x80
    1642: 19 80    SBB   A,0x80
    1644: 2A 15    OR    A,[__rY]
    1646: A0 64    JZ    0x16AB
    1648: D0 41    JNC   0x168A
    164A: 3D 03 00 CMP   [X+3],0x0
    164D: B0 06    JNZ   0x1654
    164F: 3D 04 05 CMP   [X+4],0x5
    1652: A1 92    JZ    0x17E5
    1654: 3D 03 00 CMP   [X+3],0x0
    1657: B0 06    JNZ   0x165E
    1659: 3D 04 06 CMP   [X+4],0x6
    165C: A1 B8    JZ    0x1815
    165E: 52 04    MOV   A,[X+4]
    1660: 11 05    SUB   A,0x5
    1662: 52 03    MOV   A,[X+3]
    1664: 31 80    XOR   A,0x80
    1666: 19 80    SBB   A,0x80
    1668: C1 DA    JC    0x1843
    166A: 3D 03 00 CMP   [X+3],0x0
    166D: B0 06    JNZ   0x1674
    166F: 3D 04 11 CMP   [X+4],0x11
    1672: A0 62    JZ    0x16D5
    1674: 3D 03 00 CMP   [X+3],0x0
    1677: B0 06    JNZ   0x167E
    1679: 3D 04 12 CMP   [X+4],0x12
    167C: A0 3C    JZ    0x16B9
    167E: 3D 03 00 CMP   [X+3],0x0
    1681: B0 06    JNZ   0x1688
    1683: 3D 04 14 CMP   [X+4],0x14
    1686: A0 40    JZ    0x16C7
    1688: 81 BA    JMP   0x1843
    168A: 52 04    MOV   A,[X+4]
    168C: 11 77    SUB   A,0x77
    168E: 62 D0 00 MOV   REG[0xD0],0x0
    1691: 53 15    MOV   [__rY],A
    1693: 52 03    MOV   A,[X+3]
    1695: 31 80    XOR   A,0x80
    1697: 19 80    SBB   A,0x80
    1699: C1 A9    JC    0x1843
    169B: 2A 15    OR    A,[__rY]
    169D: A0 45    JZ    0x16E3
    169F: 3D 03 00 CMP   [X+3],0x0
    16A2: B0 06    JNZ   0x16A9
    16A4: 3D 04 7E CMP   [X+4],0x7E
    16A7: A0 E7    JZ    0x178F
    16A9: 81 99    JMP   0x1843
(0665) 			case 0x59:	// Right Shift
(0666) 				shiftstatus |= 0x01;
    16AB: 62 D0 00 MOV   REG[0xD0],0x0
    16AE: 2E 5F 01 OR    [0x5F],0x1
(0667) 				ShiftDown = 1;
    16B1: 62 D0 00 MOV   REG[0xD0],0x0
    16B4: 55 69 01 MOV   [ShiftDown],0x1
(0668) 				break;
    16B7: 85 A6    JMP   0x1C5E
(0669) 			case 0x12:	// Left Shift
(0670) 				shiftstatus |= 0x02;
    16B9: 62 D0 00 MOV   REG[0xD0],0x0
    16BC: 2E 5F 02 OR    [0x5F],0x2
(0671) 				ShiftDown = 1;
    16BF: 62 D0 00 MOV   REG[0xD0],0x0
    16C2: 55 69 01 MOV   [ShiftDown],0x1
(0672) 				break;
    16C5: 85 98    JMP   0x1C5E
(0673) 			case 0x14:	// Left Control
(0674) 				ctrlstatus |= 0x02;
    16C7: 62 D0 00 MOV   REG[0xD0],0x0
    16CA: 2E 5E 02 OR    [0x5E],0x2
(0675) 				CtrlDown = 1;
    16CD: 62 D0 00 MOV   REG[0xD0],0x0
    16D0: 55 6A 01 MOV   [CtrlDown],0x1
(0676) 				break;
    16D3: 85 8A    JMP   0x1C5E
(0677) 			case 0x11:	// Left Alt
(0678) 				altstatus |= 0x02;
    16D5: 62 D0 00 MOV   REG[0xD0],0x0
    16D8: 2E 5D 02 OR    [0x5D],0x2
(0679) 				AltDown = 1;
    16DB: 62 D0 00 MOV   REG[0xD0],0x0
    16DE: 55 6B 01 MOV   [AltDown],0x1
(0680) 				break;
    16E1: 85 7C    JMP   0x1C5E
(0681) 			case 0x77:	// Num Lock
(0682) 				NumLock ^= 0x01;
    16E3: 62 D0 00 MOV   REG[0xD0],0x0
    16E6: 51 66    MOV   A,[NumLock]
    16E8: 31 01    XOR   A,0x1
    16EA: 53 66    MOV   [NumLock],A
(0683) 				if (NumLock) {
    16EC: 3C 66 00 CMP   [NumLock],0x0
    16EF: A0 25    JZ    0x1715
(0684) 					status = PS2_Send_Command_Process_Response(0xED);
    16F1: 50 ED    MOV   A,0xED
    16F3: 08       PUSH  A
    16F4: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    16F7: 38 FF    ADD   SP,0xFF
    16F9: 54 02    MOV   [X+2],A
(0685) 					if (!status) {
    16FB: 3D 02 00 CMP   [X+2],0x0
    16FE: B5 5F    JNZ   0x1C5E
(0686) 						statusLEDs |= 0x02;
    1700: 62 D0 00 MOV   REG[0xD0],0x0
    1703: 2E 60 02 OR    [0x60],0x2
(0687) 						status = PS2_Send_Command_Process_Response(statusLEDs);
    1706: 51 60    MOV   A,[0x60]
    1708: 08       PUSH  A
    1709: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    170C: 38 FF    ADD   SP,0xFF
    170E: 62 D0 00 MOV   REG[0xD0],0x0
    1711: 54 02    MOV   [X+2],A
(0688) 					}
(0689) 				}
    1713: 85 4A    JMP   0x1C5E
(0690) 				else {
(0691) 					status = PS2_Send_Command_Process_Response(0xED);
    1715: 50 ED    MOV   A,0xED
    1717: 08       PUSH  A
    1718: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    171B: 38 FF    ADD   SP,0xFF
    171D: 54 02    MOV   [X+2],A
(0692) 					if (!status) {
    171F: 3D 02 00 CMP   [X+2],0x0
    1722: B5 3B    JNZ   0x1C5E
(0693) 						statusLEDs &= ~0x02;
    1724: 62 D0 00 MOV   REG[0xD0],0x0
    1727: 26 60 FD AND   [0x60],0xFD
(0694) 						status = PS2_Send_Command_Process_Response(statusLEDs);
    172A: 51 60    MOV   A,[0x60]
    172C: 08       PUSH  A
    172D: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    1730: 38 FF    ADD   SP,0xFF
    1732: 62 D0 00 MOV   REG[0xD0],0x0
    1735: 54 02    MOV   [X+2],A
(0695) 					}
(0696) 				}
(0697) 				break;
    1737: 85 26    JMP   0x1C5E
(0698) 			case 0x58:	// Caps Lock
(0699) 				//// Send to the keyboard
(0700) 				CapsLock ^= 0x01;
    1739: 62 D0 00 MOV   REG[0xD0],0x0
    173C: 51 67    MOV   A,[CapsLock]
    173E: 31 01    XOR   A,0x1
    1740: 53 67    MOV   [CapsLock],A
(0701) 				if (CapsLock) {
    1742: 3C 67 00 CMP   [CapsLock],0x0
    1745: A0 25    JZ    0x176B
(0702) 					status = PS2_Send_Command_Process_Response(0xED);
    1747: 50 ED    MOV   A,0xED
    1749: 08       PUSH  A
    174A: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    174D: 38 FF    ADD   SP,0xFF
    174F: 54 02    MOV   [X+2],A
(0703) 					if (!status) {
    1751: 3D 02 00 CMP   [X+2],0x0
    1754: B5 09    JNZ   0x1C5E
(0704) 						statusLEDs |= 0x04;
    1756: 62 D0 00 MOV   REG[0xD0],0x0
    1759: 2E 60 04 OR    [0x60],0x4
(0705) 						status = PS2_Send_Command_Process_Response(statusLEDs);
    175C: 51 60    MOV   A,[0x60]
    175E: 08       PUSH  A
    175F: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    1762: 38 FF    ADD   SP,0xFF
    1764: 62 D0 00 MOV   REG[0xD0],0x0
    1767: 54 02    MOV   [X+2],A
(0706) 					}
(0707) 				}
    1769: 84 F4    JMP   0x1C5E
(0708) 				else {
(0709) 					status = PS2_Send_Command_Process_Response(0xED);
    176B: 50 ED    MOV   A,0xED
    176D: 08       PUSH  A
    176E: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    1771: 38 FF    ADD   SP,0xFF
    1773: 54 02    MOV   [X+2],A
(0710) 					if (!status) {
    1775: 3D 02 00 CMP   [X+2],0x0
    1778: B4 E5    JNZ   0x1C5E
(0711) 						statusLEDs &= ~0x04;
    177A: 62 D0 00 MOV   REG[0xD0],0x0
    177D: 26 60 FB AND   [0x60],0xFB
(0712) 						status = PS2_Send_Command_Process_Response(statusLEDs);
    1780: 51 60    MOV   A,[0x60]
    1782: 08       PUSH  A
    1783: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    1786: 38 FF    ADD   SP,0xFF
    1788: 62 D0 00 MOV   REG[0xD0],0x0
    178B: 54 02    MOV   [X+2],A
(0713) 					}
(0714) 				}
(0715) 				break;
    178D: 84 D0    JMP   0x1C5E
(0716) 			case 0x7E:	// Scroll Lock
(0717) 				//// Send to the keyboard
(0718) 				ScrollLock ^= 0x01;
    178F: 62 D0 00 MOV   REG[0xD0],0x0
    1792: 51 68    MOV   A,[ScrollLock]
    1794: 31 01    XOR   A,0x1
    1796: 53 68    MOV   [ScrollLock],A
(0719) 				if (ScrollLock) {
    1798: 3C 68 00 CMP   [ScrollLock],0x0
    179B: A0 25    JZ    0x17C1
(0720) 					status = PS2_Send_Command_Process_Response(0xED);
    179D: 50 ED    MOV   A,0xED
    179F: 08       PUSH  A
    17A0: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    17A3: 38 FF    ADD   SP,0xFF
    17A5: 54 02    MOV   [X+2],A
(0721) 					if (!status) {
    17A7: 3D 02 00 CMP   [X+2],0x0
    17AA: B4 B3    JNZ   0x1C5E
(0722) 						statusLEDs |= 0x01;
    17AC: 62 D0 00 MOV   REG[0xD0],0x0
    17AF: 2E 60 01 OR    [0x60],0x1
(0723) 						status = PS2_Send_Command_Process_Response(statusLEDs);
    17B2: 51 60    MOV   A,[0x60]
    17B4: 08       PUSH  A
    17B5: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    17B8: 38 FF    ADD   SP,0xFF
    17BA: 62 D0 00 MOV   REG[0xD0],0x0
    17BD: 54 02    MOV   [X+2],A
(0724) 					}
(0725) 				}
    17BF: 84 9E    JMP   0x1C5E
(0726) 				else {
(0727) 					status = PS2_Send_Command_Process_Response(0xED);
    17C1: 50 ED    MOV   A,0xED
    17C3: 08       PUSH  A
    17C4: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    17C7: 38 FF    ADD   SP,0xFF
    17C9: 54 02    MOV   [X+2],A
(0728) 					if (!status) {
    17CB: 3D 02 00 CMP   [X+2],0x0
    17CE: B4 8F    JNZ   0x1C5E
(0729) 						statusLEDs &= ~0x01;
    17D0: 62 D0 00 MOV   REG[0xD0],0x0
    17D3: 26 60 FE AND   [0x60],0xFE
(0730) 						status = PS2_Send_Command_Process_Response(statusLEDs);
    17D6: 51 60    MOV   A,[0x60]
    17D8: 08       PUSH  A
    17D9: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    17DC: 38 FF    ADD   SP,0xFF
    17DE: 62 D0 00 MOV   REG[0xD0],0x0
    17E1: 54 02    MOV   [X+2],A
(0731) 					}
(0732) 				}
(0733) 				break;
    17E3: 84 7A    JMP   0x1C5E
(0734) 			case 0x05:	// F1 - Dim the LED
(0735) 				if (brightindex > 31) {
    17E5: 62 D0 00 MOV   REG[0xD0],0x0
    17E8: 50 1F    MOV   A,0x1F
    17EA: 3A 6F    CMP   A,[DeleteDown+1]
    17EC: D0 13    JNC   0x1800
(0736) 					brightindex -= 32;
    17EE: 62 D0 00 MOV   REG[0xD0],0x0
    17F1: 51 6F    MOV   A,[DeleteDown+1]
    17F3: 11 20    SUB   A,0x20
    17F5: 53 6F    MOV   [DeleteDown+1],A
(0737) 					PWM8LED_WritePulseWidth(brightindex);
    17F7: 10       PUSH  X
    17F8: 51 6F    MOV   A,[DeleteDown+1]
    17FA: 7C 0A FB LCALL _PWM8LED_WritePulseWidth
    17FD: 20       POP   X
(0738) 				}
    17FE: 84 5F    JMP   0x1C5E
(0739) 				else if (brightindex == 31){
    1800: 62 D0 00 MOV   REG[0xD0],0x0
    1803: 3C 6F 1F CMP   [DeleteDown+1],0x1F
    1806: B4 57    JNZ   0x1C5E
(0740) 					brightindex -= 31;
    1808: 51 6F    MOV   A,[DeleteDown+1]
    180A: 11 1F    SUB   A,0x1F
    180C: 53 6F    MOV   [DeleteDown+1],A
(0741) 					PWM8LED_Stop();
    180E: 10       PUSH  X
    180F: 7C 0A F4 LCALL _PWM8LED_Stop
    1812: 20       POP   X
(0742) 				}
(0743) 				break;
    1813: 84 4A    JMP   0x1C5E
(0744) 			case 0x06:	// F2 - Brighten the LED
(0745) 				if (brightindex == 0) {
    1815: 62 D0 00 MOV   REG[0xD0],0x0
    1818: 3C 6F 00 CMP   [DeleteDown+1],0x0
    181B: B0 10    JNZ   0x182C
(0746) 					brightindex += 31;
    181D: 06 6F 1F ADD   [DeleteDown+1],0x1F
(0747) 					PWM8LED_WritePulseWidth(brightindex);
    1820: 10       PUSH  X
    1821: 51 6F    MOV   A,[DeleteDown+1]
    1823: 7C 0A FB LCALL _PWM8LED_WritePulseWidth
(0748) 					PWM8LED_Start();
    1826: 7C 0A F0 LCALL _PWM8LED_Start
    1829: 20       POP   X
(0749) 				}
    182A: 84 33    JMP   0x1C5E
(0750) 				else if (brightindex < 255) {
    182C: 62 D0 00 MOV   REG[0xD0],0x0
    182F: 3C 6F FF CMP   [DeleteDown+1],0xFF
    1832: D4 2B    JNC   0x1C5E
(0751) 					brightindex += 32;
    1834: 62 D0 00 MOV   REG[0xD0],0x0
    1837: 06 6F 20 ADD   [DeleteDown+1],0x20
(0752) 					PWM8LED_WritePulseWidth(brightindex);
    183A: 10       PUSH  X
    183B: 51 6F    MOV   A,[DeleteDown+1]
    183D: 7C 0A FB LCALL _PWM8LED_WritePulseWidth
    1840: 20       POP   X
(0753) 				}
(0754) 				break;
    1841: 84 1C    JMP   0x1C5E
(0755) 			//// Any single-byte scan codes not handled specially in the above switch statement
(0756) 			//// are handled here:
(0757) 			default:
(0758) 				if (PianoMode) {
    1843: 62 D0 00 MOV   REG[0xD0],0x0
    1846: 3C 6C 00 CMP   [PianoMode],0x0
    1849: A4 14    JZ    0x1C5E
(0759) 					i = 0;
    184B: 56 01 00 MOV   [X+1],0x0
    184E: 56 00 00 MOV   [X+0],0x0
    1851: 80 06    JMP   0x1858
(0760) 					while((PianoScancode[i][0] != scancode) && (PianoScancode[i][0] != 0)) {
(0761) 						i++;
    1853: 77 01    INC   [X+1]
    1855: 0F 00 00 ADC   [X+0],0x0
(0762) 					}
    1858: 62 D0 00 MOV   REG[0xD0],0x0
    185B: 52 00    MOV   A,[X+0]
    185D: 08       PUSH  A
    185E: 52 01    MOV   A,[X+1]
    1860: 08       PUSH  A
    1861: 50 00    MOV   A,0x0
    1863: 08       PUSH  A
    1864: 50 06    MOV   A,0x6
    1866: 08       PUSH  A
    1867: 7C 2D 9C LCALL 0x2D9C
    186A: 38 FC    ADD   SP,0xFC
    186C: 51 16    MOV   A,[__rX]
    186E: 53 21    MOV   [__r1],A
    1870: 51 15    MOV   A,[__rY]
    1872: 53 22    MOV   [__r0],A
    1874: 06 21 91 ADD   [__r1],0x91
    1877: 0E 22 02 ADC   [__r0],0x2
    187A: 51 22    MOV   A,[__r0]
    187C: 10       PUSH  X
    187D: 58 21    MOV   X,[__r1]
    187F: 08       PUSH  A
    1880: 28       ROMX  
    1881: 53 22    MOV   [__r0],A
    1883: 18       POP   A
    1884: 75       INC   X
    1885: 09 00    ADC   A,0x0
    1887: 28       ROMX  
    1888: 53 21    MOV   [__r1],A
    188A: 20       POP   X
    188B: 52 FC    MOV   A,[X-4]
    188D: 53 1F    MOV   [__r3],A
    188F: 55 20 00 MOV   [__r2],0x0
    1892: 51 22    MOV   A,[__r0]
    1894: 3A 20    CMP   A,[__r2]
    1896: B0 07    JNZ   0x189E
    1898: 51 21    MOV   A,[__r1]
    189A: 3A 1F    CMP   A,[__r3]
    189C: A0 0E    JZ    0x18AB
    189E: 62 D0 00 MOV   REG[0xD0],0x0
    18A1: 3C 22 00 CMP   [__r0],0x0
    18A4: BF AE    JNZ   0x1853
    18A6: 3C 21 00 CMP   [__r1],0x0
    18A9: BF A9    JNZ   0x1853
(0763) 					
(0764) 					
(0765) //					if (PianoScancode[i][0] > 0) {
(0766) //						PWMPiano1_WritePeriod(PianoScancode[i][1]);
(0767) //						PWMPiano1_WritePulseWidth(PianoScancode[i][2]);
(0768) //						PWMPiano1_Start();
(0769) //					}
(0770) 						
(0771) 					
(0772) 					
(0773) 					if (PianoScancode[i][0] > 0 && i <= 7) {
    18AB: 62 D0 00 MOV   REG[0xD0],0x0
    18AE: 52 00    MOV   A,[X+0]
    18B0: 08       PUSH  A
    18B1: 52 01    MOV   A,[X+1]
    18B3: 08       PUSH  A
    18B4: 50 00    MOV   A,0x0
    18B6: 08       PUSH  A
    18B7: 50 06    MOV   A,0x6
    18B9: 08       PUSH  A
    18BA: 7C 2D 9C LCALL 0x2D9C
    18BD: 38 FC    ADD   SP,0xFC
    18BF: 51 16    MOV   A,[__rX]
    18C1: 53 21    MOV   [__r1],A
    18C3: 51 15    MOV   A,[__rY]
    18C5: 53 22    MOV   [__r0],A
    18C7: 06 21 91 ADD   [__r1],0x91
    18CA: 0E 22 02 ADC   [__r0],0x2
    18CD: 51 22    MOV   A,[__r0]
    18CF: 10       PUSH  X
    18D0: 58 21    MOV   X,[__r1]
    18D2: 08       PUSH  A
    18D3: 28       ROMX  
    18D4: 53 22    MOV   [__r0],A
    18D6: 18       POP   A
    18D7: 75       INC   X
    18D8: 09 00    ADC   A,0x0
    18DA: 28       ROMX  
    18DB: 20       POP   X
    18DC: 3C 22 00 CMP   [__r0],0x0
    18DF: B0 05    JNZ   0x18E5
    18E1: 39 00    CMP   A,0x0
    18E3: A0 91    JZ    0x1975
    18E5: 50 07    MOV   A,0x7
    18E7: 13 01    SUB   A,[X+1]
    18E9: 52 00    MOV   A,[X+0]
    18EB: 31 80    XOR   A,0x80
    18ED: 62 D0 00 MOV   REG[0xD0],0x0
    18F0: 53 16    MOV   [__rX],A
    18F2: 50 80    MOV   A,0x80
    18F4: 1A 16    SBB   A,[__rX]
    18F6: C0 7E    JC    0x1975
(0774) 						PWMPiano1_WritePeriod(PianoScancode[i][1]);
    18F8: 62 D0 00 MOV   REG[0xD0],0x0
    18FB: 52 00    MOV   A,[X+0]
    18FD: 08       PUSH  A
    18FE: 52 01    MOV   A,[X+1]
    1900: 08       PUSH  A
    1901: 50 00    MOV   A,0x0
    1903: 08       PUSH  A
    1904: 50 06    MOV   A,0x6
    1906: 08       PUSH  A
    1907: 7C 2D 9C LCALL 0x2D9C
    190A: 38 FC    ADD   SP,0xFC
    190C: 51 16    MOV   A,[__rX]
    190E: 53 21    MOV   [__r1],A
    1910: 51 15    MOV   A,[__rY]
    1912: 53 22    MOV   [__r0],A
    1914: 06 21 93 ADD   [__r1],0x93
    1917: 0E 22 02 ADC   [__r0],0x2
    191A: 51 22    MOV   A,[__r0]
    191C: 10       PUSH  X
    191D: 58 21    MOV   X,[__r1]
    191F: 08       PUSH  A
    1920: 28       ROMX  
    1921: 53 22    MOV   [__r0],A
    1923: 18       POP   A
    1924: 75       INC   X
    1925: 09 00    ADC   A,0x0
    1927: 28       ROMX  
    1928: 53 21    MOV   [__r1],A
    192A: 51 22    MOV   A,[__r0]
    192C: 08       PUSH  A
    192D: 51 21    MOV   A,[__r1]
    192F: 20       POP   X
    1930: 7C 0A 9B LCALL _PWMPiano1_WritePeriod
    1933: 20       POP   X
(0775) 						PWMPiano1_WritePulseWidth(PianoScancode[i][2]);
    1934: 62 D0 00 MOV   REG[0xD0],0x0
    1937: 52 00    MOV   A,[X+0]
    1939: 08       PUSH  A
    193A: 52 01    MOV   A,[X+1]
    193C: 08       PUSH  A
    193D: 50 00    MOV   A,0x0
    193F: 08       PUSH  A
    1940: 50 06    MOV   A,0x6
    1942: 08       PUSH  A
    1943: 7C 2D 9C LCALL 0x2D9C
    1946: 38 FC    ADD   SP,0xFC
    1948: 51 16    MOV   A,[__rX]
    194A: 53 21    MOV   [__r1],A
    194C: 51 15    MOV   A,[__rY]
    194E: 53 22    MOV   [__r0],A
    1950: 06 21 95 ADD   [__r1],0x95
    1953: 0E 22 02 ADC   [__r0],0x2
    1956: 51 22    MOV   A,[__r0]
    1958: 10       PUSH  X
    1959: 58 21    MOV   X,[__r1]
    195B: 08       PUSH  A
    195C: 28       ROMX  
    195D: 53 22    MOV   [__r0],A
    195F: 18       POP   A
    1960: 75       INC   X
    1961: 09 00    ADC   A,0x0
    1963: 28       ROMX  
    1964: 53 21    MOV   [__r1],A
    1966: 51 22    MOV   A,[__r0]
    1968: 08       PUSH  A
    1969: 51 21    MOV   A,[__r1]
    196B: 20       POP   X
    196C: 7C 0A A1 LCALL _PWMPiano1_WritePulseWidth
(0776) 						PWMPiano1_Start();
    196F: 7C 0A 93 LCALL _PWMPiano1_Start
    1972: 20       POP   X
(0777) 					} else if (PianoScancode[i][0] > 0 && i > 7 && i <= 15) {
    1973: 82 EA    JMP   0x1C5E
    1975: 62 D0 00 MOV   REG[0xD0],0x0
    1978: 52 00    MOV   A,[X+0]
    197A: 08       PUSH  A
    197B: 52 01    MOV   A,[X+1]
    197D: 08       PUSH  A
    197E: 50 00    MOV   A,0x0
    1980: 08       PUSH  A
    1981: 50 06    MOV   A,0x6
    1983: 08       PUSH  A
    1984: 7C 2D 9C LCALL 0x2D9C
    1987: 38 FC    ADD   SP,0xFC
    1989: 51 16    MOV   A,[__rX]
    198B: 53 21    MOV   [__r1],A
    198D: 51 15    MOV   A,[__rY]
    198F: 53 22    MOV   [__r0],A
    1991: 06 21 91 ADD   [__r1],0x91
    1994: 0E 22 02 ADC   [__r0],0x2
    1997: 51 22    MOV   A,[__r0]
    1999: 10       PUSH  X
    199A: 58 21    MOV   X,[__r1]
    199C: 08       PUSH  A
    199D: 28       ROMX  
    199E: 53 22    MOV   [__r0],A
    19A0: 18       POP   A
    19A1: 75       INC   X
    19A2: 09 00    ADC   A,0x0
    19A4: 28       ROMX  
    19A5: 20       POP   X
    19A6: 3C 22 00 CMP   [__r0],0x0
    19A9: B0 05    JNZ   0x19AF
    19AB: 39 00    CMP   A,0x0
    19AD: A0 A4    JZ    0x1A52
    19AF: 50 07    MOV   A,0x7
    19B1: 13 01    SUB   A,[X+1]
    19B3: 52 00    MOV   A,[X+0]
    19B5: 31 80    XOR   A,0x80
    19B7: 62 D0 00 MOV   REG[0xD0],0x0
    19BA: 53 16    MOV   [__rX],A
    19BC: 50 80    MOV   A,0x80
    19BE: 1A 16    SBB   A,[__rX]
    19C0: D0 91    JNC   0x1A52
    19C2: 50 0F    MOV   A,0xF
    19C4: 13 01    SUB   A,[X+1]
    19C6: 52 00    MOV   A,[X+0]
    19C8: 31 80    XOR   A,0x80
    19CA: 62 D0 00 MOV   REG[0xD0],0x0
    19CD: 53 16    MOV   [__rX],A
    19CF: 50 80    MOV   A,0x80
    19D1: 1A 16    SBB   A,[__rX]
    19D3: C0 7E    JC    0x1A52
(0778) 						PWMPiano2_WritePeriod(PianoScancode[i][1]);
    19D5: 62 D0 00 MOV   REG[0xD0],0x0
    19D8: 52 00    MOV   A,[X+0]
    19DA: 08       PUSH  A
    19DB: 52 01    MOV   A,[X+1]
    19DD: 08       PUSH  A
    19DE: 50 00    MOV   A,0x0
    19E0: 08       PUSH  A
    19E1: 50 06    MOV   A,0x6
    19E3: 08       PUSH  A
    19E4: 7C 2D 9C LCALL 0x2D9C
    19E7: 38 FC    ADD   SP,0xFC
    19E9: 51 16    MOV   A,[__rX]
    19EB: 53 21    MOV   [__r1],A
    19ED: 51 15    MOV   A,[__rY]
    19EF: 53 22    MOV   [__r0],A
    19F1: 06 21 93 ADD   [__r1],0x93
    19F4: 0E 22 02 ADC   [__r0],0x2
    19F7: 51 22    MOV   A,[__r0]
    19F9: 10       PUSH  X
    19FA: 58 21    MOV   X,[__r1]
    19FC: 08       PUSH  A
    19FD: 28       ROMX  
    19FE: 53 22    MOV   [__r0],A
    1A00: 18       POP   A
    1A01: 75       INC   X
    1A02: 09 00    ADC   A,0x0
    1A04: 28       ROMX  
    1A05: 53 21    MOV   [__r1],A
    1A07: 51 22    MOV   A,[__r0]
    1A09: 08       PUSH  A
    1A0A: 51 21    MOV   A,[__r1]
    1A0C: 20       POP   X
    1A0D: 7C 0A 3E LCALL _PWMPiano2_WritePeriod
    1A10: 20       POP   X
(0779) 						PWMPiano2_WritePulseWidth(PianoScancode[i][2]);
    1A11: 62 D0 00 MOV   REG[0xD0],0x0
    1A14: 52 00    MOV   A,[X+0]
    1A16: 08       PUSH  A
    1A17: 52 01    MOV   A,[X+1]
    1A19: 08       PUSH  A
    1A1A: 50 00    MOV   A,0x0
    1A1C: 08       PUSH  A
    1A1D: 50 06    MOV   A,0x6
    1A1F: 08       PUSH  A
    1A20: 7C 2D 9C LCALL 0x2D9C
    1A23: 38 FC    ADD   SP,0xFC
    1A25: 51 16    MOV   A,[__rX]
    1A27: 53 21    MOV   [__r1],A
    1A29: 51 15    MOV   A,[__rY]
    1A2B: 53 22    MOV   [__r0],A
    1A2D: 06 21 95 ADD   [__r1],0x95
    1A30: 0E 22 02 ADC   [__r0],0x2
    1A33: 51 22    MOV   A,[__r0]
    1A35: 10       PUSH  X
    1A36: 58 21    MOV   X,[__r1]
    1A38: 08       PUSH  A
    1A39: 28       ROMX  
    1A3A: 53 22    MOV   [__r0],A
    1A3C: 18       POP   A
    1A3D: 75       INC   X
    1A3E: 09 00    ADC   A,0x0
    1A40: 28       ROMX  
    1A41: 53 21    MOV   [__r1],A
    1A43: 51 22    MOV   A,[__r0]
    1A45: 08       PUSH  A
    1A46: 51 21    MOV   A,[__r1]
    1A48: 20       POP   X
    1A49: 7C 0A 44 LCALL _PWMPiano2_WritePulseWidth
(0780) 						PWMPiano2_Start();
    1A4C: 7C 0A 36 LCALL _PWMPiano2_Start
    1A4F: 20       POP   X
(0781) 					} else if (PianoScancode[i][0] > 0 && i > 15 && i <= 23) {
    1A50: 82 0D    JMP   0x1C5E
    1A52: 62 D0 00 MOV   REG[0xD0],0x0
    1A55: 52 00    MOV   A,[X+0]
    1A57: 08       PUSH  A
    1A58: 52 01    MOV   A,[X+1]
    1A5A: 08       PUSH  A
    1A5B: 50 00    MOV   A,0x0
    1A5D: 08       PUSH  A
    1A5E: 50 06    MOV   A,0x6
    1A60: 08       PUSH  A
    1A61: 7C 2D 9C LCALL 0x2D9C
    1A64: 38 FC    ADD   SP,0xFC
    1A66: 51 16    MOV   A,[__rX]
    1A68: 53 21    MOV   [__r1],A
    1A6A: 51 15    MOV   A,[__rY]
    1A6C: 53 22    MOV   [__r0],A
    1A6E: 06 21 91 ADD   [__r1],0x91
    1A71: 0E 22 02 ADC   [__r0],0x2
    1A74: 51 22    MOV   A,[__r0]
    1A76: 10       PUSH  X
    1A77: 58 21    MOV   X,[__r1]
    1A79: 08       PUSH  A
    1A7A: 28       ROMX  
    1A7B: 53 22    MOV   [__r0],A
    1A7D: 18       POP   A
    1A7E: 75       INC   X
    1A7F: 09 00    ADC   A,0x0
    1A81: 28       ROMX  
    1A82: 20       POP   X
    1A83: 3C 22 00 CMP   [__r0],0x0
    1A86: B0 05    JNZ   0x1A8C
    1A88: 39 00    CMP   A,0x0
    1A8A: A1 D3    JZ    0x1C5E
    1A8C: 50 0F    MOV   A,0xF
    1A8E: 13 01    SUB   A,[X+1]
    1A90: 52 00    MOV   A,[X+0]
    1A92: 31 80    XOR   A,0x80
    1A94: 62 D0 00 MOV   REG[0xD0],0x0
    1A97: 53 16    MOV   [__rX],A
    1A99: 50 80    MOV   A,0x80
    1A9B: 1A 16    SBB   A,[__rX]
    1A9D: D1 C0    JNC   0x1C5E
    1A9F: 50 17    MOV   A,0x17
    1AA1: 13 01    SUB   A,[X+1]
    1AA3: 52 00    MOV   A,[X+0]
    1AA5: 31 80    XOR   A,0x80
    1AA7: 62 D0 00 MOV   REG[0xD0],0x0
    1AAA: 53 16    MOV   [__rX],A
    1AAC: 50 80    MOV   A,0x80
    1AAE: 1A 16    SBB   A,[__rX]
    1AB0: C1 AD    JC    0x1C5E
(0782) 						PWMPiano3_WritePeriod(PianoScancode[i][1]);
    1AB2: 62 D0 00 MOV   REG[0xD0],0x0
    1AB5: 52 00    MOV   A,[X+0]
    1AB7: 08       PUSH  A
    1AB8: 52 01    MOV   A,[X+1]
    1ABA: 08       PUSH  A
    1ABB: 50 00    MOV   A,0x0
    1ABD: 08       PUSH  A
    1ABE: 50 06    MOV   A,0x6
    1AC0: 08       PUSH  A
    1AC1: 7C 2D 9C LCALL 0x2D9C
    1AC4: 38 FC    ADD   SP,0xFC
    1AC6: 51 16    MOV   A,[__rX]
    1AC8: 53 21    MOV   [__r1],A
    1ACA: 51 15    MOV   A,[__rY]
    1ACC: 53 22    MOV   [__r0],A
    1ACE: 06 21 93 ADD   [__r1],0x93
    1AD1: 0E 22 02 ADC   [__r0],0x2
    1AD4: 51 22    MOV   A,[__r0]
    1AD6: 10       PUSH  X
    1AD7: 58 21    MOV   X,[__r1]
    1AD9: 08       PUSH  A
    1ADA: 28       ROMX  
    1ADB: 53 22    MOV   [__r0],A
    1ADD: 18       POP   A
    1ADE: 75       INC   X
    1ADF: 09 00    ADC   A,0x0
    1AE1: 28       ROMX  
    1AE2: 53 21    MOV   [__r1],A
    1AE4: 51 22    MOV   A,[__r0]
    1AE6: 08       PUSH  A
    1AE7: 51 21    MOV   A,[__r1]
    1AE9: 20       POP   X
    1AEA: 7C 09 E1 LCALL _PWMPiano3_WritePeriod
    1AED: 20       POP   X
(0783) 						PWMPiano3_WritePulseWidth(PianoScancode[i][2]);
    1AEE: 62 D0 00 MOV   REG[0xD0],0x0
    1AF1: 52 00    MOV   A,[X+0]
    1AF3: 08       PUSH  A
    1AF4: 52 01    MOV   A,[X+1]
    1AF6: 08       PUSH  A
    1AF7: 50 00    MOV   A,0x0
    1AF9: 08       PUSH  A
    1AFA: 50 06    MOV   A,0x6
    1AFC: 08       PUSH  A
    1AFD: 7C 2D 9C LCALL 0x2D9C
    1B00: 38 FC    ADD   SP,0xFC
    1B02: 51 16    MOV   A,[__rX]
    1B04: 53 21    MOV   [__r1],A
    1B06: 51 15    MOV   A,[__rY]
    1B08: 53 22    MOV   [__r0],A
    1B0A: 06 21 95 ADD   [__r1],0x95
    1B0D: 0E 22 02 ADC   [__r0],0x2
    1B10: 51 22    MOV   A,[__r0]
    1B12: 10       PUSH  X
    1B13: 58 21    MOV   X,[__r1]
    1B15: 08       PUSH  A
    1B16: 28       ROMX  
    1B17: 53 22    MOV   [__r0],A
    1B19: 18       POP   A
    1B1A: 75       INC   X
    1B1B: 09 00    ADC   A,0x0
    1B1D: 28       ROMX  
    1B1E: 53 21    MOV   [__r1],A
    1B20: 51 22    MOV   A,[__r0]
    1B22: 08       PUSH  A
    1B23: 51 21    MOV   A,[__r1]
    1B25: 20       POP   X
    1B26: 7C 09 E7 LCALL _PWMPiano3_WritePulseWidth
(0784) 						PWMPiano3_Start();
    1B29: 7C 09 D9 LCALL _PWMPiano3_Start
    1B2C: 20       POP   X
(0785) 					} 
(0786) 				}
(0787) 			}
(0788) 			return;
    1B2D: 81 30    JMP   0x1C5E
(0789) 		}
(0790) 		//// Things to do when one of the single byte "make" scan code keys is released
(0791) 		if (codetype & KEY_BREAK) {
    1B2F: 48 FB 02 TST   [X-5],0x2
    1B32: A1 2B    JZ    0x1C5E
(0792) 			switch(scancode) {
    1B34: 52 FC    MOV   A,[X-4]
    1B36: 54 04    MOV   [X+4],A
    1B38: 56 03 00 MOV   [X+3],0x0
    1B3B: 3D 03 00 CMP   [X+3],0x0
    1B3E: B0 06    JNZ   0x1B45
    1B40: 3D 04 11 CMP   [X+4],0x11
    1B43: A0 64    JZ    0x1BA8
    1B45: 3D 03 00 CMP   [X+3],0x0
    1B48: B0 06    JNZ   0x1B4F
    1B4A: 3D 04 12 CMP   [X+4],0x12
    1B4D: A0 36    JZ    0x1B84
    1B4F: 3D 03 00 CMP   [X+3],0x0
    1B52: B0 06    JNZ   0x1B59
    1B54: 3D 04 14 CMP   [X+4],0x14
    1B57: A0 3D    JZ    0x1B95
    1B59: 52 04    MOV   A,[X+4]
    1B5B: 11 11    SUB   A,0x11
    1B5D: 52 03    MOV   A,[X+3]
    1B5F: 31 80    XOR   A,0x80
    1B61: 19 80    SBB   A,0x80
    1B63: C0 57    JC    0x1BBB
    1B65: 3D 03 00 CMP   [X+3],0x0
    1B68: B0 06    JNZ   0x1B6F
    1B6A: 3D 04 59 CMP   [X+4],0x59
    1B6D: A0 03    JZ    0x1B71
    1B6F: 80 4B    JMP   0x1BBB
(0793) 			case 0x59:	// Right Shift
(0794) 				shiftstatus &= ~0x01;
    1B71: 62 D0 00 MOV   REG[0xD0],0x0
    1B74: 26 5F FE AND   [0x5F],0xFE
(0795) 				if (!shiftstatus) ShiftDown = 0;
    1B77: 3C 5F 00 CMP   [0x5F],0x0
    1B7A: B0 E3    JNZ   0x1C5E
    1B7C: 62 D0 00 MOV   REG[0xD0],0x0
    1B7F: 55 69 00 MOV   [ShiftDown],0x0
(0796) 				break;
    1B82: 80 DB    JMP   0x1C5E
(0797) 			case 0x12:	// Left Shift
(0798) 				shiftstatus &= ~0x02;
    1B84: 62 D0 00 MOV   REG[0xD0],0x0
    1B87: 26 5F FD AND   [0x5F],0xFD
(0799) 				if (!shiftstatus) ShiftDown = 0;
    1B8A: 3C 5F 00 CMP   [0x5F],0x0
    1B8D: B0 07    JNZ   0x1B95
    1B8F: 62 D0 00 MOV   REG[0xD0],0x0
    1B92: 55 69 00 MOV   [ShiftDown],0x0
(0800) 			case 0x14:	// Left Control
(0801) 				ctrlstatus &= ~0x02;
    1B95: 62 D0 00 MOV   REG[0xD0],0x0
    1B98: 26 5E FD AND   [0x5E],0xFD
(0802) 				if (!ctrlstatus) CtrlDown = 0;
    1B9B: 3C 5E 00 CMP   [0x5E],0x0
    1B9E: B0 BF    JNZ   0x1C5E
    1BA0: 62 D0 00 MOV   REG[0xD0],0x0
    1BA3: 55 6A 00 MOV   [CtrlDown],0x0
(0803) 				break;
    1BA6: 80 B7    JMP   0x1C5E
(0804) 			case 0x11:	// Left Alt
(0805) 				altstatus &= ~0x02;
    1BA8: 62 D0 00 MOV   REG[0xD0],0x0
    1BAB: 26 5D FD AND   [0x5D],0xFD
(0806) 				if (!altstatus) AltDown = 0;
    1BAE: 3C 5D 00 CMP   [0x5D],0x0
    1BB1: B0 AC    JNZ   0x1C5E
    1BB3: 62 D0 00 MOV   REG[0xD0],0x0
    1BB6: 55 6B 00 MOV   [AltDown],0x0
(0807) 				break;
    1BB9: 80 A4    JMP   0x1C5E
(0808) 			//// Any single-byte scan codes not handled specially in the above switch statement
(0809) 			//// are handled here:
(0810) 			default:
(0811) 				if (scancode == 0x1A || scancode == 0x22 || scancode == 0x21 || scancode == 0x2A ||
    1BBB: 3D FC 1A CMP   [X-4],0x1A
    1BBE: A0 2C    JZ    0x1BEB
    1BC0: 3D FC 22 CMP   [X-4],0x22
    1BC3: A0 27    JZ    0x1BEB
    1BC5: 3D FC 21 CMP   [X-4],0x21
    1BC8: A0 22    JZ    0x1BEB
    1BCA: 3D FC 2A CMP   [X-4],0x2A
    1BCD: A0 1D    JZ    0x1BEB
    1BCF: 3D FC 32 CMP   [X-4],0x32
    1BD2: A0 18    JZ    0x1BEB
    1BD4: 3D FC 31 CMP   [X-4],0x31
    1BD7: A0 13    JZ    0x1BEB
    1BD9: 3D FC 3A CMP   [X-4],0x3A
    1BDC: A0 0E    JZ    0x1BEB
    1BDE: 3D FC 41 CMP   [X-4],0x41
    1BE1: B0 10    JNZ   0x1BF2
    1BE3: 62 D0 00 MOV   REG[0xD0],0x0
    1BE6: 3C 6C 00 CMP   [PianoMode],0x0
    1BE9: A0 08    JZ    0x1BF2
(0812) 					scancode == 0x32 || scancode == 0x31 || scancode == 0x3A || scancode == 0x41 && PianoMode) 
(0813) 				{
(0814) 						PWMPiano1_Stop();
    1BEB: 10       PUSH  X
    1BEC: 7C 0A 97 LCALL _PWMPiano1_Stop
    1BEF: 20       POP   X
(0815) 				} else if (scancode == 0x1C || scancode == 0x1B || scancode == 0x23 || scancode == 0x2B ||
    1BF0: 80 6D    JMP   0x1C5E
    1BF2: 3D FC 1C CMP   [X-4],0x1C
    1BF5: A0 2C    JZ    0x1C22
    1BF7: 3D FC 1B CMP   [X-4],0x1B
    1BFA: A0 27    JZ    0x1C22
    1BFC: 3D FC 23 CMP   [X-4],0x23
    1BFF: A0 22    JZ    0x1C22
    1C01: 3D FC 2B CMP   [X-4],0x2B
    1C04: A0 1D    JZ    0x1C22
    1C06: 3D FC 34 CMP   [X-4],0x34
    1C09: A0 18    JZ    0x1C22
    1C0B: 3D FC 33 CMP   [X-4],0x33
    1C0E: A0 13    JZ    0x1C22
    1C10: 3D FC 3B CMP   [X-4],0x3B
    1C13: A0 0E    JZ    0x1C22
    1C15: 3D FC 42 CMP   [X-4],0x42
    1C18: B0 10    JNZ   0x1C29
    1C1A: 62 D0 00 MOV   REG[0xD0],0x0
    1C1D: 3C 6C 00 CMP   [PianoMode],0x0
    1C20: A0 08    JZ    0x1C29
(0816) 					scancode == 0x34 || scancode == 0x33 || scancode == 0x3B || scancode == 0x42 && PianoMode) 
(0817) 				{
(0818) 						PWMPiano2_Stop();
    1C22: 10       PUSH  X
    1C23: 7C 0A 3A LCALL _PWMPiano2_Stop
    1C26: 20       POP   X
(0819) 				} else if (scancode == 0x15 || scancode == 0x1D || scancode == 0x24 || scancode == 0x2D ||
    1C27: 80 36    JMP   0x1C5E
    1C29: 3D FC 15 CMP   [X-4],0x15
    1C2C: A0 2C    JZ    0x1C59
    1C2E: 3D FC 1D CMP   [X-4],0x1D
    1C31: A0 27    JZ    0x1C59
    1C33: 3D FC 24 CMP   [X-4],0x24
    1C36: A0 22    JZ    0x1C59
    1C38: 3D FC 2D CMP   [X-4],0x2D
    1C3B: A0 1D    JZ    0x1C59
    1C3D: 3D FC 2C CMP   [X-4],0x2C
    1C40: A0 18    JZ    0x1C59
    1C42: 3D FC 35 CMP   [X-4],0x35
    1C45: A0 13    JZ    0x1C59
    1C47: 3D FC 3C CMP   [X-4],0x3C
    1C4A: A0 0E    JZ    0x1C59
    1C4C: 3D FC 43 CMP   [X-4],0x43
    1C4F: B0 0E    JNZ   0x1C5E
    1C51: 62 D0 00 MOV   REG[0xD0],0x0
    1C54: 3C 6C 00 CMP   [PianoMode],0x0
    1C57: A0 06    JZ    0x1C5E
(0820) 					scancode == 0x2C || scancode == 0x35 || scancode == 0x3C || scancode == 0x43 && PianoMode) 
(0821) 				{
(0822) 						PWMPiano3_Stop();
    1C59: 10       PUSH  X
    1C5A: 7C 09 DD LCALL _PWMPiano3_Stop
    1C5D: 20       POP   X
(0823) 				}
(0824) 				
(0825) //				
(0826) //				if (PianoMode && (!keyspressed)) {
(0827) //					PWMPiano1_Stop();
(0828) //					PWMPiano2_Stop();
(0829) //					PWMPiano3_Stop();
(0830) //				}
(0831) 			}
(0832) 		}
(0833) 	}
(0834) 	return;
    1C5E: 38 FB    ADD   SP,0xFB
    1C60: 20       POP   X
    1C61: 7F       RET   
FILE: Z:\DOCUME~1\ECE_381\PS2BIT~1\PS2BIT~1\main.c
(0001) //-----------------------------------------------------------------------------
(0002) // PS/2 Keyboard Bit-Banging Interface
(0003) //
(0004) // Uses the bit-banging technique to receive PS/2 frames from a PS/2 keyboard
(0005) // and decode them to extract the key scan codes sent from the keyboard.
(0006) //
(0007) // Uses a software state machine to decode the frames and verify that the
(0008) // Start, Parity, and Stop bits inside the frame have the correct values.
(0009) //
(0010) // The bit-banging interface is interrupt-driven and a DigBuf User Module is
(0011) // used to generate interrupts on the falling-edge of the PS/2 clock. The
(0012) // DigBuf ISR contains the frame decoding state machine which sets a global
(0013) // variable to indicate that a valid frame has been decoded and a scan code
(0014) // is ready for processing. In addition, a OneShot User Module is used to
(0015) // reset the state machine if the PS/2 clock line has remained high for 80us.
(0016) // This prevents any glitches on the clock line from causing the state machine
(0017) // to incorrectly start processing the glitch as a frame.
(0018) //
(0019) // Another software state machine is used to decode the keyboard scan codes
(0020) // to indicate which keys have been pressed or released.
(0021) //
(0022) // Raw scan codes read from the keyboard are printed on the LCD display.
(0023) //
(0024) // Scan codes corresponding to printable ASCII characters are sent to the
(0025) // UART for display on a terminal program.
(0026) //
(0027) // Some non-printable scan codes take specific actions. Examine this program
(0028) // for more details.
(0029) //
(0030) // Hardware Note: The PS/2 Clock and Data lines must both have pull-up
(0031) // resistors at the PSoC end in case the device is not attached.
(0032) //
(0033) // NOTE: Comments with an XXX in them refer to either things to be fixed/changed
(0034) //       or items I don't have enough information on.
(0035) //
(0036) // XXX - Some of the comments, including these in the introduction, have not
(0037) //       been updated to reflect that host-to-keyboard communication has been
(0038) //       implemented.
(0039) //
(0040) // Pretty-print this with:
(0041) // enscript -r -G -T4 -Ec -fCourier7 main.c
(0042) //
(0043) // B. Noble - 12 October 2011
(0044) //-----------------------------------------------------------------------------
(0045) 
(0046) #include <m8c.h>        // part specific constants and macros
(0047) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0048) #include "PSoCGPIOINT.h"
(0049) #include "ps2.h"
(0050) #include "keyboard.h"
(0051) #include "mouse.h"
(0052) 
(0053) 
(0054) //// Common Baud Rates for a 16-bit UART clock with a 24MHz clock source.
(0055) #define BAUD_57600_PERIOD	52
(0056) #define BAUD_38400_PERIOD	78
(0057) #define	BAUD_19200_PERIOD	156
(0058) #define	BAUD_9600_PERIOD	312
(0059) 
(0060) //// Global Variables (identified by names in LeadingCaps)
(0061) BYTE PS2FrameStatus = 0; // Note: This only changes at the end of a complete frame or when the PS2OneShot fires (due to incomplete clock)
(0062) BYTE PS2RxBuffer[16]; // Receive buffer. We save only up to 16 unprocessed scan codes.
(0063) BYTE PS2RxBufIn = 0; // Index of where we insert bytes in receive buffer
(0064) BYTE PS2RxBufOut = 0; // Index of where we read bytes out of the receive buffer
(0065) BYTE TenMicroSecTimerReps = 0; // Number of repetitions of the 10-microsecond timer
(0066) BYTE NumLock = 0; // 0-NumLock is off, 1-NumLock is on
(0067) BYTE CapsLock = 0; // 0-CapsLock is off, 1-CapsLock is on
(0068) BYTE ScrollLock = 0; // 0-ScrollLock is off, 1-ScrollLock is on
(0069) BYTE ShiftDown = 0; // 0-No Shift keys are pressed, 1-At least one Shift key is pressed
(0070) BYTE CtrlDown = 0; // 0-No Ctrl keys are pressed, 1-At least one Ctrl key is pressed
(0071) BYTE AltDown = 0; // 0-No Alt keys are pressed, 1-At least one Alt key is pressed
(0072) BYTE PianoMode = 0; // 0-The keyboard is in regular mode, 1-The keyboard is in piano mode
(0073) BYTE IsMouse = 0; // 0-The device is a keyboard, 1-The devices is a mouse
(0074) BYTE DeleteDown = 0; 
(0075) 
(0076) //// Port/Shadow Register Control Macros
(0077) #define LED1_ON			{LED1_DataShadow |=  LED1_MASK; LED1_Data_ADDR = LED1_DataShadow;}
(0078) #define LED1_OFF		{LED1_DataShadow &= ~LED1_MASK; LED1_Data_ADDR = LED1_DataShadow;}
(0079) #define LED1_TOGGLE		{LED1_DataShadow ^=  LED1_MASK; LED1_Data_ADDR = LED1_DataShadow;}
(0080) #define TRIGGER_HIGH	{TRIGGER_DataShadow |=  TRIGGER_MASK; TRIGGER_Data_ADDR = TRIGGER_DataShadow;}
(0081) #define TRIGGER_LOW		{TRIGGER_DataShadow &= ~TRIGGER_MASK; TRIGGER_Data_ADDR = TRIGGER_DataShadow;}
(0082) #define TRIGGER_TOGGLE	{TRIGGER_DataShadow ^=  TRIGGER_MASK; TRIGGER_Data_ADDR = TRIGGER_DataShadow;}
(0083) 
(0084) void main(void)
(0085) {
_main:
  c                    --> X+5
  keyspressed          --> X+4
  codetype             --> X+3
  cursor               --> X+2
  scancode             --> X+1
  status               --> X+0
    1C62: 10       PUSH  X
    1C63: 4F       MOV   X,SP
    1C64: 38 06    ADD   SP,0x6
(0086) 	char c;					// Generic character variable
(0087) 	BYTE status = 0;		// Generic status byte
    1C66: 56 00 00 MOV   [X+0],0x0
(0088) 	BYTE cursor = 0;		// LCD cursor position for printing of scan codes
    1C69: 56 02 00 MOV   [X+2],0x0
(0089) 	BYTE codetype = 0;		// Contains the type of keyboard scancode
    1C6C: 56 03 00 MOV   [X+3],0x0
(0090) 	BYTE keyspressed = 0;	// Count of the total number of keys currently held down
    1C6F: 56 04 00 MOV   [X+4],0x0
(0091) 	BYTE scancode;			// Keyboard scan code to process
(0092) 
(0093) 	/////////////////////////////////////////////////////////////////////////////////
(0094) 	// Since we use a shadow register for Port 1, we need to set all bits in it,
(0095) 	// controlled by StdCPU, to match the state we want them to be in initially.
(0096) 	// Write a 1 to our PS/2 Clock Out and Data pins which, in Open Drain Low mode,
(0097) 	// will let the PS/2 bus be pulled high. Also, turn off the Frame Error LED.
(0098) 	/////////////////////////////////////////////////////////////////////////////////
(0099) 	PS2CLOCK_HIGH;
    1C72: 62 D0 00 MOV   REG[0xD0],0x0
    1C75: 2E 00 08 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x8
    1C78: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    1C7A: 60 04    MOV   REG[0x4],A
(0100) 	PS2DATA_HIGH;
    1C7C: 2E 00 10 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    1C7F: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    1C81: 60 04    MOV   REG[0x4],A
(0101) 	LED1_OFF;
    1C83: 26 00 FE AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xFE
    1C86: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    1C88: 60 04    MOV   REG[0x4],A
(0102) 	//TRIGGER_HIGH; //// XXX - Diagnostics
(0103) 	//
(0104) 	/////////////////////////////////////////////////////////////////////////////////
(0105) 	// Start the UART clock and the UART
(0106) 	/////////////////////////////////////////////////////////////////////////////////
(0107) 	UARTClock_WritePeriod(BAUD_57600_PERIOD-1);
    1C8A: 10       PUSH  X
    1C8B: 57 00    MOV   X,0x0
    1C8D: 50 33    MOV   A,0x33
    1C8F: 7C 07 D0 LCALL _UARTClock_WritePeriod
(0108) 	UARTClock_WriteCompareValue((BAUD_57600_PERIOD>>1)-1);
    1C92: 57 00    MOV   X,0x0
    1C94: 50 19    MOV   A,0x19
    1C96: 7C 07 D6 LCALL _UARTClock_WriteCompareValue
(0109) 	UARTClock_Start();
    1C99: 7C 07 C8 LCALL _UARTClock_Start
(0110) 	UART_Start(UART_PARITY_NONE);
    1C9C: 50 00    MOV   A,0x0
    1C9E: 7C 08 40 LCALL _UART_Start
(0111) 	//
(0112) 	/////////////////////////////////////////////////////////////////////////////////
(0113) 	// Start the User Modules that will bit-bang the PS/2 frames in from the keyboard
(0114) 	/////////////////////////////////////////////////////////////////////////////////
(0115) 	PS2DigBuf_EnableInt();
    1CA1: 7C 0B 42 LCALL _PS2DigBuf_EnableInt
(0116) 	PS2DigBuf_Start();
    1CA4: 7C 0B 4A LCALL _PS2DigBuf_Start
(0117) 	PS2OneShot_Start();
    1CA7: 7C 0B 2E LCALL _PS2OneShot_Start
(0118) 	TenMicroSecTimer_EnableInt();
    1CAA: 7C 09 70 LCALL _TenMicroSecTimer_EnableInt
(0119) 	//
(0120) 	/////////////////////////////////////////////////////////////////////////////////
(0121) 	// Start the LCD, print an informational message and get it ready to print scan codes
(0122) 	/////////////////////////////////////////////////////////////////////////////////
(0123) 	LCD_Start();
    1CAD: 7C 0C 64 LCALL _LCD_Start|LCD_Init|LCD_Start|_LCD_Init
(0124) 	LCD_Position(0,0);	
    1CB0: 50 00    MOV   A,0x0
    1CB2: 57 00    MOV   X,0x0
    1CB4: 7C 0C D7 LCALL _LCD_Position
(0125) 	LCD_PrCString("PS/2 Bit-Banging");
    1CB7: 50 04    MOV   A,0x4
    1CB9: 08       PUSH  A
    1CBA: 50 CF    MOV   A,0xCF
    1CBC: 5C       MOV   X,A
    1CBD: 18       POP   A
    1CBE: 7C 0B 52 LCALL _LCD_PrCString
(0126) 	LCD_Position(1,0);	// Print the PS/2 keyboard scan codes on the second line.
    1CC1: 57 00    MOV   X,0x0
    1CC3: 50 01    MOV   A,0x1
    1CC5: 7C 0C D7 LCALL _LCD_Position
(0127) //	LCD_Control(LCD_CURSOR_WINK);	// Turn on the LCD cursor. See LCD.h.
(0128) 	LCD_Control(LCD_CURSOR_BLINK);	// Turn on the LCD cursor. See LCD.h.
    1CC8: 50 0F    MOV   A,0xF
    1CCA: 7C 0B B4 LCALL _LCD_Control
    1CCD: 20       POP   X
(0129) 	//
(0130) 	/////////////////////////////////////////////////////////////////////////////////
(0131) 	// Enable Global Interrupts
(0132) 	// Needed by the PS/2 bit-banging user modules PS2DigBuf and PS2OneShot
(0133) 	// and TenMicroSecTimer
(0134) 	/////////////////////////////////////////////////////////////////////////////////
(0135) 	M8C_EnableGInt;
    1CCE: 71 01    OR    F,0x1
(0136) 	//
(0137) 	/////////////////////////////////////////////////////////////////////////////////
(0138) 	// Print an informational message out to the host computer via the UART
(0139) 	/////////////////////////////////////////////////////////////////////////////////
(0140) 	UART_CPutString("\r\nPSoC PS/2 Bit-Banging Interface test program.\r\n");
    1CD0: 10       PUSH  X
    1CD1: 50 04    MOV   A,0x4
    1CD3: 08       PUSH  A
    1CD4: 50 9D    MOV   A,0x9D
    1CD6: 5C       MOV   X,A
    1CD7: 18       POP   A
    1CD8: 7C 09 55 LCALL _UART_CPutString
    1CDB: 20       POP   X
    1CDC: 81 2C    JMP   0x1E09
(0141) 	//
(0142) 	/////////////////////////////////////////////////////////////////////////////////
(0143) 	// Loop here until we detect a working PS/2 device.
(0144) 	/////////////////////////////////////////////////////////////////////////////////
(0145) 	while(1) {
(0146) 		LCD_Position(1,0);
    1CDE: 10       PUSH  X
    1CDF: 57 00    MOV   X,0x0
    1CE1: 50 01    MOV   A,0x1
    1CE3: 7C 0C D7 LCALL _LCD_Position
(0147) 		LCD_PrCString("Detecting Device");
    1CE6: 50 04    MOV   A,0x4
    1CE8: 08       PUSH  A
    1CE9: 50 8C    MOV   A,0x8C
    1CEB: 5C       MOV   X,A
    1CEC: 18       POP   A
    1CED: 7C 0B 52 LCALL _LCD_PrCString
    1CF0: 20       POP   X
(0148) 		status = PS2_Detect_Device();
    1CF1: 7C 27 22 LCALL _PS2_Detect_Device
    1CF4: 54 00    MOV   [X+0],A
(0149) 		if (!status) {
    1CF6: 3D 00 00 CMP   [X+0],0x0
    1CF9: B0 1C    JNZ   0x1D16
(0150) 			IsMouse = 0;
    1CFB: 62 D0 00 MOV   REG[0xD0],0x0
    1CFE: 55 6D 00 MOV   [IsMouse],0x0
(0151) 			LCD_Position(1,0);
    1D01: 10       PUSH  X
    1D02: 57 00    MOV   X,0x0
    1D04: 50 01    MOV   A,0x1
    1D06: 7C 0C D7 LCALL _LCD_Position
(0152) 			LCD_PrCString(" Keyboard Ready ");
    1D09: 50 04    MOV   A,0x4
    1D0B: 08       PUSH  A
    1D0C: 50 7B    MOV   A,0x7B
    1D0E: 5C       MOV   X,A
    1D0F: 18       POP   A
    1D10: 7C 0B 52 LCALL _LCD_PrCString
    1D13: 20       POP   X
(0153) 			break;
    1D14: 80 F6    JMP   0x1E0B
(0154) 		}
(0155) 		if (status == DEVICE_IS_MOUSE) {
    1D16: 3D 00 80 CMP   [X+0],0x80
    1D19: B0 1C    JNZ   0x1D36
(0156) 			IsMouse = 1;
    1D1B: 62 D0 00 MOV   REG[0xD0],0x0
    1D1E: 55 6D 01 MOV   [IsMouse],0x1
(0157) 			LCD_Position(1,0);
    1D21: 10       PUSH  X
    1D22: 57 00    MOV   X,0x0
    1D24: 50 01    MOV   A,0x1
    1D26: 7C 0C D7 LCALL _LCD_Position
(0158) 			LCD_PrCString("  Mouse Ready   ");
    1D29: 50 04    MOV   A,0x4
    1D2B: 08       PUSH  A
    1D2C: 50 6A    MOV   A,0x6A
    1D2E: 5C       MOV   X,A
    1D2F: 18       POP   A
    1D30: 7C 0B 52 LCALL _LCD_PrCString
    1D33: 20       POP   X
(0159) 			break;
    1D34: 80 D6    JMP   0x1E0B
(0160) 		}
(0161) 		//// No device if the transmission timed-out.
(0162) 		if (status & DEVICE_TX_TIMEOUT) {
    1D36: 48 00 01 TST   [X+0],0x1
    1D39: A0 16    JZ    0x1D50
(0163) 			LCD_Position(1,0);
    1D3B: 10       PUSH  X
    1D3C: 57 00    MOV   X,0x0
    1D3E: 50 01    MOV   A,0x1
    1D40: 7C 0C D7 LCALL _LCD_Position
(0164) 			LCD_PrCString("   No Device    ");
    1D43: 50 04    MOV   A,0x4
    1D45: 08       PUSH  A
    1D46: 50 59    MOV   A,0x59
    1D48: 5C       MOV   X,A
    1D49: 18       POP   A
    1D4A: 7C 0B 52 LCALL _LCD_PrCString
    1D4D: 20       POP   X
(0165) 		}
    1D4E: 80 9B    JMP   0x1DEA
(0166) 		//// A framing error occured while transmitting to the device. (XXX - Force test this)
(0167) 		else if (status & DEVICE_TX_FRAME_ERROR) {
    1D50: 48 00 04 TST   [X+0],0x4
    1D53: A0 16    JZ    0x1D6A
(0168) 			LCD_Position(1,0);
    1D55: 10       PUSH  X
    1D56: 57 00    MOV   X,0x0
    1D58: 50 01    MOV   A,0x1
    1D5A: 7C 0C D7 LCALL _LCD_Position
(0169) 			LCD_PrCString(" TX Frame Error ");
    1D5D: 50 04    MOV   A,0x4
    1D5F: 08       PUSH  A
    1D60: 50 48    MOV   A,0x48
    1D62: 5C       MOV   X,A
    1D63: 18       POP   A
    1D64: 7C 0B 52 LCALL _LCD_PrCString
    1D67: 20       POP   X
(0170) 		}
    1D68: 80 81    JMP   0x1DEA
(0171) 		//// A framing error occured while receiving from the device. (XXX - Force test this)
(0172) 		else if (status & DEVICE_RX_FRAME_ERROR) {
    1D6A: 48 00 08 TST   [X+0],0x8
    1D6D: A0 16    JZ    0x1D84
(0173) 			LCD_Position(1,0);
    1D6F: 10       PUSH  X
    1D70: 57 00    MOV   X,0x0
    1D72: 50 01    MOV   A,0x1
    1D74: 7C 0C D7 LCALL _LCD_Position
(0174) 			LCD_PrCString(" RX Frame Error ");
    1D77: 50 04    MOV   A,0x4
    1D79: 08       PUSH  A
    1D7A: 50 37    MOV   A,0x37
    1D7C: 5C       MOV   X,A
    1D7D: 18       POP   A
    1D7E: 7C 0B 52 LCALL _LCD_PrCString
    1D81: 20       POP   X
(0175) 		}
    1D82: 80 67    JMP   0x1DEA
(0176) 		//// We should probably consider an RX Timeout to be a device error. (XXX - Force test this)
(0177) 		else if (status & DEVICE_RX_TIMEOUT) {
    1D84: 48 00 02 TST   [X+0],0x2
    1D87: A0 16    JZ    0x1D9E
(0178) 			LCD_Position(1,0);
    1D89: 10       PUSH  X
    1D8A: 57 00    MOV   X,0x0
    1D8C: 50 01    MOV   A,0x1
    1D8E: 7C 0C D7 LCALL _LCD_Position
(0179) 			LCD_PrCString("Receive Timeout ");
    1D91: 50 04    MOV   A,0x4
    1D93: 08       PUSH  A
    1D94: 50 26    MOV   A,0x26
    1D96: 5C       MOV   X,A
    1D97: 18       POP   A
    1D98: 7C 0B 52 LCALL _LCD_PrCString
    1D9B: 20       POP   X
(0180) 		}
    1D9C: 80 4D    JMP   0x1DEA
(0181) 		//// The response we received from our RESET command was invalid. (XXX - Force test this)
(0182) 		else if (status & DEVICE_INVALID_RESPONSE) {
    1D9E: 48 00 20 TST   [X+0],0x20
    1DA1: A0 16    JZ    0x1DB8
(0183) 			LCD_Position(1,0);
    1DA3: 10       PUSH  X
    1DA4: 57 00    MOV   X,0x0
    1DA6: 50 01    MOV   A,0x1
    1DA8: 7C 0C D7 LCALL _LCD_Position
(0184) 			LCD_PrCString("Invalid Response");
    1DAB: 50 04    MOV   A,0x4
    1DAD: 08       PUSH  A
    1DAE: 50 15    MOV   A,0x15
    1DB0: 5C       MOV   X,A
    1DB1: 18       POP   A
    1DB2: 7C 0B 52 LCALL _LCD_PrCString
    1DB5: 20       POP   X
(0185) 		}
    1DB6: 80 33    JMP   0x1DEA
(0186) 		//// The device failed a diagnostic self-test (BAT) (XXX - Force test this)
(0187) 		else if (status & DEVICE_BAD_BAT) {
    1DB8: 48 00 10 TST   [X+0],0x10
    1DBB: A0 16    JZ    0x1DD2
(0188) 			LCD_Position(1,0);
    1DBD: 10       PUSH  X
    1DBE: 57 00    MOV   X,0x0
    1DC0: 50 01    MOV   A,0x1
    1DC2: 7C 0C D7 LCALL _LCD_Position
(0189) 			LCD_PrCString("Device BAT Error");
    1DC5: 50 04    MOV   A,0x4
    1DC7: 08       PUSH  A
    1DC8: 50 04    MOV   A,0x4
    1DCA: 5C       MOV   X,A
    1DCB: 18       POP   A
    1DCC: 7C 0B 52 LCALL _LCD_PrCString
    1DCF: 20       POP   X
(0190) 		}
    1DD0: 80 19    JMP   0x1DEA
(0191) 		//// We received a partial frame
(0192) 		else if (status & DEVICE_ERROR) {
    1DD2: 48 00 40 TST   [X+0],0x40
    1DD5: A0 14    JZ    0x1DEA
(0193) 			LCD_Position(1,0);
    1DD7: 10       PUSH  X
    1DD8: 57 00    MOV   X,0x0
    1DDA: 50 01    MOV   A,0x1
    1DDC: 7C 0C D7 LCALL _LCD_Position
(0194) 			LCD_PrCString("  Device Error  ");
    1DDF: 50 03    MOV   A,0x3
    1DE1: 08       PUSH  A
    1DE2: 50 F3    MOV   A,0xF3
    1DE4: 5C       MOV   X,A
    1DE5: 18       POP   A
    1DE6: 7C 0B 52 LCALL _LCD_PrCString
    1DE9: 20       POP   X
(0195) 		}
(0196) 		//// If we had an error, wait 1 second and try again.
(0197) 		TenMicroSecTimerReps = 2;
    1DEA: 62 D0 00 MOV   REG[0xD0],0x0
    1DED: 55 65 02 MOV   [TenMicroSecTimerReps],0x2
(0198) 		TenMicroSecTimer_WritePeriod(49999); // 1000ms
    1DF0: 10       PUSH  X
    1DF1: 57 C3    MOV   X,0xC3
    1DF3: 50 4F    MOV   A,0x4F
    1DF5: 7C 09 80 LCALL _TenMicroSecTimer_WritePeriod
(0199) 		TenMicroSecTimer_Start();
    1DF8: 7C 09 78 LCALL _TenMicroSecTimer_Start
    1DFB: 20       POP   X
(0200) 		while(TenMicroSecTimerReps);
    1DFC: 62 D0 00 MOV   REG[0xD0],0x0
    1DFF: 3C 65 00 CMP   [TenMicroSecTimerReps],0x0
    1E02: BF F9    JNZ   0x1DFC
(0201) 		TenMicroSecTimer_Stop();
    1E04: 10       PUSH  X
    1E05: 7C 09 7C LCALL _TenMicroSecTimer_Stop
    1E08: 20       POP   X
(0202) 	}
    1E09: 8E D4    JMP   0x1CDE
(0203) 	//// The device was detected so wait 1 second before clearing the display.
(0204) 	TenMicroSecTimerReps = 2;
    1E0B: 62 D0 00 MOV   REG[0xD0],0x0
    1E0E: 55 65 02 MOV   [TenMicroSecTimerReps],0x2
(0205) 	TenMicroSecTimer_WritePeriod(49999); // 1000ms
    1E11: 10       PUSH  X
    1E12: 57 C3    MOV   X,0xC3
    1E14: 50 4F    MOV   A,0x4F
    1E16: 7C 09 80 LCALL _TenMicroSecTimer_WritePeriod
(0206) 	TenMicroSecTimer_Start();
    1E19: 7C 09 78 LCALL _TenMicroSecTimer_Start
    1E1C: 20       POP   X
(0207) 	while(TenMicroSecTimerReps);
    1E1D: 62 D0 00 MOV   REG[0xD0],0x0
    1E20: 3C 65 00 CMP   [TenMicroSecTimerReps],0x0
    1E23: BF F9    JNZ   0x1E1D
(0208) 	TenMicroSecTimer_Stop();
    1E25: 10       PUSH  X
    1E26: 7C 09 7C LCALL _TenMicroSecTimer_Stop
    1E29: 20       POP   X
(0209) 	//
(0210) 	//// XXX - Add capability to both the mouse and keyboard functions that,
(0211) 	////       upon detecting a BAT code from the device, will reinitialize it
(0212) 	////       and resume operation.
(0213) 	//
(0214) 	///////////////////////////////////////////////////////////////////////////
(0215) 	//// - Mouse stuff below
(0216) 	///////////////////////////////////////////////////////////////////////////
(0217) 	// Enter the main loop, printing mouse button and X/Y data to the LCD
(0218) 	// scan codes out to the UART.
(0219) 	///////////////////////////////////////////////////////////////////////////
(0220) 	if (IsMouse) {
    1E2A: 62 D0 00 MOV   REG[0xD0],0x0
    1E2D: 3C 6D 00 CMP   [IsMouse],0x0
    1E30: A0 28    JZ    0x1E59
(0221) 		/////////////////////////////////////////////////////////////////////////////////
(0222) 		// Start the PWM8 User Module that controls the brightness of the LED on P[1]1
(0223) 		/////////////////////////////////////////////////////////////////////////////////
(0224) 		PWM8LED_WritePulseWidth(0);
    1E32: 10       PUSH  X
    1E33: 50 00    MOV   A,0x0
    1E35: 7C 0A FB LCALL _PWM8LED_WritePulseWidth
(0225) 		PWM8LED_Start();
    1E38: 7C 0A F0 LCALL _PWM8LED_Start
    1E3B: 20       POP   X
(0226) 		//
(0227) 		MouseInit();
    1E3C: 7C 1F 61 LCALL _MouseInit
(0228) //		//// Print the raw 3-byte mouse data to the LCD
(0229) //		LCD_Position(1,0);
(0230) //		LCD_PrCString("                ");
(0231) //		while(1) {
(0232) //			MousePrintRawData();
(0233) //		}
(0234) 		//// Move the LCD cursor around the LCD and display data
(0235) 		LCD_Position(1,0);
    1E3F: 10       PUSH  X
    1E40: 57 00    MOV   X,0x0
    1E42: 50 01    MOV   A,0x1
    1E44: 7C 0C D7 LCALL _LCD_Position
(0236) 		LCD_PrCString("   X:0000 Y:0000");
    1E47: 50 03    MOV   A,0x3
    1E49: 08       PUSH  A
    1E4A: 50 E2    MOV   A,0xE2
    1E4C: 5C       MOV   X,A
    1E4D: 18       POP   A
    1E4E: 7C 0B 52 LCALL _LCD_PrCString
    1E51: 20       POP   X
    1E52: 80 04    JMP   0x1E57
(0237) 		while(1) {
(0238) 			MouseCursor();
    1E54: 7C 20 4C LCALL _MouseCursor
(0239) 		}
    1E57: 8F FC    JMP   0x1E54
(0240) 	}
(0241) 	else {
(0242) 		/////////////////////////////////////////////////////////////////////////////////
(0243) 		// Start the PWM8 User Module that controls the brightness of the LED on P[1]1
(0244) 		/////////////////////////////////////////////////////////////////////////////////
(0245) 		PWM8LED_WritePulseWidth(127);
    1E59: 10       PUSH  X
    1E5A: 50 7F    MOV   A,0x7F
    1E5C: 7C 0A FB LCALL _PWM8LED_WritePulseWidth
(0246) 		PWM8LED_Start();
    1E5F: 7C 0A F0 LCALL _PWM8LED_Start
    1E62: 20       POP   X
    1E63: 80 F6    JMP   0x1F5A
(0247) 		//
(0248) 		//// - Keyboard stuff below
(0249) 		/////////////////////////////////////////////////////////////////////////////////
(0250) 		// Enter the main loop, printing received scan codes out on the LCD and printable
(0251) 		// scan codes out to the UART.
(0252) 		/////////////////////////////////////////////////////////////////////////////////
(0253) 		while(1) {
(0254) 			//// If we get a parity error, regardless of where we are in the
(0255) 			//// receive buffer, transmit a resend command
(0256) 			if (PS2FrameStatus & FRAME_RX_PARITY_ERROR) {
    1E65: 62 D0 00 MOV   REG[0xD0],0x0
    1E68: 47 62 04 TST   [PS2FrameStatus],0x4
    1E6B: A0 13    JZ    0x1E7F
(0257) 				PS2FrameStatus = 0x00;
    1E6D: 55 62 00 MOV   [PS2FrameStatus],0x0
(0258) 				PS2_Write_Byte(0xFE);
    1E70: 50 FE    MOV   A,0xFE
    1E72: 08       PUSH  A
    1E73: 7C 25 11 LCALL _PS2_Write_Byte
    1E76: 38 FF    ADD   SP,0xFF
    1E78: 62 D0 00 MOV   REG[0xD0],0x0
    1E7B: 53 22    MOV   [__r0],A
(0259) 				continue;
    1E7D: 80 DC    JMP   0x1F5A
(0260) 			}
(0261) 			//// XXX - We should probably check for other frame error types.
(0262) 			//// XXX - If we get a FRAME_RX_FRAME_ERROR, lets send a resend
(0263) 			//// XXX - If we get a FRAME_INCOMPLETE, the keyboard may have
(0264) 			////       been unplugged so send an ECHO. If we don't get a
(0265) 			////       valid response, reset the keyboard and restart.
(0266) 			if (PS2RxBufOut != PS2RxBufIn) {
    1E7F: 62 D0 00 MOV   REG[0xD0],0x0
    1E82: 51 64    MOV   A,[PS2RxBufOut]
    1E84: 62 D0 00 MOV   REG[0xD0],0x0
    1E87: 3A 72    CMP   A,[PS2RxBufIn]
    1E89: A0 D0    JZ    0x1F5A
(0267) 				scancode = PS2RxBuffer[PS2RxBufOut];
    1E8B: 62 D0 00 MOV   REG[0xD0],0x0
    1E8E: 51 64    MOV   A,[PS2RxBufOut]
    1E90: 62 D0 00 MOV   REG[0xD0],0x0
    1E93: 53 21    MOV   [__r1],A
    1E95: 55 22 00 MOV   [__r0],0x0
    1E98: 06 21 04 ADD   [__r1],0x4
    1E9B: 0E 22 00 ADC   [__r0],0x0
    1E9E: 51 22    MOV   A,[__r0]
    1EA0: 60 D4    MOV   REG[0xD4],A
    1EA2: 3E 21    MVI   A,[__r1]
    1EA4: 54 01    MOV   [X+1],A
(0268) 				PS2RxBufOut++;
    1EA6: 62 D0 00 MOV   REG[0xD0],0x0
    1EA9: 76 64    INC   [PS2RxBufOut]
(0269) 				// Wrap around the circular buffer pointer at 16 
(0270) 				if (PS2RxBufOut & 0x10) PS2RxBufOut = 0;
    1EAB: 47 64 10 TST   [PS2RxBufOut],0x10
    1EAE: A0 04    JZ    0x1EB3
    1EB0: 55 64 00 MOV   [PS2RxBufOut],0x0
(0271) 				//// Wrap the cursor around on the second line when printing scan codes.
(0272) 				if (cursor > 15) cursor = 0;
    1EB3: 50 0F    MOV   A,0xF
    1EB5: 3B 02    CMP   A,[X+2]
    1EB7: D0 04    JNC   0x1EBC
    1EB9: 56 02 00 MOV   [X+2],0x0
(0273) 				LCD_Position(1,cursor);
    1EBC: 10       PUSH  X
    1EBD: 59 02    MOV   X,[X+2]
    1EBF: 50 01    MOV   A,0x1
    1EC1: 7C 0C D7 LCALL _LCD_Position
    1EC4: 20       POP   X
(0274) 				LCD_PrHexByte(scancode);
    1EC5: 10       PUSH  X
    1EC6: 52 01    MOV   A,[X+1]
    1EC8: 7C 0B 74 LCALL _LCD_PrHexByte
(0275) 				//// Keep the LCD CURSOR on top of the last character written
(0276) 				LCD_Control(LCD_CURSOR_SH_LEFT);
    1ECB: 50 10    MOV   A,0x10
    1ECD: 7C 0B B4 LCALL _LCD_Control
    1ED0: 20       POP   X
(0277) 				cursor+=2;
    1ED1: 07 02 02 ADD   [X+2],0x2
(0278) 				//// Process any keyboard commands
(0279) 				// Getting a 0x00 from the keyboard means there is either a
(0280) 				// keyboard buffer overrun or a key detection error.
(0281) 				if (scancode == 0x00) {
    1ED4: 3D 01 00 CMP   [X+1],0x0
    1ED7: B0 03    JNZ   0x1EDB
(0282) 					// XXX - Should we indicate to the user that there is a problem?
(0283) 					continue;
    1ED9: 80 80    JMP   0x1F5A
(0284) 				}
(0285) 				// If we get a BAT, assume the keyboard has been powered-on
(0286) 				// again and reset any appropriate state variables.
(0287) 				// XXX - Maybe we should handle a bad BAT (0xFC) too.
(0288) 				if (scancode == 0xAA) { // Power-on BAT
    1EDB: 3D 01 AA CMP   [X+1],0xAA
    1EDE: B0 03    JNZ   0x1EE2
(0289) 					// XXX - Implement the keyboard power-on sequence
(0290) 					continue;
    1EE0: 80 79    JMP   0x1F5A
(0291) 				}
(0292) 				// If we find a Resend in our input buffer, ignore it since
(0293) 				// we handle resends in PS2_Send_Command_Process_Response().
(0294) 				// Note: This should never happen.
(0295) 				if (scancode == 0xFE) {
    1EE2: 3D 01 FE CMP   [X+1],0xFE
    1EE5: B0 03    JNZ   0x1EE9
(0296) 					continue;
    1EE7: 80 72    JMP   0x1F5A
(0297) 				}
(0298) 				//// Convert the individual scan codes into meaningful key actions
(0299) 				codetype = KeyboardDecodeData(scancode);
    1EE9: 52 01    MOV   A,[X+1]
    1EEB: 08       PUSH  A
    1EEC: 7C 0D 09 LCALL __UserModules_end|_KeyboardDecodeData|__text_start|_KeyboardDecodeData
    1EEF: 38 FF    ADD   SP,0xFF
    1EF1: 62 D0 00 MOV   REG[0xD0],0x0
    1EF4: 54 03    MOV   [X+3],A
(0300) 				//// Keep track of how many keys are pressed
(0301) 				keyspressed = KeyboardTotalPressed(scancode,codetype);
    1EF6: 52 03    MOV   A,[X+3]
    1EF8: 08       PUSH  A
    1EF9: 52 01    MOV   A,[X+1]
    1EFB: 08       PUSH  A
    1EFC: 7C 0E 61 LCALL _KeyboardTotalPressed
    1EFF: 62 D0 00 MOV   REG[0xD0],0x0
    1F02: 54 04    MOV   [X+4],A
(0302) 				KeyboardAction(scancode,codetype,keyspressed);
    1F04: 52 04    MOV   A,[X+4]
    1F06: 08       PUSH  A
    1F07: 52 03    MOV   A,[X+3]
    1F09: 08       PUSH  A
    1F0A: 52 01    MOV   A,[X+1]
    1F0C: 08       PUSH  A
    1F0D: 7C 14 C3 LCALL _KeyboardAction
    1F10: 38 FB    ADD   SP,0xFB
(0303) 				if (!PianoMode) {
    1F12: 62 D0 00 MOV   REG[0xD0],0x0
    1F15: 3C 6C 00 CMP   [PianoMode],0x0
    1F18: B0 41    JNZ   0x1F5A
(0304) 					c = KeyboardToASCII(scancode,codetype);
    1F1A: 52 03    MOV   A,[X+3]
    1F1C: 08       PUSH  A
    1F1D: 52 01    MOV   A,[X+1]
    1F1F: 08       PUSH  A
    1F20: 7C 10 33 LCALL _KeyboardToASCII
    1F23: 38 FE    ADD   SP,0xFE
    1F25: 62 D0 00 MOV   REG[0xD0],0x0
    1F28: 54 05    MOV   [X+5],A
(0305) 					if (!c) continue;
    1F2A: 3D 05 00 CMP   [X+5],0x0
    1F2D: B0 03    JNZ   0x1F31
    1F2F: 80 2A    JMP   0x1F5A
(0306) 					if (c == 0x0d) {
    1F31: 3D 05 0D CMP   [X+5],0xD
    1F34: B0 06    JNZ   0x1F3B
(0307) 						UART_PutCRLF();
    1F36: 10       PUSH  X
    1F37: 7C 09 67 LCALL _UART_PutCRLF
    1F3A: 20       POP   X
(0308) 					} 
(0309) 					if (c == 0x08) {
    1F3B: 3D 05 08 CMP   [X+5],0x8
    1F3E: B0 14    JNZ   0x1F53
(0310) 						// Send rubout
(0311) 						UART_PutChar(0x08);
    1F40: 10       PUSH  X
    1F41: 50 08    MOV   A,0x8
    1F43: 7C 08 B2 LCALL _UART_PutChar
(0312) 						UART_PutChar(' ');
    1F46: 50 20    MOV   A,0x20
    1F48: 7C 08 B2 LCALL _UART_PutChar
(0313) 						UART_PutChar(0x08);
    1F4B: 50 08    MOV   A,0x8
    1F4D: 7C 08 B2 LCALL _UART_PutChar
    1F50: 20       POP   X
(0314) 					} else {
    1F51: 80 08    JMP   0x1F5A
(0315) 						UART_PutChar(c);
    1F53: 10       PUSH  X
    1F54: 52 05    MOV   A,[X+5]
    1F56: 7C 08 B2 LCALL _UART_PutChar
    1F59: 20       POP   X
(0316) 					}
(0317) 				}
(0318) 			}
(0319) 		}
    1F5A: 8F 0A    JMP   0x1E65
(0320) 	}
(0321) }
(0322) 
(0323) 
FILE: Z:\DOCUME~1\ECE_381\PS2BIT~1\PS2BIT~1\mouse.c
(0001) //----------------------------------------------------------------------------
(0002) // XXX - Create the comments for this.
(0003) //
(0004) // B. Noble - 18 October 2010
(0005) //----------------------------------------------------------------------------
(0006) 
(0007) #include <m8c.h>        // part specific constants and macros
(0008) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0009) #include "PSoCGPIOINT.h"
(0010) #include "ps2.h"
(0011) #include "mouse.h"
(0012) 
(0013) extern BYTE PS2RxBuffer[];
(0014) extern BYTE PS2RxBufIn;
(0015) extern BYTE PS2RxBufOut;
(0016) 
(0017) void MouseInit(void)
(0018) {
(0019) 	//// Mouse init stuff
(0020) 	//// XXX - Document these!
(0021) 	PS2_Send_Command_Process_Response(0xF3);
_MouseInit:
    1F61: 50 F3    MOV   A,0xF3
    1F63: 08       PUSH  A
    1F64: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    1F67: 62 D0 00 MOV   REG[0xD0],0x0
(0022) 	PS2_Send_Command_Process_Response(0x0A);
    1F6A: 50 0A    MOV   A,0xA
    1F6C: 08       PUSH  A
    1F6D: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    1F70: 38 FE    ADD   SP,0xFE
    1F72: 62 D0 00 MOV   REG[0xD0],0x0
(0023) 	PS2_Send_Command_Process_Response(0xE8);
    1F75: 50 E8    MOV   A,0xE8
    1F77: 08       PUSH  A
    1F78: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    1F7B: 62 D0 00 MOV   REG[0xD0],0x0
(0024) 	PS2_Send_Command_Process_Response(0x03);
    1F7E: 50 03    MOV   A,0x3
    1F80: 08       PUSH  A
    1F81: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    1F84: 38 FE    ADD   SP,0xFE
    1F86: 62 D0 00 MOV   REG[0xD0],0x0
(0025) 	PS2_Send_Command_Process_Response(0xE6);
    1F89: 50 E6    MOV   A,0xE6
    1F8B: 08       PUSH  A
    1F8C: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    1F8F: 62 D0 00 MOV   REG[0xD0],0x0
(0026) 	PS2_Send_Command_Process_Response(0xF4);
    1F92: 50 F4    MOV   A,0xF4
    1F94: 08       PUSH  A
    1F95: 7C 26 07 LCALL _PS2_Send_Command_Process_Response
    1F98: 38 FE    ADD   SP,0xFE
    1F9A: 62 D0 00 MOV   REG[0xD0],0x0
    1F9D: 7F       RET   
(0027) }
(0028) 
(0029) void MousePrintRawData(void)
(0030) {
_MousePrintRawData:
  scancode             --> X+0
    1F9E: 10       PUSH  X
    1F9F: 4F       MOV   X,SP
    1FA0: 38 01    ADD   SP,0x1
(0031) 	BYTE scancode;
(0032) 	static int i = 0;
(0033) 
(0034) 	while(PS2RxBufOut == PS2RxBufIn); // Spin until we get data
    1FA2: 62 D0 00 MOV   REG[0xD0],0x0
    1FA5: 51 64    MOV   A,[PS2RxBufOut]
    1FA7: 62 D0 00 MOV   REG[0xD0],0x0
    1FAA: 3A 72    CMP   A,[PS2RxBufIn]
    1FAC: AF F5    JZ    0x1FA2
(0035) 	scancode = PS2RxBuffer[PS2RxBufOut];
    1FAE: 62 D0 00 MOV   REG[0xD0],0x0
    1FB1: 51 64    MOV   A,[PS2RxBufOut]
    1FB3: 62 D0 00 MOV   REG[0xD0],0x0
    1FB6: 53 21    MOV   [__r1],A
    1FB8: 55 22 00 MOV   [__r0],0x0
    1FBB: 06 21 04 ADD   [__r1],0x4
    1FBE: 0E 22 00 ADC   [__r0],0x0
    1FC1: 51 22    MOV   A,[__r0]
    1FC3: 60 D4    MOV   REG[0xD4],A
    1FC5: 3E 21    MVI   A,[__r1]
    1FC7: 54 00    MOV   [X+0],A
(0036) 	PS2RxBufOut++;
    1FC9: 62 D0 00 MOV   REG[0xD0],0x0
    1FCC: 76 64    INC   [PS2RxBufOut]
(0037) 	// Wrap around the circular buffer pointer at 16 
(0038) 	if (PS2RxBufOut & 0x10) PS2RxBufOut = 0;
    1FCE: 47 64 10 TST   [PS2RxBufOut],0x10
    1FD1: A0 04    JZ    0x1FD6
    1FD3: 55 64 00 MOV   [PS2RxBufOut],0x0
(0039) 	// If Bit 3 isn't set, then this isn't Byte 1
(0040) 	if ((i==0)&&(!(scancode & 0x08))) return;
    1FD6: 62 D0 00 MOV   REG[0xD0],0x0
    1FD9: 3C 3D 00 CMP   [0x3D],0x0
    1FDC: B0 0D    JNZ   0x1FEA
    1FDE: 3C 3E 00 CMP   [0x3E],0x0
    1FE1: B0 08    JNZ   0x1FEA
    1FE3: 48 00 08 TST   [X+0],0x8
    1FE6: B0 03    JNZ   0x1FEA
    1FE8: 80 5F    JMP   0x2048
(0041) 	LCD_Position(1,i);
    1FEA: 62 D0 00 MOV   REG[0xD0],0x0
    1FED: 51 3E    MOV   A,[0x3E]
    1FEF: 62 D0 00 MOV   REG[0xD0],0x0
    1FF2: 10       PUSH  X
    1FF3: 08       PUSH  A
    1FF4: 50 01    MOV   A,0x1
    1FF6: 20       POP   X
    1FF7: 7C 0C D7 LCALL _LCD_Position
    1FFA: 20       POP   X
(0042) 	LCD_PrHexByte(scancode);
    1FFB: 10       PUSH  X
    1FFC: 52 00    MOV   A,[X+0]
    1FFE: 7C 0B 74 LCALL _LCD_PrHexByte
    2001: 20       POP   X
(0043) 	if (i==0) i=3;
    2002: 62 D0 00 MOV   REG[0xD0],0x0
    2005: 3C 3D 00 CMP   [0x3D],0x0
    2008: B0 11    JNZ   0x201A
    200A: 3C 3E 00 CMP   [0x3E],0x0
    200D: B0 0C    JNZ   0x201A
    200F: 62 D0 00 MOV   REG[0xD0],0x0
    2012: 55 3E 03 MOV   [0x3E],0x3
    2015: 55 3D 00 MOV   [0x3D],0x0
    2018: 80 2F    JMP   0x2048
(0044) 	else if (i==3) i=6;
    201A: 62 D0 00 MOV   REG[0xD0],0x0
    201D: 3C 3D 00 CMP   [0x3D],0x0
    2020: B0 11    JNZ   0x2032
    2022: 3C 3E 03 CMP   [0x3E],0x3
    2025: B0 0C    JNZ   0x2032
    2027: 62 D0 00 MOV   REG[0xD0],0x0
    202A: 55 3E 06 MOV   [0x3E],0x6
    202D: 55 3D 00 MOV   [0x3D],0x0
    2030: 80 17    JMP   0x2048
(0045) 	else if (i==6) i=0;
    2032: 62 D0 00 MOV   REG[0xD0],0x0
    2035: 3C 3D 00 CMP   [0x3D],0x0
    2038: B0 0F    JNZ   0x2048
    203A: 3C 3E 06 CMP   [0x3E],0x6
    203D: B0 0A    JNZ   0x2048
    203F: 62 D0 00 MOV   REG[0xD0],0x0
    2042: 55 3E 00 MOV   [0x3E],0x0
    2045: 55 3D 00 MOV   [0x3D],0x0
(0046) 	return;
    2048: 38 FF    ADD   SP,0xFF
    204A: 20       POP   X
    204B: 7F       RET   
(0047) }
(0048) 
(0049) void MouseCursor(void)
(0050) {
_MouseCursor:
  xov                  --> X+10
  yov                  --> X+9
  mbtn                 --> X+8
  xsign                --> X+7
  ysign                --> X+6
  lbtn                 --> X+5
  rbtn                 --> X+4
  ystep                --> X+3
  xstep                --> X+2
  scancode             --> X+1
  i                    --> X+0
    204C: 10       PUSH  X
    204D: 4F       MOV   X,SP
    204E: 38 0B    ADD   SP,0xB
(0051) 	signed char i;
(0052) 	BYTE scancode;
(0053) 	BYTE yov;
(0054) 	BYTE xov;
(0055) 	BYTE ysign;
(0056) 	BYTE xsign;
(0057) 	BYTE mbtn;
(0058) 	BYTE rbtn;
(0059) 	BYTE lbtn;
(0060) 	BYTE xstep = 0;
    2050: 56 02 00 MOV   [X+2],0x0
(0061) 	BYTE ystep = 0;
    2053: 56 03 00 MOV   [X+3],0x0
(0062) 	static int xcount = 0;
(0063) 	static int ycount = 0;
(0064) 	static BYTE xpos = 0;
(0065) 	static BYTE ypos = 0;
(0066) 	static BYTE xopos = 0;
(0067) 	static BYTE yopos = 0;
(0068) 
(0069) 	//// Byte 1 - X&Y overflow, X&Y sign, and 3-button data
(0070) 	while(PS2RxBufOut == PS2RxBufIn); // Spin until we get data
    2056: 62 D0 00 MOV   REG[0xD0],0x0
    2059: 51 64    MOV   A,[PS2RxBufOut]
    205B: 62 D0 00 MOV   REG[0xD0],0x0
    205E: 3A 72    CMP   A,[PS2RxBufIn]
    2060: AF F5    JZ    0x2056
(0071) 	scancode = PS2RxBuffer[PS2RxBufOut];
    2062: 62 D0 00 MOV   REG[0xD0],0x0
    2065: 51 64    MOV   A,[PS2RxBufOut]
    2067: 62 D0 00 MOV   REG[0xD0],0x0
    206A: 53 21    MOV   [__r1],A
    206C: 55 22 00 MOV   [__r0],0x0
    206F: 06 21 04 ADD   [__r1],0x4
    2072: 0E 22 00 ADC   [__r0],0x0
    2075: 51 22    MOV   A,[__r0]
    2077: 60 D4    MOV   REG[0xD4],A
    2079: 3E 21    MVI   A,[__r1]
    207B: 54 01    MOV   [X+1],A
(0072) 	PS2RxBufOut++;
    207D: 62 D0 00 MOV   REG[0xD0],0x0
    2080: 76 64    INC   [PS2RxBufOut]
(0073) 	// Wrap around the circular buffer pointer at 16
(0074) 	if (PS2RxBufOut & 0x10) PS2RxBufOut = 0;
    2082: 47 64 10 TST   [PS2RxBufOut],0x10
    2085: A0 04    JZ    0x208A
    2087: 55 64 00 MOV   [PS2RxBufOut],0x0
(0075) 	//// If Bit 3 isn't set, then this isn't Byte 1
(0076) 	if (!(scancode & 0x08)) return;
    208A: 48 01 08 TST   [X+1],0x8
    208D: B0 03    JNZ   0x2091
    208F: 84 7D    JMP   0x250D
(0077) 	yov = (scancode & 0x80) >> 7;
    2091: 62 D0 00 MOV   REG[0xD0],0x0
    2094: 52 01    MOV   A,[X+1]
    2096: 21 80    AND   A,0x80
    2098: 67       ASR   A
    2099: 67       ASR   A
    209A: 67       ASR   A
    209B: 67       ASR   A
    209C: 67       ASR   A
    209D: 67       ASR   A
    209E: 67       ASR   A
    209F: 21 01    AND   A,0x1
    20A1: 54 09    MOV   [X+9],A
(0078) 	xov = (scancode & 0x40) >> 6;
    20A3: 52 01    MOV   A,[X+1]
    20A5: 21 40    AND   A,0x40
    20A7: 67       ASR   A
    20A8: 67       ASR   A
    20A9: 67       ASR   A
    20AA: 67       ASR   A
    20AB: 67       ASR   A
    20AC: 67       ASR   A
    20AD: 21 03    AND   A,0x3
    20AF: 54 0A    MOV   [X+10],A
(0079) 	ysign = (scancode & 0x20) >> 5;
    20B1: 52 01    MOV   A,[X+1]
    20B3: 21 20    AND   A,0x20
    20B5: 67       ASR   A
    20B6: 67       ASR   A
    20B7: 67       ASR   A
    20B8: 67       ASR   A
    20B9: 67       ASR   A
    20BA: 21 07    AND   A,0x7
    20BC: 54 06    MOV   [X+6],A
(0080) 	xsign = (scancode & 0x10) >> 4;
    20BE: 52 01    MOV   A,[X+1]
    20C0: 21 10    AND   A,0x10
    20C2: 67       ASR   A
    20C3: 67       ASR   A
    20C4: 67       ASR   A
    20C5: 67       ASR   A
    20C6: 21 0F    AND   A,0xF
    20C8: 54 07    MOV   [X+7],A
(0081) 	mbtn = (scancode & 0x04) >> 2;
    20CA: 52 01    MOV   A,[X+1]
    20CC: 21 04    AND   A,0x4
    20CE: 53 22    MOV   [__r0],A
    20D0: 68 22    ASR   [__r0]
    20D2: 68 22    ASR   [__r0]
    20D4: 26 22 3F AND   [__r0],0x3F
    20D7: 51 22    MOV   A,[__r0]
    20D9: 54 08    MOV   [X+8],A
(0082) 	rbtn = (scancode & 0x02) >> 1;
    20DB: 52 01    MOV   A,[X+1]
    20DD: 21 02    AND   A,0x2
    20DF: 53 22    MOV   [__r0],A
    20E1: 70 FB    AND   F,0xFB
    20E3: 6E 22    RRC   [__r0]
    20E5: 51 22    MOV   A,[__r0]
    20E7: 54 04    MOV   [X+4],A
(0083) 	lbtn = (scancode & 0x01);
    20E9: 52 01    MOV   A,[X+1]
    20EB: 21 01    AND   A,0x1
    20ED: 54 05    MOV   [X+5],A
(0084) 	//// Byte 2 - X Movement
(0085) 	while(PS2RxBufOut == PS2RxBufIn); // Spin until we get data
    20EF: 62 D0 00 MOV   REG[0xD0],0x0
    20F2: 51 64    MOV   A,[PS2RxBufOut]
    20F4: 62 D0 00 MOV   REG[0xD0],0x0
    20F7: 3A 72    CMP   A,[PS2RxBufIn]
    20F9: AF F5    JZ    0x20EF
(0086) 	scancode = PS2RxBuffer[PS2RxBufOut];
    20FB: 62 D0 00 MOV   REG[0xD0],0x0
    20FE: 51 64    MOV   A,[PS2RxBufOut]
    2100: 62 D0 00 MOV   REG[0xD0],0x0
    2103: 53 21    MOV   [__r1],A
    2105: 55 22 00 MOV   [__r0],0x0
    2108: 06 21 04 ADD   [__r1],0x4
    210B: 0E 22 00 ADC   [__r0],0x0
    210E: 51 22    MOV   A,[__r0]
    2110: 60 D4    MOV   REG[0xD4],A
    2112: 3E 21    MVI   A,[__r1]
    2114: 54 01    MOV   [X+1],A
(0087) 	PS2RxBufOut++;
    2116: 62 D0 00 MOV   REG[0xD0],0x0
    2119: 76 64    INC   [PS2RxBufOut]
(0088) 	// Wrap around the circular buffer pointer at 16 
(0089) 	if (PS2RxBufOut & 0x10) PS2RxBufOut = 0;
    211B: 47 64 10 TST   [PS2RxBufOut],0x10
    211E: A0 04    JZ    0x2123
    2120: 55 64 00 MOV   [PS2RxBufOut],0x0
(0090) 	// Update the X counts
(0091) 	if (xsign) { // Negative
    2123: 3D 07 00 CMP   [X+7],0x0
    2126: A0 51    JZ    0x2178
(0092) 		xstep = (~scancode)+1; // Make the 2s-complement negative a positive
    2128: 62 D0 00 MOV   REG[0xD0],0x0
    212B: 52 01    MOV   A,[X+1]
    212D: 73       CPL   A
    212E: 01 01    ADD   A,0x1
    2130: 54 02    MOV   [X+2],A
(0093) 		if (xcount - xstep > 0)	xcount -= xstep;
    2132: 52 02    MOV   A,[X+2]
    2134: 53 21    MOV   [__r1],A
    2136: 55 22 00 MOV   [__r0],0x0
    2139: 62 D0 00 MOV   REG[0xD0],0x0
    213C: 51 3C    MOV   A,[0x3C]
    213E: 62 D0 00 MOV   REG[0xD0],0x0
    2141: 12 21    SUB   A,[__r1]
    2143: 53 21    MOV   [__r1],A
    2145: 62 D0 00 MOV   REG[0xD0],0x0
    2148: 51 3B    MOV   A,[0x3B]
    214A: 62 D0 00 MOV   REG[0xD0],0x0
    214D: 1A 22    SBB   A,[__r0]
    214F: 53 22    MOV   [__r0],A
    2151: 50 00    MOV   A,0x0
    2153: 12 21    SUB   A,[__r1]
    2155: 51 22    MOV   A,[__r0]
    2157: 31 80    XOR   A,0x80
    2159: 53 16    MOV   [__rX],A
    215B: 50 80    MOV   A,0x80
    215D: 1A 16    SBB   A,[__rX]
    215F: D0 0D    JNC   0x216D
    2161: 52 02    MOV   A,[X+2]
    2163: 62 D0 00 MOV   REG[0xD0],0x0
    2166: 14 3C    SUB   [0x3C],A
    2168: 1E 3B 00 SBB   [0x3B],0x0
    216B: 80 53    JMP   0x21BF
(0094) 		else xcount = 0;
    216D: 62 D0 00 MOV   REG[0xD0],0x0
    2170: 55 3C 00 MOV   [0x3C],0x0
    2173: 55 3B 00 MOV   [0x3B],0x0
(0095) 	}
    2176: 80 48    JMP   0x21BF
(0096) 	else {
(0097) 		xstep = scancode;
    2178: 52 01    MOV   A,[X+1]
    217A: 54 02    MOV   [X+2],A
(0098) 		if (xcount + xstep < 0x01FF) xcount += xstep;
    217C: 62 D0 00 MOV   REG[0xD0],0x0
    217F: 52 02    MOV   A,[X+2]
    2181: 53 21    MOV   [__r1],A
    2183: 55 22 00 MOV   [__r0],0x0
    2186: 62 D0 00 MOV   REG[0xD0],0x0
    2189: 51 3C    MOV   A,[0x3C]
    218B: 62 D0 00 MOV   REG[0xD0],0x0
    218E: 02 21    ADD   A,[__r1]
    2190: 53 21    MOV   [__r1],A
    2192: 62 D0 00 MOV   REG[0xD0],0x0
    2195: 51 3B    MOV   A,[0x3B]
    2197: 62 D0 00 MOV   REG[0xD0],0x0
    219A: 0A 22    ADC   A,[__r0]
    219C: 53 22    MOV   [__r0],A
    219E: 51 21    MOV   A,[__r1]
    21A0: 11 FF    SUB   A,0xFF
    21A2: 51 22    MOV   A,[__r0]
    21A4: 31 80    XOR   A,0x80
    21A6: 19 81    SBB   A,0x81
    21A8: D0 0D    JNC   0x21B6
    21AA: 52 02    MOV   A,[X+2]
    21AC: 62 D0 00 MOV   REG[0xD0],0x0
    21AF: 04 3C    ADD   [0x3C],A
    21B1: 0E 3B 00 ADC   [0x3B],0x0
    21B4: 80 0A    JMP   0x21BF
(0099) 		else xcount = 0x01FF;
    21B6: 62 D0 00 MOV   REG[0xD0],0x0
    21B9: 55 3C FF MOV   [0x3C],0xFF
    21BC: 55 3B 01 MOV   [0x3B],0x1
(0100) 	}
(0101) 	//// Byte 3 - Y Movement
(0102) 	while(PS2RxBufOut == PS2RxBufIn); // Spin until we get data
    21BF: 62 D0 00 MOV   REG[0xD0],0x0
    21C2: 51 64    MOV   A,[PS2RxBufOut]
    21C4: 62 D0 00 MOV   REG[0xD0],0x0
    21C7: 3A 72    CMP   A,[PS2RxBufIn]
    21C9: AF F5    JZ    0x21BF
(0103) 	scancode = PS2RxBuffer[PS2RxBufOut];
    21CB: 62 D0 00 MOV   REG[0xD0],0x0
    21CE: 51 64    MOV   A,[PS2RxBufOut]
    21D0: 62 D0 00 MOV   REG[0xD0],0x0
    21D3: 53 21    MOV   [__r1],A
    21D5: 55 22 00 MOV   [__r0],0x0
    21D8: 06 21 04 ADD   [__r1],0x4
    21DB: 0E 22 00 ADC   [__r0],0x0
    21DE: 51 22    MOV   A,[__r0]
    21E0: 60 D4    MOV   REG[0xD4],A
    21E2: 3E 21    MVI   A,[__r1]
    21E4: 54 01    MOV   [X+1],A
(0104) 	PS2RxBufOut++;
    21E6: 62 D0 00 MOV   REG[0xD0],0x0
    21E9: 76 64    INC   [PS2RxBufOut]
(0105) 	// Wrap around the circular buffer pointer at 16 
(0106) 	if (PS2RxBufOut & 0x10) PS2RxBufOut = 0;
    21EB: 47 64 10 TST   [PS2RxBufOut],0x10
    21EE: A0 04    JZ    0x21F3
    21F0: 55 64 00 MOV   [PS2RxBufOut],0x0
(0107) 	// Update the Y counts
(0108) 	if (ysign) { // Negative
    21F3: 3D 06 00 CMP   [X+6],0x0
    21F6: A0 51    JZ    0x2248
(0109) 		ystep = (~scancode)+1; // Make the 2s-complement negative a positive
    21F8: 62 D0 00 MOV   REG[0xD0],0x0
    21FB: 52 01    MOV   A,[X+1]
    21FD: 73       CPL   A
    21FE: 01 01    ADD   A,0x1
    2200: 54 03    MOV   [X+3],A
(0110) 		if (ycount - ystep > 0)	ycount -= ystep;
    2202: 52 03    MOV   A,[X+3]
    2204: 53 21    MOV   [__r1],A
    2206: 55 22 00 MOV   [__r0],0x0
    2209: 62 D0 00 MOV   REG[0xD0],0x0
    220C: 51 52    MOV   A,[0x52]
    220E: 62 D0 00 MOV   REG[0xD0],0x0
    2211: 12 21    SUB   A,[__r1]
    2213: 53 21    MOV   [__r1],A
    2215: 62 D0 00 MOV   REG[0xD0],0x0
    2218: 51 51    MOV   A,[0x51]
    221A: 62 D0 00 MOV   REG[0xD0],0x0
    221D: 1A 22    SBB   A,[__r0]
    221F: 53 22    MOV   [__r0],A
    2221: 50 00    MOV   A,0x0
    2223: 12 21    SUB   A,[__r1]
    2225: 51 22    MOV   A,[__r0]
    2227: 31 80    XOR   A,0x80
    2229: 53 16    MOV   [__rX],A
    222B: 50 80    MOV   A,0x80
    222D: 1A 16    SBB   A,[__rX]
    222F: D0 0D    JNC   0x223D
    2231: 52 03    MOV   A,[X+3]
    2233: 62 D0 00 MOV   REG[0xD0],0x0
    2236: 14 52    SUB   [0x52],A
    2238: 1E 51 00 SBB   [0x51],0x0
    223B: 80 53    JMP   0x228F
(0111) 		else ycount = 0;
    223D: 62 D0 00 MOV   REG[0xD0],0x0
    2240: 55 52 00 MOV   [0x52],0x0
    2243: 55 51 00 MOV   [0x51],0x0
(0112) 	}
    2246: 80 48    JMP   0x228F
(0113) 	else {
(0114) 		ystep = scancode;
    2248: 52 01    MOV   A,[X+1]
    224A: 54 03    MOV   [X+3],A
(0115) 		if (ycount + ystep < 0x07FF) ycount += ystep;
    224C: 62 D0 00 MOV   REG[0xD0],0x0
    224F: 52 03    MOV   A,[X+3]
    2251: 53 21    MOV   [__r1],A
    2253: 55 22 00 MOV   [__r0],0x0
    2256: 62 D0 00 MOV   REG[0xD0],0x0
    2259: 51 52    MOV   A,[0x52]
    225B: 62 D0 00 MOV   REG[0xD0],0x0
    225E: 02 21    ADD   A,[__r1]
    2260: 53 21    MOV   [__r1],A
    2262: 62 D0 00 MOV   REG[0xD0],0x0
    2265: 51 51    MOV   A,[0x51]
    2267: 62 D0 00 MOV   REG[0xD0],0x0
    226A: 0A 22    ADC   A,[__r0]
    226C: 53 22    MOV   [__r0],A
    226E: 51 21    MOV   A,[__r1]
    2270: 11 FF    SUB   A,0xFF
    2272: 51 22    MOV   A,[__r0]
    2274: 31 80    XOR   A,0x80
    2276: 19 87    SBB   A,0x87
    2278: D0 0D    JNC   0x2286
    227A: 52 03    MOV   A,[X+3]
    227C: 62 D0 00 MOV   REG[0xD0],0x0
    227F: 04 52    ADD   [0x52],A
    2281: 0E 51 00 ADC   [0x51],0x0
    2284: 80 0A    JMP   0x228F
(0116) 		else ycount = 0x07FF;
    2286: 62 D0 00 MOV   REG[0xD0],0x0
    2289: 55 52 FF MOV   [0x52],0xFF
    228C: 55 51 07 MOV   [0x51],0x7
(0117) 	}
(0118) 	//// Print the buttons' status and the X and Y counts to the LCD
(0119) 	LCD_Position(1,0);
    228F: 10       PUSH  X
    2290: 57 00    MOV   X,0x0
    2292: 50 01    MOV   A,0x1
    2294: 7C 0C D7 LCALL _LCD_Position
    2297: 20       POP   X
(0120) 	if (lbtn) LCD_PrCString("L"); else LCD_PrCString(" ");
    2298: 3D 05 00 CMP   [X+5],0x0
    229B: A0 0F    JZ    0x22AB
    229D: 10       PUSH  X
    229E: 50 04    MOV   A,0x4
    22A0: 08       PUSH  A
    22A1: 50 F0    MOV   A,0xF0
    22A3: 5C       MOV   X,A
    22A4: 18       POP   A
    22A5: 7C 0B 52 LCALL _LCD_PrCString
    22A8: 20       POP   X
    22A9: 80 0D    JMP   0x22B7
    22AB: 10       PUSH  X
    22AC: 50 04    MOV   A,0x4
    22AE: 08       PUSH  A
    22AF: 50 EE    MOV   A,0xEE
    22B1: 5C       MOV   X,A
    22B2: 18       POP   A
    22B3: 7C 0B 52 LCALL _LCD_PrCString
    22B6: 20       POP   X
(0121) 	if (mbtn) LCD_PrCString("M"); else LCD_PrCString(" ");
    22B7: 3D 08 00 CMP   [X+8],0x0
    22BA: A0 0F    JZ    0x22CA
    22BC: 10       PUSH  X
    22BD: 50 04    MOV   A,0x4
    22BF: 08       PUSH  A
    22C0: 50 EC    MOV   A,0xEC
    22C2: 5C       MOV   X,A
    22C3: 18       POP   A
    22C4: 7C 0B 52 LCALL _LCD_PrCString
    22C7: 20       POP   X
    22C8: 80 0D    JMP   0x22D6
    22CA: 10       PUSH  X
    22CB: 50 04    MOV   A,0x4
    22CD: 08       PUSH  A
    22CE: 50 EE    MOV   A,0xEE
    22D0: 5C       MOV   X,A
    22D1: 18       POP   A
    22D2: 7C 0B 52 LCALL _LCD_PrCString
    22D5: 20       POP   X
(0122) 	if (rbtn) LCD_PrCString("RX:"); else LCD_PrCString(" X:");
    22D6: 3D 04 00 CMP   [X+4],0x0
    22D9: A0 0F    JZ    0x22E9
    22DB: 10       PUSH  X
    22DC: 50 04    MOV   A,0x4
    22DE: 08       PUSH  A
    22DF: 50 E8    MOV   A,0xE8
    22E1: 5C       MOV   X,A
    22E2: 18       POP   A
    22E3: 7C 0B 52 LCALL _LCD_PrCString
    22E6: 20       POP   X
    22E7: 80 0D    JMP   0x22F5
    22E9: 10       PUSH  X
    22EA: 50 04    MOV   A,0x4
    22EC: 08       PUSH  A
    22ED: 50 E4    MOV   A,0xE4
    22EF: 5C       MOV   X,A
    22F0: 18       POP   A
    22F1: 7C 0B 52 LCALL _LCD_PrCString
    22F4: 20       POP   X
(0123) 	LCD_PrHexInt(xcount);
    22F5: 10       PUSH  X
    22F6: 62 D0 00 MOV   REG[0xD0],0x0
    22F9: 51 3B    MOV   A,[0x3B]
    22FB: 08       PUSH  A
    22FC: 51 3C    MOV   A,[0x3C]
    22FE: 20       POP   X
    22FF: 7C 0B 87 LCALL _LCD_PrHexInt
(0124) 	LCD_PrCString(" Y:");
    2302: 50 04    MOV   A,0x4
    2304: 08       PUSH  A
    2305: 50 E0    MOV   A,0xE0
    2307: 5C       MOV   X,A
    2308: 18       POP   A
    2309: 7C 0B 52 LCALL _LCD_PrCString
(0125) 	LCD_PrHexInt(ycount);
    230C: 62 D0 00 MOV   REG[0xD0],0x0
    230F: 51 51    MOV   A,[0x51]
    2311: 08       PUSH  A
    2312: 51 52    MOV   A,[0x52]
    2314: 20       POP   X
    2315: 7C 0B 87 LCALL _LCD_PrHexInt
    2318: 20       POP   X
(0126) 	//// Control the brightness of the PWM8LED with the Y-axis
(0127) 	yopos = ypos;
    2319: 62 D0 00 MOV   REG[0xD0],0x0
    231C: 51 74    MOV   A,[PS2RxBufIn+2]
    231E: 62 D0 00 MOV   REG[0xD0],0x0
    2321: 53 76    MOV   [PS2RxBufIn+4],A
(0128) 	ypos = (BYTE)(ycount>>4);
    2323: 62 D0 00 MOV   REG[0xD0],0x0
    2326: 51 52    MOV   A,[0x52]
    2328: 08       PUSH  A
    2329: 51 51    MOV   A,[0x51]
    232B: 62 D0 00 MOV   REG[0xD0],0x0
    232E: 53 22    MOV   [__r0],A
    2330: 18       POP   A
    2331: 53 21    MOV   [__r1],A
    2333: 68 22    ASR   [__r0]
    2335: 6E 21    RRC   [__r1]
    2337: 68 22    ASR   [__r0]
    2339: 6E 21    RRC   [__r1]
    233B: 68 22    ASR   [__r0]
    233D: 6E 21    RRC   [__r1]
    233F: 68 22    ASR   [__r0]
    2341: 6E 21    RRC   [__r1]
    2343: 51 21    MOV   A,[__r1]
    2345: 62 D0 00 MOV   REG[0xD0],0x0
    2348: 53 74    MOV   [PS2RxBufIn+2],A
(0129) 	if (ypos != yopos) {
    234A: 51 74    MOV   A,[PS2RxBufIn+2]
    234C: 62 D0 00 MOV   REG[0xD0],0x0
    234F: 3A 76    CMP   A,[PS2RxBufIn+4]
    2351: A0 0B    JZ    0x235D
(0130) 		PWM8LED_WritePulseWidth(ypos);
    2353: 10       PUSH  X
    2354: 62 D0 00 MOV   REG[0xD0],0x0
    2357: 51 74    MOV   A,[PS2RxBufIn+2]
    2359: 7C 0A FB LCALL _PWM8LED_WritePulseWidth
    235C: 20       POP   X
(0131) 	}
(0132) 	//// Pilot the cursor around the LCD with the X-axis
(0133) 	xopos = xpos;
    235D: 62 D0 00 MOV   REG[0xD0],0x0
    2360: 51 73    MOV   A,[PS2RxBufIn+1]
    2362: 62 D0 00 MOV   REG[0xD0],0x0
    2365: 53 75    MOV   [PS2RxBufIn+3],A
(0134) 	xpos = (BYTE)(xcount>>5);
    2367: 62 D0 00 MOV   REG[0xD0],0x0
    236A: 51 3C    MOV   A,[0x3C]
    236C: 08       PUSH  A
    236D: 51 3B    MOV   A,[0x3B]
    236F: 62 D0 00 MOV   REG[0xD0],0x0
    2372: 53 22    MOV   [__r0],A
    2374: 18       POP   A
    2375: 53 21    MOV   [__r1],A
    2377: 68 22    ASR   [__r0]
    2379: 6E 21    RRC   [__r1]
    237B: 68 22    ASR   [__r0]
    237D: 6E 21    RRC   [__r1]
    237F: 68 22    ASR   [__r0]
    2381: 6E 21    RRC   [__r1]
    2383: 68 22    ASR   [__r0]
    2385: 6E 21    RRC   [__r1]
    2387: 68 22    ASR   [__r0]
    2389: 6E 21    RRC   [__r1]
    238B: 51 21    MOV   A,[__r1]
    238D: 62 D0 00 MOV   REG[0xD0],0x0
    2390: 53 73    MOV   [PS2RxBufIn+1],A
(0135) 	if (lbtn) {
    2392: 3D 05 00 CMP   [X+5],0x0
    2395: A0 AC    JZ    0x2442
(0136) 		if (xpos >= xopos) {
    2397: 51 73    MOV   A,[PS2RxBufIn+1]
    2399: 62 D0 00 MOV   REG[0xD0],0x0
    239C: 3A 75    CMP   A,[PS2RxBufIn+3]
    239E: C0 52    JC    0x23F1
(0137) 			for(i=xopos ; i<=xpos ; i++) {
    23A0: 62 D0 00 MOV   REG[0xD0],0x0
    23A3: 51 75    MOV   A,[PS2RxBufIn+3]
    23A5: 54 00    MOV   [X+0],A
    23A7: 80 16    JMP   0x23BE
(0138) 				LCD_Position(0,i);
    23A9: 10       PUSH  X
    23AA: 59 00    MOV   X,[X+0]
    23AC: 50 00    MOV   A,0x0
    23AE: 7C 0C D7 LCALL _LCD_Position
(0139) 				LCD_WriteData(0xDB); // Square
    23B1: 50 DB    MOV   A,0xDB
    23B3: 7C 0B A0 LCALL LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData
(0140) 				LCD_Control(LCD_CURSOR_SH_LEFT);
    23B6: 50 10    MOV   A,0x10
    23B8: 7C 0B B4 LCALL _LCD_Control
    23BB: 20       POP   X
(0141) 			}
    23BC: 77 00    INC   [X+0]
    23BE: 62 D0 00 MOV   REG[0xD0],0x0
    23C1: 51 73    MOV   A,[PS2RxBufIn+1]
    23C3: 62 D0 00 MOV   REG[0xD0],0x0
    23C6: 53 21    MOV   [__r1],A
    23C8: 55 22 00 MOV   [__r0],0x0
    23CB: 52 00    MOV   A,[X+0]
    23CD: 53 1F    MOV   [__r3],A
    23CF: 55 20 00 MOV   [__r2],0x0
    23D2: 47 1F 80 TST   [__r3],0x80
    23D5: A0 04    JZ    0x23DA
    23D7: 55 20 FF MOV   [__r2],0xFF
    23DA: 62 D0 00 MOV   REG[0xD0],0x0
    23DD: 51 21    MOV   A,[__r1]
    23DF: 12 1F    SUB   A,[__r3]
    23E1: 51 20    MOV   A,[__r2]
    23E3: 31 80    XOR   A,0x80
    23E5: 53 16    MOV   [__rX],A
    23E7: 51 22    MOV   A,[__r0]
    23E9: 31 80    XOR   A,0x80
    23EB: 1A 16    SBB   A,[__rX]
    23ED: DF BB    JNC   0x23A9
(0142) 		}
    23EF: 80 5E    JMP   0x244E
(0143) 		else {
(0144) 			for(i=xopos ; i>=xpos ; i--) {
    23F1: 62 D0 00 MOV   REG[0xD0],0x0
    23F4: 51 75    MOV   A,[PS2RxBufIn+3]
    23F6: 54 00    MOV   [X+0],A
    23F8: 80 16    JMP   0x240F
(0145) 				LCD_Position(0,i);
    23FA: 10       PUSH  X
    23FB: 59 00    MOV   X,[X+0]
    23FD: 50 00    MOV   A,0x0
    23FF: 7C 0C D7 LCALL _LCD_Position
(0146) 				LCD_WriteData(0xDB); // Square
    2402: 50 DB    MOV   A,0xDB
    2404: 7C 0B A0 LCALL LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData
(0147) 				LCD_Control(LCD_CURSOR_SH_LEFT);
    2407: 50 10    MOV   A,0x10
    2409: 7C 0B B4 LCALL _LCD_Control
    240C: 20       POP   X
(0148) 			}
    240D: 7B 00    DEC   [X+0]
    240F: 62 D0 00 MOV   REG[0xD0],0x0
    2412: 51 73    MOV   A,[PS2RxBufIn+1]
    2414: 62 D0 00 MOV   REG[0xD0],0x0
    2417: 53 21    MOV   [__r1],A
    2419: 55 22 00 MOV   [__r0],0x0
    241C: 52 00    MOV   A,[X+0]
    241E: 53 1F    MOV   [__r3],A
    2420: 55 20 00 MOV   [__r2],0x0
    2423: 47 1F 80 TST   [__r3],0x80
    2426: A0 04    JZ    0x242B
    2428: 55 20 FF MOV   [__r2],0xFF
    242B: 62 D0 00 MOV   REG[0xD0],0x0
    242E: 51 1F    MOV   A,[__r3]
    2430: 12 21    SUB   A,[__r1]
    2432: 51 22    MOV   A,[__r0]
    2434: 31 80    XOR   A,0x80
    2436: 53 16    MOV   [__rX],A
    2438: 51 20    MOV   A,[__r2]
    243A: 31 80    XOR   A,0x80
    243C: 1A 16    SBB   A,[__rX]
    243E: DF BB    JNC   0x23FA
(0149) 		}
(0150) 	}
    2440: 80 0D    JMP   0x244E
(0151) 	else {
(0152) 		LCD_Position(0,xpos);
    2442: 10       PUSH  X
    2443: 62 D0 00 MOV   REG[0xD0],0x0
    2446: 58 73    MOV   X,[PS2RxBufIn+1]
    2448: 50 00    MOV   A,0x0
    244A: 7C 0C D7 LCALL _LCD_Position
    244D: 20       POP   X
(0153) 	}
(0154) 	if (rbtn) {
    244E: 3D 04 00 CMP   [X+4],0x0
    2451: A0 AF    JZ    0x2501
(0155) 		if (xpos >= xopos) {
    2453: 62 D0 00 MOV   REG[0xD0],0x0
    2456: 51 73    MOV   A,[PS2RxBufIn+1]
    2458: 62 D0 00 MOV   REG[0xD0],0x0
    245B: 3A 75    CMP   A,[PS2RxBufIn+3]
    245D: C0 52    JC    0x24B0
(0156) 			for(i=xopos ; i<=xpos ; i++) {
    245F: 62 D0 00 MOV   REG[0xD0],0x0
    2462: 51 75    MOV   A,[PS2RxBufIn+3]
    2464: 54 00    MOV   [X+0],A
    2466: 80 16    JMP   0x247D
(0157) 				LCD_Position(0,i);
    2468: 10       PUSH  X
    2469: 59 00    MOV   X,[X+0]
    246B: 50 00    MOV   A,0x0
    246D: 7C 0C D7 LCALL _LCD_Position
(0158) 				LCD_WriteData(' ');
    2470: 50 20    MOV   A,0x20
    2472: 7C 0B A0 LCALL LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData
(0159) 				LCD_Control(LCD_CURSOR_SH_LEFT);
    2475: 50 10    MOV   A,0x10
    2477: 7C 0B B4 LCALL _LCD_Control
    247A: 20       POP   X
(0160) 			}
    247B: 77 00    INC   [X+0]
    247D: 62 D0 00 MOV   REG[0xD0],0x0
    2480: 51 73    MOV   A,[PS2RxBufIn+1]
    2482: 62 D0 00 MOV   REG[0xD0],0x0
    2485: 53 21    MOV   [__r1],A
    2487: 55 22 00 MOV   [__r0],0x0
    248A: 52 00    MOV   A,[X+0]
    248C: 53 1F    MOV   [__r3],A
    248E: 55 20 00 MOV   [__r2],0x0
    2491: 47 1F 80 TST   [__r3],0x80
    2494: A0 04    JZ    0x2499
    2496: 55 20 FF MOV   [__r2],0xFF
    2499: 62 D0 00 MOV   REG[0xD0],0x0
    249C: 51 21    MOV   A,[__r1]
    249E: 12 1F    SUB   A,[__r3]
    24A0: 51 20    MOV   A,[__r2]
    24A2: 31 80    XOR   A,0x80
    24A4: 53 16    MOV   [__rX],A
    24A6: 51 22    MOV   A,[__r0]
    24A8: 31 80    XOR   A,0x80
    24AA: 1A 16    SBB   A,[__rX]
    24AC: DF BB    JNC   0x2468
(0161) 		}
    24AE: 80 5E    JMP   0x250D
(0162) 		else {
(0163) 			for(i=xopos ; i>=xpos ; i--) {
    24B0: 62 D0 00 MOV   REG[0xD0],0x0
    24B3: 51 75    MOV   A,[PS2RxBufIn+3]
    24B5: 54 00    MOV   [X+0],A
    24B7: 80 16    JMP   0x24CE
(0164) 				LCD_Position(0,i);
    24B9: 10       PUSH  X
    24BA: 59 00    MOV   X,[X+0]
    24BC: 50 00    MOV   A,0x0
    24BE: 7C 0C D7 LCALL _LCD_Position
(0165) 				LCD_WriteData(' ');
    24C1: 50 20    MOV   A,0x20
    24C3: 7C 0B A0 LCALL LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData
(0166) 				LCD_Control(LCD_CURSOR_SH_LEFT);
    24C6: 50 10    MOV   A,0x10
    24C8: 7C 0B B4 LCALL _LCD_Control
    24CB: 20       POP   X
(0167) 			}
    24CC: 7B 00    DEC   [X+0]
    24CE: 62 D0 00 MOV   REG[0xD0],0x0
    24D1: 51 73    MOV   A,[PS2RxBufIn+1]
    24D3: 62 D0 00 MOV   REG[0xD0],0x0
    24D6: 53 21    MOV   [__r1],A
    24D8: 55 22 00 MOV   [__r0],0x0
    24DB: 52 00    MOV   A,[X+0]
    24DD: 53 1F    MOV   [__r3],A
    24DF: 55 20 00 MOV   [__r2],0x0
    24E2: 47 1F 80 TST   [__r3],0x80
    24E5: A0 04    JZ    0x24EA
    24E7: 55 20 FF MOV   [__r2],0xFF
    24EA: 62 D0 00 MOV   REG[0xD0],0x0
    24ED: 51 1F    MOV   A,[__r3]
    24EF: 12 21    SUB   A,[__r1]
    24F1: 51 22    MOV   A,[__r0]
    24F3: 31 80    XOR   A,0x80
    24F5: 53 16    MOV   [__rX],A
    24F7: 51 20    MOV   A,[__r2]
    24F9: 31 80    XOR   A,0x80
    24FB: 1A 16    SBB   A,[__rX]
    24FD: DF BB    JNC   0x24B9
(0168) 		}
(0169) 	}
    24FF: 80 0D    JMP   0x250D
(0170) 	else {
(0171) 		LCD_Position(0,xpos);
    2501: 10       PUSH  X
    2502: 62 D0 00 MOV   REG[0xD0],0x0
    2505: 58 73    MOV   X,[PS2RxBufIn+1]
    2507: 50 00    MOV   A,0x0
    2509: 7C 0C D7 LCALL _LCD_Position
    250C: 20       POP   X
(0172) 	}
    250D: 38 F5    ADD   SP,0xF5
    250F: 20       POP   X
    2510: 7F       RET   
FILE: Z:\DOCUME~1\ECE_381\PS2BIT~1\PS2BIT~1\ps2.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "PSoCGPIOINT.h"
(0004) #include "ps2.h"
(0005) 
(0006) //// All external global variables (identified by names in LeadingCaps)
(0007) extern BYTE PS2FrameStatus; // Note: This only changes at the end of a complete frame or when the PS2OneShot fires (due to incomplete clock)
(0008) extern BYTE PS2RxBuffer[16]; // Receive buffer
(0009) extern BYTE PS2RxBufIn; // Bytes in receive buffer
(0010) extern BYTE PS2RxBufOut; // Bytes in receive buffer
(0011) extern BYTE TenMicroSecTimerReps;
(0012) 
(0013) //// Global Variables unique to this file (identified by names in LeadingCaps)
(0014) static BYTE PS2FrameState = 0;
(0015) static BYTE PS2DataIn = 0;
(0016) static BYTE PS2DataOut = 0;
(0017) static BYTE XXXForceBadRxParity = 0; // XXX - Testing
(0018) static BYTE XXXForceBadTxParity = 0; // XXX - Testing
(0019) 
(0020) //// State names used in the PS/2 bit-banging state machine implemented
(0021) //// in PS2DigBuf_ISR and PS2OneShot_ISR.
(0022) #define PS2_START_BIT_IN	0
(0023) #define PS2_D0_BIT_IN		1
(0024) #define PS2_D1_BIT_IN		2
(0025) #define PS2_D2_BIT_IN		3
(0026) #define PS2_D3_BIT_IN		4
(0027) #define PS2_D4_BIT_IN		5
(0028) #define PS2_D5_BIT_IN		6
(0029) #define PS2_D6_BIT_IN		7
(0030) #define PS2_D7_BIT_IN		8
(0031) #define PS2_PARITY_BIT_IN	9
(0032) #define PS2_STOP_BIT_IN		10
(0033) #define PS2_TRANSMIT_BEGIN	11
(0034) #define PS2_D0_BIT_OUT		12
(0035) #define PS2_D1_BIT_OUT		13
(0036) #define PS2_D2_BIT_OUT		14
(0037) #define PS2_D3_BIT_OUT		15
(0038) #define PS2_D4_BIT_OUT		16
(0039) #define PS2_D5_BIT_OUT		17
(0040) #define PS2_D6_BIT_OUT		18
(0041) #define PS2_D7_BIT_OUT		19
(0042) #define PS2_PARITY_BIT_OUT	20
(0043) #define PS2_STOP_BIT_OUT	21
(0044) #define PS2_ACK_BIT_IN		22
(0045) 
(0046) //-----------------------------------------------------------------------------
(0047) // Transmit a byte to the PS/2 device
(0048) //
(0049) // Returns:
(0050) //	0						No error in transmission or reception
(0051) //	DEVICE_TX_TIMEOUT		Timeout in transmission waiting for Clock
(0052) //	DEVICE_TX_FRAME_ERROR	A TX frame error occured while sending
(0053) //	DEVICE_ERROR			The device didn't generate enough clock transitions
(0054) //
(0055) // XXX - Implement this!
(0056) // From http://www.networktechinc.com/ps2-prots.html:
(0057) // The system checks for an PS/2 device transmission in process.
(0058) // If a transmission is in process and beyond the 10th clock, the
(0059) // system must receive the data.
(0060) // XXX - Sort-of implemented in the first line of this function.
(0061) //-----------------------------------------------------------------------------
(0062) BYTE PS2_Write_Byte(BYTE ps2data)
(0063) {
_PS2_Write_Byte:
  delay                --> X+0
  ps2data              --> X-4
    2511: 10       PUSH  X
    2512: 4F       MOV   X,SP
    2513: 38 01    ADD   SP,0x1
(0064) 	BYTE delay;
(0065) 
(0066) 	//// If we're receiving something, wait until the transmission is done.
(0067) 	while(PS2FrameState != PS2_START_BIT_IN);
    2515: 62 D0 00 MOV   REG[0xD0],0x0
    2518: 3C 77 00 CMP   [ps2.c:PS2FrameState],0x0
    251B: BF F9    JNZ   0x2515
(0068) 	//// Copy the byte-to-be-sent to the PS2DataOut global variable used by
(0069) 	//// the PS/2 communication ISR
(0070) 	PS2DataOut = ps2data;
    251D: 52 FC    MOV   A,[X-4]
    251F: 62 D0 00 MOV   REG[0xD0],0x0
    2522: 53 79    MOV   [ps2.c:PS2DataOut],A
(0071) 	//// XXX - Diagnostics: Make a trigger pulse for the oscilloscope
(0072) 	//TRIGGER_LOW;
(0073) 	//delay = 1;
(0074) 	//while(delay--);
(0075) 	//TRIGGER_HIGH;
(0076) 	//
(0077) 	//// Initialize the state machine to transmit mode.
(0078) 	PS2FrameState = PS2_TRANSMIT_BEGIN;
    2524: 62 D0 00 MOV   REG[0xD0],0x0
    2527: 55 77 0B MOV   [ps2.c:PS2FrameState],0xB
(0079) 	//// Bring the PS/2 Clock line LOW. This will trigger an interrupt
(0080) 	//// on PS2DigBuf which will advance the state machine to PS2_D0_BIT_OUT.
(0081) 	PS2CLOCK_LOW;
    252A: 62 D0 00 MOV   REG[0xD0],0x0
    252D: 26 00 F7 AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xF7
    2530: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2532: 60 04    MOV   REG[0x4],A
(0082) 	//// Hold the clock line LOW for a min/max of 90us/100us total (min 60us)
(0083) 	//// Set up the timer to let us know when 60us have elapsed.
(0084) 	//// Note: Timer setup, polling, and ISR can add up to 10us of latency.
(0085) 	TenMicroSecTimerReps = 1;
    2534: 62 D0 00 MOV   REG[0xD0],0x0
    2537: 55 65 01 MOV   [TenMicroSecTimerReps],0x1
(0086) 	TenMicroSecTimer_WritePeriod(5); // (5+1) * 10us = 60us
    253A: 10       PUSH  X
    253B: 57 00    MOV   X,0x0
    253D: 50 05    MOV   A,0x5
    253F: 7C 09 80 LCALL _TenMicroSecTimer_WritePeriod
(0087) 	TenMicroSecTimer_Start();
    2542: 7C 09 78 LCALL _TenMicroSecTimer_Start
    2545: 20       POP   X
(0088) 	while(TenMicroSecTimerReps);
    2546: 62 D0 00 MOV   REG[0xD0],0x0
    2549: 3C 65 00 CMP   [TenMicroSecTimerReps],0x0
    254C: BF F9    JNZ   0x2546
(0089) 	TenMicroSecTimer_Stop();
    254E: 10       PUSH  X
    254F: 7C 09 7C LCALL _TenMicroSecTimer_Stop
    2552: 20       POP   X
(0090) 	//// Bring the PS/2 Data line LOW (note: this is also the Start bit out)
(0091) 	PS2DATA_LOW;
    2553: 62 D0 00 MOV   REG[0xD0],0x0
    2556: 26 00 EF AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2559: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    255B: 60 04    MOV   REG[0x4],A
(0092) 	//// Set up the timer to let us know when 30us have elapsed.
(0093) 	//// Note: Timer setup, polling, and ISR can add up to 10us of latency.
(0094) 	TenMicroSecTimerReps = 1;
    255D: 62 D0 00 MOV   REG[0xD0],0x0
    2560: 55 65 01 MOV   [TenMicroSecTimerReps],0x1
(0095) 	TenMicroSecTimer_WritePeriod(2); // (2+1) * 10us = 30us
    2563: 10       PUSH  X
    2564: 57 00    MOV   X,0x0
    2566: 50 02    MOV   A,0x2
    2568: 7C 09 80 LCALL _TenMicroSecTimer_WritePeriod
(0096) 	TenMicroSecTimer_Start();
    256B: 7C 09 78 LCALL _TenMicroSecTimer_Start
    256E: 20       POP   X
(0097) 	while(TenMicroSecTimerReps);
    256F: 62 D0 00 MOV   REG[0xD0],0x0
    2572: 3C 65 00 CMP   [TenMicroSecTimerReps],0x0
    2575: BF F9    JNZ   0x256F
(0098) 	TenMicroSecTimer_Stop();
    2577: 10       PUSH  X
    2578: 7C 09 7C LCALL _TenMicroSecTimer_Stop
    257B: 20       POP   X
(0099) 	//// Bring the clock line HIGH which should cause the device to generate
(0100) 	//// a clock signal.
(0101) 	//// Note: Normally, a HIGH level on the Clock line causes the PS2OneShot
(0102) 	//// to start its relax interval timing, however, interrupts for the
(0103) 	//// PS2OneShot are only enabled when actively transmitting or receiving.
(0104) 	PS2CLOCK_HIGH;
    257C: 62 D0 00 MOV   REG[0xD0],0x0
    257F: 2E 00 08 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x8
    2582: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2584: 60 04    MOV   REG[0x4],A
(0105) 	//// Per Adam Chapweske: Wait here for 15ms or until we've transitioned
(0106) 	//// out of the PS2_D0_BIT_OUT state. If this time is exceeded, it is a
(0107) 	//// Transmit Timeout.
(0108) 	TenMicroSecTimerReps = 1;
    2586: 62 D0 00 MOV   REG[0xD0],0x0
    2589: 55 65 01 MOV   [TenMicroSecTimerReps],0x1
(0109) 	TenMicroSecTimer_WritePeriod(1499); // (1499+1) * 10us = 15ms
    258C: 10       PUSH  X
    258D: 57 05    MOV   X,0x5
    258F: 50 DB    MOV   A,0xDB
    2591: 7C 09 80 LCALL _TenMicroSecTimer_WritePeriod
(0110) 	TenMicroSecTimer_Start();
    2594: 7C 09 78 LCALL _TenMicroSecTimer_Start
    2597: 20       POP   X
(0111) 	while(TenMicroSecTimerReps&&(PS2FrameState == PS2_D0_BIT_OUT));
    2598: 62 D0 00 MOV   REG[0xD0],0x0
    259B: 3C 65 00 CMP   [TenMicroSecTimerReps],0x0
    259E: A0 09    JZ    0x25A8
    25A0: 62 D0 00 MOV   REG[0xD0],0x0
    25A3: 3C 77 0C CMP   [ps2.c:PS2FrameState],0xC
    25A6: AF F1    JZ    0x2598
(0112) 	TenMicroSecTimer_Stop();
    25A8: 10       PUSH  X
    25A9: 7C 09 7C LCALL _TenMicroSecTimer_Stop
    25AC: 20       POP   X
(0113) 	//// If we've timed out, without moving from the PS2_D0_BIT_OUT state,
(0114) 	//// it means the device never sent us a clock signal after our
(0115) 	//// transmission request. Return a Transmit Timeout Error code.
(0116) 	if (PS2FrameState == PS2_D0_BIT_OUT) {
    25AD: 62 D0 00 MOV   REG[0xD0],0x0
    25B0: 3C 77 0C CMP   [ps2.c:PS2FrameState],0xC
    25B3: B0 18    JNZ   0x25CC
(0117) 		PS2DATA_HIGH; // Since we've timed-out, bring the Data line HIGH again
    25B5: 62 D0 00 MOV   REG[0xD0],0x0
    25B8: 2E 00 10 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    25BB: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    25BD: 60 04    MOV   REG[0x4],A
(0118) 		PS2FrameState = PS2_START_BIT_IN; // Reset the state machine
    25BF: 62 D0 00 MOV   REG[0xD0],0x0
    25C2: 55 77 00 MOV   [ps2.c:PS2FrameState],0x0
(0119) 		return(DEVICE_TX_TIMEOUT);
    25C5: 62 D0 00 MOV   REG[0xD0],0x0
    25C8: 50 01    MOV   A,0x1
    25CA: 80 38    JMP   0x2603
(0120) 	}
(0121) 	//// We've transitioned out of the PS2_D0_BIT_OUT state so wait until
(0122) 	//// we return to the PS2_START_BIT_IN state, either because we completed
(0123) 	//// transmitting a full frame or the PS2OneShot reset us.
(0124) 	while(PS2FrameState != PS2_START_BIT_IN);
    25CC: 62 D0 00 MOV   REG[0xD0],0x0
    25CF: 3C 77 00 CMP   [ps2.c:PS2FrameState],0x0
    25D2: BF F9    JNZ   0x25CC
(0125) 	//// If the transmission was successful, return 0.
(0126) 	if (PS2FrameStatus & FRAME_BYTE_TRANSMITTED) {
    25D4: 62 D0 00 MOV   REG[0xD0],0x0
    25D7: 47 62 02 TST   [PS2FrameStatus],0x2
    25DA: A0 0B    JZ    0x25E6
(0127) 		PS2FrameStatus = 0; // Clear PS2FrameStatus
    25DC: 55 62 00 MOV   [PS2FrameStatus],0x0
(0128) 		return(0);
    25DF: 62 D0 00 MOV   REG[0xD0],0x0
    25E2: 50 00    MOV   A,0x0
    25E4: 80 1E    JMP   0x2603
(0129) 	}
(0130) 	//// If the transmission had a frame error, notify the calling function.
(0131) 	if (PS2FrameStatus & FRAME_TX_FRAME_ERROR) {
    25E6: 62 D0 00 MOV   REG[0xD0],0x0
    25E9: 47 62 10 TST   [PS2FrameStatus],0x10
    25EC: A0 0B    JZ    0x25F8
(0132) 		PS2FrameStatus = 0; // Clear PS2FrameStatus
    25EE: 55 62 00 MOV   [PS2FrameStatus],0x0
(0133) 		return(DEVICE_TX_FRAME_ERROR);
    25F1: 62 D0 00 MOV   REG[0xD0],0x0
    25F4: 50 04    MOV   A,0x4
    25F6: 80 0C    JMP   0x2603
(0134) 	}
(0135) 	//// The only other condition, FRAME_INCOMPLETE, means device error.
(0136) 	PS2FrameStatus = 0; // Clear PS2FrameStatus
    25F8: 62 D0 00 MOV   REG[0xD0],0x0
    25FB: 55 62 00 MOV   [PS2FrameStatus],0x0
(0137) 	return(DEVICE_ERROR);
    25FE: 62 D0 00 MOV   REG[0xD0],0x0
    2601: 50 40    MOV   A,0x40
    2603: 38 FF    ADD   SP,0xFF
    2605: 20       POP   X
    2606: 7F       RET   
(0138) }
(0139) 
(0140) //-----------------------------------------------------------------------------
(0141) // Send a command to the PS/2 device and process the device's response.
(0142) //
(0143) // Returns:
(0144) //	0						No error in transmission or reception
(0145) //	DEVICE_TX_TIMEOUT		Timeout in transmission waiting for Clock
(0146) //	DEVICE_RX_TIMEOUT		No device response to our command
(0147) //	DEVICE_TX_FRAME_ERROR	A TX frame error occured while sending
(0148) //	DEVICE_RX_FRAME_ERROR	An RX frame error occured while receiving
(0149) //	DEVICE_INVALID_RESPONSE	The device response to our command was not valid
(0150) //	DEVICE_ERROR			The device didn't generate enough clock transitions
(0151) //-----------------------------------------------------------------------------
(0152) // From: The AT-PS/2 Keyboard Interface, Copyright 2001, Adam Chapweske:
(0153) //
(0154) // Every byte sent to the keyboard gets a response of 0xFA ("acknowledge")
(0155) // from the keyboard.  The only exceptions to this are the keyboard's response
(0156) // to the "Resend" and "Echo" commands.  The host should wait for an
(0157) // "acknowledge" before sending the next byte to the keyboard.  The keyboard
(0158) // clears its output buffer in response to any command.
(0159) //-----------------------------------------------------------------------------
(0160) BYTE PS2_Send_Command_Process_Response(BYTE ps2data)
(0161) {
_PS2_Send_Command_Process_Response:
  dataout              --> X+1
  txstatus             --> X+0
  ps2data              --> X-4
    2607: 10       PUSH  X
    2608: 4F       MOV   X,SP
    2609: 38 04    ADD   SP,0x4
(0162) 	BYTE dataout;
(0163) 	BYTE txstatus;
(0164) 
(0165) 	//// Loop in case we get a RESEND response from the PS/2 device.
(0166) 	//// XXX - Should we put an upper bound on how many Resends we're willing
(0167) 	//// to do for writing a single byte? (e.g. i=3; while(i--) { ... })
(0168) 	dataout = ps2data;
    260B: 52 FC    MOV   A,[X-4]
    260D: 54 01    MOV   [X+1],A
    260F: 81 01    JMP   0x2711
(0169) 	while(1) {
(0170) 		txstatus = PS2_Write_Byte(dataout);
    2611: 52 01    MOV   A,[X+1]
    2613: 08       PUSH  A
    2614: 9E FB    CALL  _PS2_Write_Byte
    2616: 38 FF    ADD   SP,0xFF
    2618: 62 D0 00 MOV   REG[0xD0],0x0
    261B: 54 00    MOV   [X+0],A
(0171) 		//// A non-zero return value means there was an transmission error:
(0172) 		//// DEVICE_TX_TIMEOUT, DEVICE_TX_FRAME_ERROR, or DEVICE_ERROR
(0173) 		if (txstatus) {
    261D: 3D 00 00 CMP   [X+0],0x0
    2620: A0 05    JZ    0x2626
(0174) 			return(txstatus);
    2622: 52 00    MOV   A,[X+0]
    2624: 80 F9    JMP   0x271E
(0175) 		}
(0176) 		///////////////////////////////////////////////////////////////////////
(0177) 		//// A response should come from the keyboard within 20ms from now.
(0178) 		TenMicroSecTimerReps = 1;
    2626: 62 D0 00 MOV   REG[0xD0],0x0
    2629: 55 65 01 MOV   [TenMicroSecTimerReps],0x1
(0179) 		TenMicroSecTimer_WritePeriod(1999); // (1999+1) * 10us = 20ms
    262C: 10       PUSH  X
    262D: 57 07    MOV   X,0x7
    262F: 50 CF    MOV   A,0xCF
    2631: 7C 09 80 LCALL _TenMicroSecTimer_WritePeriod
(0180) 		TenMicroSecTimer_Start();
    2634: 7C 09 78 LCALL _TenMicroSecTimer_Start
    2637: 20       POP   X
(0181) 		while(TenMicroSecTimerReps&&(!PS2FrameStatus));
    2638: 62 D0 00 MOV   REG[0xD0],0x0
    263B: 3C 65 00 CMP   [TenMicroSecTimerReps],0x0
    263E: A0 09    JZ    0x2648
    2640: 62 D0 00 MOV   REG[0xD0],0x0
    2643: 3C 62 00 CMP   [PS2FrameStatus],0x0
    2646: AF F1    JZ    0x2638
(0182) 		TenMicroSecTimer_Stop();
    2648: 10       PUSH  X
    2649: 7C 09 7C LCALL _TenMicroSecTimer_Stop
    264C: 20       POP   X
(0183) 		//// If the device sent us a response, process it.
(0184) 		if (PS2FrameStatus & FRAME_DATA_AVAILABLE) {
    264D: 62 D0 00 MOV   REG[0xD0],0x0
    2650: 47 62 01 TST   [PS2FrameStatus],0x1
    2653: A0 7F    JZ    0x26D3
(0185) 			//// Clear PS2FrameStatus
(0186) 			PS2FrameStatus = 0x00;
    2655: 55 62 00 MOV   [PS2FrameStatus],0x0
(0187) 			//// Remove the response from the RX Buffer
(0188) 			if (PS2RxBufIn) PS2RxBufIn--; else PS2RxBufIn = 15;
    2658: 62 D0 00 MOV   REG[0xD0],0x0
    265B: 3C 72 00 CMP   [PS2RxBufIn],0x0
    265E: A0 05    JZ    0x2664
    2660: 7A 72    DEC   [PS2RxBufIn]
    2662: 80 07    JMP   0x266A
    2664: 62 D0 00 MOV   REG[0xD0],0x0
    2667: 55 72 0F MOV   [PS2RxBufIn],0xF
(0189) 			//// Valid responses: ACK (0xFA), Resend (0xFE), or Echo (0xEE)
(0190) 			switch(PS2DataIn) {
    266A: 62 D0 00 MOV   REG[0xD0],0x0
    266D: 51 78    MOV   A,[ps2.c:PS2DataIn]
    266F: 54 03    MOV   [X+3],A
    2671: 56 02 00 MOV   [X+2],0x0
    2674: 52 03    MOV   A,[X+3]
    2676: 11 FA    SUB   A,0xFA
    2678: 62 D0 00 MOV   REG[0xD0],0x0
    267B: 53 15    MOV   [__rY],A
    267D: 52 02    MOV   A,[X+2]
    267F: 31 80    XOR   A,0x80
    2681: 19 80    SBB   A,0x80
    2683: 2A 15    OR    A,[__rY]
    2685: A0 1B    JZ    0x26A1
    2687: D0 0D    JNC   0x2695
    2689: 3D 02 00 CMP   [X+2],0x0
    268C: B0 06    JNZ   0x2693
    268E: 3D 03 EE CMP   [X+3],0xEE
    2691: A0 16    JZ    0x26A8
    2693: 80 27    JMP   0x26BB
    2695: 3D 02 00 CMP   [X+2],0x0
    2698: B0 06    JNZ   0x269F
    269A: 3D 03 FE CMP   [X+3],0xFE
    269D: A0 35    JZ    0x26D3
    269F: 80 1B    JMP   0x26BB
(0191) 			case 0xFA: // ACK: The device correctly received our command
(0192) 				return(0);
    26A1: 62 D0 00 MOV   REG[0xD0],0x0
    26A4: 50 00    MOV   A,0x0
    26A6: 80 77    JMP   0x271E
(0193) 			case 0xFE: // RESEND: The device wants us to resend the last byte
(0194) 				//// Caused by the device getting a parity error.
(0195) 				//// If we break out of this switch, the while() loop we're in
(0196) 				//// will resend our command.
(0197) 				// XXX - Should we keep a count of resend requests received from
(0198) 				// the device? Should we give up after many back-to-back Resends?
(0199) 				break;
(0200) 			case 0xEE: // ECHO: The device responded with an Echo
(0201) 				//// This should be because we sent it an Echo
(0202) 				if (ps2data == 0xEE) {
    26A8: 3D FC EE CMP   [X-4],0xEE
    26AB: B0 08    JNZ   0x26B4
(0203) 					return(0);
    26AD: 62 D0 00 MOV   REG[0xD0],0x0
    26B0: 50 00    MOV   A,0x0
    26B2: 80 6B    JMP   0x271E
(0204) 				}
(0205) 				//// If we received an Echo but didn't send one, it's invalid.
(0206) 				return(DEVICE_INVALID_RESPONSE);
    26B4: 62 D0 00 MOV   REG[0xD0],0x0
    26B7: 50 20    MOV   A,0x20
    26B9: 80 64    JMP   0x271E
(0207) 			//// XXX - What if we get an error code from the device? Can we? 
(0208) 			////       Test what happens when we send a bogus command.
(0209) 			//case 0xFC: // ERROR: The device indicated an error
(0210) 			default:
(0211) 				LCD_Position(0,14);
    26BB: 10       PUSH  X
    26BC: 57 0E    MOV   X,0xE
    26BE: 50 00    MOV   A,0x0
    26C0: 7C 0C D7 LCALL _LCD_Position
(0212) 				LCD_PrHexByte(PS2DataIn);
    26C3: 62 D0 00 MOV   REG[0xD0],0x0
    26C6: 51 78    MOV   A,[ps2.c:PS2DataIn]
    26C8: 7C 0B 74 LCALL _LCD_PrHexByte
    26CB: 20       POP   X
(0213) 				// We should never get here. This can only happen if the
(0214) 				// device sent us a response to a command that wasn't one
(0215) 				// of the three listed above.
(0216) 				return(DEVICE_INVALID_RESPONSE);
    26CC: 62 D0 00 MOV   REG[0xD0],0x0
    26CF: 50 20    MOV   A,0x20
    26D1: 80 4C    JMP   0x271E
(0217) 			}
(0218) 		}
(0219) 		//// If the response frame from the device had a parity error,
(0220) 		//// send a RESEND command.
(0221) 		if (PS2FrameStatus & FRAME_RX_PARITY_ERROR) {
    26D3: 62 D0 00 MOV   REG[0xD0],0x0
    26D6: 47 62 04 TST   [PS2FrameStatus],0x4
    26D9: A0 09    JZ    0x26E3
(0222) 			PS2FrameStatus = 0x00; // Clear PS2FrameStatus
    26DB: 55 62 00 MOV   [PS2FrameStatus],0x0
(0223) 			dataout = 0xFE;
    26DE: 56 01 FE MOV   [X+1],0xFE
(0224) 			continue;
    26E1: 80 2F    JMP   0x2711
(0225) 		}
(0226) 		//// If we didn't get any change in frame status in response to our
(0227) 		//// transmission then return a Receive Timeout Error code.
(0228) 		//// Per Adam Chapweske: Device is probably broken.
(0229) 		//// XXX - Then should this return DEVICE_ERROR instead?
(0230) 		////       If so, just change the return() to a break
(0231) 		if (!PS2FrameStatus) {
    26E3: 62 D0 00 MOV   REG[0xD0],0x0
    26E6: 3C 62 00 CMP   [PS2FrameStatus],0x0
    26E9: B0 08    JNZ   0x26F2
(0232) 			return(DEVICE_RX_TIMEOUT);
    26EB: 62 D0 00 MOV   REG[0xD0],0x0
    26EE: 50 02    MOV   A,0x2
    26F0: 80 2D    JMP   0x271E
(0233) 		}
(0234) 		//// If we have an incomplete number of clock transitions in the
(0235) 		//// response from the device, it is broken or was unplugged.
(0236) 		if (PS2FrameStatus & FRAME_INCOMPLETE) {
    26F2: 62 D0 00 MOV   REG[0xD0],0x0
    26F5: 47 62 20 TST   [PS2FrameStatus],0x20
    26F8: A0 06    JZ    0x26FF
(0237) 			PS2FrameStatus = 0x00; // Clear PS2FrameStatus
    26FA: 55 62 00 MOV   [PS2FrameStatus],0x0
(0238) 			break;
    26FD: 80 15    JMP   0x2713
(0239) 		}
(0240) 		//// XXX - What should we do if we get an FRAME_RX_FRAME_ERROR?
(0241) 		////       The specs aren't clear on what to do with framing errors.
(0242) 		if (PS2FrameStatus & FRAME_RX_FRAME_ERROR) {
    26FF: 62 D0 00 MOV   REG[0xD0],0x0
    2702: 47 62 08 TST   [PS2FrameStatus],0x8
    2705: A0 0B    JZ    0x2711
(0243) 			PS2FrameStatus = 0x00; // Clear PS2FrameStatus
    2707: 55 62 00 MOV   [PS2FrameStatus],0x0
(0244) 			return(DEVICE_RX_FRAME_ERROR);
    270A: 62 D0 00 MOV   REG[0xD0],0x0
    270D: 50 08    MOV   A,0x8
    270F: 80 0E    JMP   0x271E
(0245) 		}
(0246) 	}
    2711: 8E FF    JMP   0x2611
(0247) 	//// If we get here, the device is faulty (incomplete frame).
(0248) 	PS2FrameStatus = 0x00;
    2713: 62 D0 00 MOV   REG[0xD0],0x0
    2716: 55 62 00 MOV   [PS2FrameStatus],0x0
(0249) 	return(DEVICE_ERROR);
    2719: 62 D0 00 MOV   REG[0xD0],0x0
    271C: 50 40    MOV   A,0x40
    271E: 38 FC    ADD   SP,0xFC
    2720: 20       POP   X
    2721: 7F       RET   
(0250) }
(0251) 
(0252) //-----------------------------------------------------------------------------
(0253) // Determines if a PS/2 keyboard or mouse is present by detecting either the
(0254) // Basic Assurance Test (BAT) completion code at power-on or, failing that,
(0255) // sending a RESET command to the device and detecting the subsequent BAT code.
(0256) // Also waits 20ms after receiving a valid BAT code for the device to send a
(0257) // Mouse ID (0x00) code. If this is detected, the function identifies the
(0258) // device as a mouse in the return value.
(0259) //
(0260) //	0						No error in transmission or reception
(0261) //	DEVICE_TX_TIMEOUT		Timeout in transmission waiting for Clock
(0262) //	DEVICE_RX_TIMEOUT		The device didn't respond to our command
(0263) //	DEVICE_TX_FRAME_ERROR	A TX frame error occured while sending
(0264) //	DEVICE_RX_FRAME_ERROR	An RX frame error occured while receiving
(0265) //	DEVICE_IS_MOUSE			A mouse is detected. If not set, assume keyboard
(0266) //	DEVICE_BAD_BAT			Device responded with a bad BAT self-test
(0267) //	DEVICE_INVALID_RESPONSE	The device response to our command was not valid
(0268) //	DEVICE_ERROR			The device didn't generate enough clock transitions
(0269) //-----------------------------------------------------------------------------
(0270) BYTE PS2_Detect_Device(void)
(0271) {
_PS2_Detect_Device:
  power_on_bat         --> X+1
  status               --> X+0
    2722: 10       PUSH  X
    2723: 4F       MOV   X,SP
    2724: 38 02    ADD   SP,0x2
(0272) 	BYTE power_on_bat = 0;
    2726: 56 01 00 MOV   [X+1],0x0
(0273) 	BYTE status;
(0274) 
(0275) 	///////////////////////////////////////////////////////////////////////////
(0276) 	// Determine if the device has just powered on, i.e. we receive an 0xAA
(0277) 	// within 750ms (we'll wait 1000ms).
(0278) 	///////////////////////////////////////////////////////////////////////////
(0279) 	//// Set up the timer to let us know when 1000ms has elapsed.
(0280) 	TenMicroSecTimerReps = 2;
    2729: 62 D0 00 MOV   REG[0xD0],0x0
    272C: 55 65 02 MOV   [TenMicroSecTimerReps],0x2
(0281) 	TenMicroSecTimer_WritePeriod(49999); // 2*((49999+1) * 10us) = 1000ms
    272F: 10       PUSH  X
    2730: 57 C3    MOV   X,0xC3
    2732: 50 4F    MOV   A,0x4F
    2734: 7C 09 80 LCALL _TenMicroSecTimer_WritePeriod
(0282) 	TenMicroSecTimer_Start();
    2737: 7C 09 78 LCALL _TenMicroSecTimer_Start
    273A: 20       POP   X
(0283) 	//// Wait until we either get a change in frame status or the timer elapses
(0284) 	while(TenMicroSecTimerReps&&(!PS2FrameStatus));
    273B: 62 D0 00 MOV   REG[0xD0],0x0
    273E: 3C 65 00 CMP   [TenMicroSecTimerReps],0x0
    2741: A0 09    JZ    0x274B
    2743: 62 D0 00 MOV   REG[0xD0],0x0
    2746: 3C 62 00 CMP   [PS2FrameStatus],0x0
    2749: AF F1    JZ    0x273B
(0285) 	TenMicroSecTimer_Stop();
    274B: 10       PUSH  X
    274C: 7C 09 7C LCALL _TenMicroSecTimer_Stop
    274F: 20       POP   X
(0286) 	//// If we got a valid frame, check to see if it is a BAT code
(0287) 	if (PS2FrameStatus & FRAME_DATA_AVAILABLE) {
    2750: 62 D0 00 MOV   REG[0xD0],0x0
    2753: 47 62 01 TST   [PS2FrameStatus],0x1
    2756: A0 34    JZ    0x278B
(0288) 		PS2FrameStatus = 0x00; // Clear PS2FrameStatus
    2758: 55 62 00 MOV   [PS2FrameStatus],0x0
(0289) 		if (PS2DataIn == 0xAA) { // Good BAT
    275B: 62 D0 00 MOV   REG[0xD0],0x0
    275E: 3C 78 AA CMP   [ps2.c:PS2DataIn],0xAA
    2761: B0 09    JNZ   0x276B
(0290) 			power_on_bat = 1;
    2763: 56 01 01 MOV   [X+1],0x1
(0291) 			status = 0;
    2766: 56 00 00 MOV   [X+0],0x0
(0292) 		}
    2769: 80 0F    JMP   0x2779
(0293) 		else if (PS2DataIn == 0xFC) { // Bad BAT
    276B: 62 D0 00 MOV   REG[0xD0],0x0
    276E: 3C 78 FC CMP   [ps2.c:PS2DataIn],0xFC
    2771: B0 07    JNZ   0x2779
(0294) 			power_on_bat = 1;
    2773: 56 01 01 MOV   [X+1],0x1
(0295) 			status = DEVICE_BAD_BAT;
    2776: 56 00 10 MOV   [X+0],0x10
(0296) 		}
(0297) 		//// Remove the response from the RX Buffer
(0298) 		if (PS2RxBufIn) PS2RxBufIn--; else PS2RxBufIn = 15;
    2779: 62 D0 00 MOV   REG[0xD0],0x0
    277C: 3C 72 00 CMP   [PS2RxBufIn],0x0
    277F: A0 05    JZ    0x2785
    2781: 7A 72    DEC   [PS2RxBufIn]
    2783: 80 07    JMP   0x278B
    2785: 62 D0 00 MOV   REG[0xD0],0x0
    2788: 55 72 0F MOV   [PS2RxBufIn],0xF
(0299) 	}
(0300) 	//// If we didn't get a BAT code, got a response that is not a BAT code, or
(0301) 	//// we got a frame with an error status, send the device a RESET command.
(0302) 	if (!power_on_bat) {
    278B: 3D 01 00 CMP   [X+1],0x0
    278E: B0 9B    JNZ   0x282A
(0303) 		status = PS2_Send_Command_Process_Response(0xFF); // Send RESET
    2790: 50 FF    MOV   A,0xFF
    2792: 08       PUSH  A
    2793: 9E 72    CALL  _PS2_Send_Command_Process_Response
    2795: 38 FF    ADD   SP,0xFF
    2797: 62 D0 00 MOV   REG[0xD0],0x0
    279A: 54 00    MOV   [X+0],A
(0304) 		//// If we get an error, exit and return the error type
(0305) 		if (status) {
    279C: 3D 00 00 CMP   [X+0],0x0
    279F: A0 05    JZ    0x27A5
(0306) 			return(status);
    27A1: 52 00    MOV   A,[X+0]
    27A3: 80 FC    JMP   0x28A0
(0307) 		}
(0308) 		//// Spin until we either get a change in frame status in response to
(0309) 		//// the RESET/ACK, or 1000ms has elapsed, whichever comes first.
(0310) 		TenMicroSecTimerReps = 2;
    27A5: 62 D0 00 MOV   REG[0xD0],0x0
    27A8: 55 65 02 MOV   [TenMicroSecTimerReps],0x2
(0311) 		TenMicroSecTimer_WritePeriod(49999); // 2*((49999+1) * 10us) = 1000ms
    27AB: 10       PUSH  X
    27AC: 57 C3    MOV   X,0xC3
    27AE: 50 4F    MOV   A,0x4F
    27B0: 7C 09 80 LCALL _TenMicroSecTimer_WritePeriod
(0312) 		TenMicroSecTimer_Start();
    27B3: 7C 09 78 LCALL _TenMicroSecTimer_Start
    27B6: 20       POP   X
(0313) 		while(TenMicroSecTimerReps&&(!PS2FrameStatus));
    27B7: 62 D0 00 MOV   REG[0xD0],0x0
    27BA: 3C 65 00 CMP   [TenMicroSecTimerReps],0x0
    27BD: A0 09    JZ    0x27C7
    27BF: 62 D0 00 MOV   REG[0xD0],0x0
    27C2: 3C 62 00 CMP   [PS2FrameStatus],0x0
    27C5: AF F1    JZ    0x27B7
(0314) 		TenMicroSecTimer_Stop();
    27C7: 10       PUSH  X
    27C8: 7C 09 7C LCALL _TenMicroSecTimer_Stop
    27CB: 20       POP   X
(0315) 		//// If we got a response, determine BAT type
(0316) 		if (PS2FrameStatus & FRAME_DATA_AVAILABLE) {
    27CC: 62 D0 00 MOV   REG[0xD0],0x0
    27CF: 47 62 01 TST   [PS2FrameStatus],0x1
    27D2: A0 4A    JZ    0x281D
(0317) 			PS2FrameStatus = 0x00; // Clear PS2FrameStatus
    27D4: 55 62 00 MOV   [PS2FrameStatus],0x0
(0318) 			if (PS2DataIn == 0xAA) { // Good BAT
    27D7: 62 D0 00 MOV   REG[0xD0],0x0
    27DA: 3C 78 AA CMP   [ps2.c:PS2DataIn],0xAA
    27DD: B0 06    JNZ   0x27E4
(0319) 				status = 0;
    27DF: 56 00 00 MOV   [X+0],0x0
(0320) 			}
    27E2: 80 26    JMP   0x2809
(0321) 			else if (PS2DataIn == 0xFC) { // Bad BAT
    27E4: 62 D0 00 MOV   REG[0xD0],0x0
    27E7: 3C 78 FC CMP   [ps2.c:PS2DataIn],0xFC
    27EA: B0 06    JNZ   0x27F1
(0322) 				status = DEVICE_BAD_BAT;
    27EC: 56 00 10 MOV   [X+0],0x10
(0323) 			}
    27EF: 80 19    JMP   0x2809
(0324) 			else { // Error: Not a BAT code
(0325) 				LCD_Position(0,12);
    27F1: 10       PUSH  X
    27F2: 57 0C    MOV   X,0xC
    27F4: 50 00    MOV   A,0x0
    27F6: 7C 0C D7 LCALL _LCD_Position
(0326) 				LCD_PrHexByte(PS2DataIn);
    27F9: 62 D0 00 MOV   REG[0xD0],0x0
    27FC: 51 78    MOV   A,[ps2.c:PS2DataIn]
    27FE: 7C 0B 74 LCALL _LCD_PrHexByte
    2801: 20       POP   X
(0327) 				return(DEVICE_INVALID_RESPONSE);
    2802: 62 D0 00 MOV   REG[0xD0],0x0
    2805: 50 20    MOV   A,0x20
    2807: 80 98    JMP   0x28A0
(0328) 			}
(0329) 			//// Remove the response from the RX Buffer
(0330) 			if (PS2RxBufIn) PS2RxBufIn--; else PS2RxBufIn = 15;
    2809: 62 D0 00 MOV   REG[0xD0],0x0
    280C: 3C 72 00 CMP   [PS2RxBufIn],0x0
    280F: A0 05    JZ    0x2815
    2811: 7A 72    DEC   [PS2RxBufIn]
    2813: 80 16    JMP   0x282A
    2815: 62 D0 00 MOV   REG[0xD0],0x0
    2818: 55 72 0F MOV   [PS2RxBufIn],0xF
(0331) 		}
    281B: 80 0E    JMP   0x282A
(0332) 		//// If we either didn't receive a BAT code or had any frame error,
(0333) 		//// return a DEVICE_ERROR to the calling function; it can try again.
(0334) 		else {
(0335) 			PS2FrameStatus = 0x00; // Clear PS2FrameStatus
    281D: 62 D0 00 MOV   REG[0xD0],0x0
    2820: 55 62 00 MOV   [PS2FrameStatus],0x0
(0336) 			return(DEVICE_ERROR);
    2823: 62 D0 00 MOV   REG[0xD0],0x0
    2826: 50 40    MOV   A,0x40
    2828: 80 77    JMP   0x28A0
(0337) 		}
(0338) 	}
(0339) 	//// A mouse will send a Mouse ID of 0x00 after the BAT completion code.
(0340) 	//// We assume this should take no more than 20ms; same as an RX timeout.
(0341) 	TenMicroSecTimerReps = 1;
    282A: 62 D0 00 MOV   REG[0xD0],0x0
    282D: 55 65 01 MOV   [TenMicroSecTimerReps],0x1
(0342) 	TenMicroSecTimer_WritePeriod(1999); // (1999+1) * 10us = 20ms
    2830: 10       PUSH  X
    2831: 57 07    MOV   X,0x7
    2833: 50 CF    MOV   A,0xCF
    2835: 7C 09 80 LCALL _TenMicroSecTimer_WritePeriod
(0343) 	TenMicroSecTimer_Start();
    2838: 7C 09 78 LCALL _TenMicroSecTimer_Start
    283B: 20       POP   X
(0344) 	while(TenMicroSecTimerReps&&(!PS2FrameStatus));
    283C: 62 D0 00 MOV   REG[0xD0],0x0
    283F: 3C 65 00 CMP   [TenMicroSecTimerReps],0x0
    2842: A0 09    JZ    0x284C
    2844: 62 D0 00 MOV   REG[0xD0],0x0
    2847: 3C 62 00 CMP   [PS2FrameStatus],0x0
    284A: AF F1    JZ    0x283C
(0345) 	TenMicroSecTimer_Stop();
    284C: 10       PUSH  X
    284D: 7C 09 7C LCALL _TenMicroSecTimer_Stop
    2850: 20       POP   X
(0346) 	if (!PS2FrameStatus) {
    2851: 62 D0 00 MOV   REG[0xD0],0x0
    2854: 3C 62 00 CMP   [PS2FrameStatus],0x0
    2857: B0 08    JNZ   0x2860
(0347) 		//// If we didn't receive an additional byte within 20ms after
(0348) 		//// the BAT code, assume the device is a keyboard
(0349) 		return(status);
    2859: 52 00    MOV   A,[X+0]
    285B: 62 D0 00 MOV   REG[0xD0],0x0
    285E: 80 41    JMP   0x28A0
(0350) 	}
(0351) 	if (PS2FrameStatus & FRAME_DATA_AVAILABLE) {
    2860: 62 D0 00 MOV   REG[0xD0],0x0
    2863: 47 62 01 TST   [PS2FrameStatus],0x1
    2866: A0 2E    JZ    0x2895
(0352) 		PS2FrameStatus = 0x00; // Clear PS2FrameStatus
    2868: 55 62 00 MOV   [PS2FrameStatus],0x0
(0353) 		//// Remove the response from the RX Buffer
(0354) 		if (PS2RxBufIn) PS2RxBufIn--; else PS2RxBufIn = 15;
    286B: 62 D0 00 MOV   REG[0xD0],0x0
    286E: 3C 72 00 CMP   [PS2RxBufIn],0x0
    2871: A0 05    JZ    0x2877
    2873: 7A 72    DEC   [PS2RxBufIn]
    2875: 80 07    JMP   0x287D
    2877: 62 D0 00 MOV   REG[0xD0],0x0
    287A: 55 72 0F MOV   [PS2RxBufIn],0xF
(0355) 		//// If we got a byte and it is 0x00, the device is a mouse
(0356) 		if (PS2DataIn == 0x00) {
    287D: 62 D0 00 MOV   REG[0xD0],0x0
    2880: 3C 78 00 CMP   [ps2.c:PS2DataIn],0x0
    2883: B0 0A    JNZ   0x288E
(0357) 			return(status|DEVICE_IS_MOUSE);
    2885: 62 D0 00 MOV   REG[0xD0],0x0
    2888: 52 00    MOV   A,[X+0]
    288A: 29 80    OR    A,0x80
    288C: 80 13    JMP   0x28A0
(0358) 		}
(0359) 		//// If it isn't 0x00, the response isn't valid
(0360) 		return(DEVICE_INVALID_RESPONSE);
    288E: 62 D0 00 MOV   REG[0xD0],0x0
    2891: 50 20    MOV   A,0x20
    2893: 80 0C    JMP   0x28A0
(0361) 	}
(0362) 	//// If we had any frame error in the response, return a DEVICE_ERROR
(0363) 	//// to the calling function; it can try again.
(0364) 	PS2FrameStatus = 0x00; // Clear PS2FrameStatus
    2895: 62 D0 00 MOV   REG[0xD0],0x0
    2898: 55 62 00 MOV   [PS2FrameStatus],0x0
(0365) 	return(DEVICE_ERROR);
    289B: 62 D0 00 MOV   REG[0xD0],0x0
    289E: 50 40    MOV   A,0x40
    28A0: 38 FE    ADD   SP,0xFE
    28A2: 20       POP   X
    28A3: 7F       RET   
(0366) }
(0367) 
(0368) //////////////////////////////////////////////////////////////////////////////////////////
(0369) //////////////////////////////////////////////////////////////////////////////////////////
(0370) //// Interrupt Service Routines (ISRs) follow
(0371) //////////////////////////////////////////////////////////////////////////////////////////
(0372) //////////////////////////////////////////////////////////////////////////////////////////
(0373) 
(0374) #pragma interrupt_handler PS2DigBuf_ISR PS2OneShot_ISR TenMicroSecTimer_ISR
(0375) 
(0376) //----------------------------------------------------------------------------------------
(0377) // PS/2 Clock ISR
(0378) //
(0379) // A primary objective in writing this PS/2 bit-banging interface was to make it as general
(0380) // as possible so that it could be incorporated into many different designs that could benefit
(0381) // from a keyboard (or mouse, for that matter).
(0382) //
(0383) // The PS/2 protocol says that the data line is valid on the falling-edge of the clock signal.
(0384) // While using a falling-edge GPIO interrupt would certainly work, the GPIO ISR would have
(0385) // to be shared by any other GPIO interrupts and would require the ISR to determine which
(0386) // pin it was supposed to be handling (e.g. optical encoder interrupt or keyboard interrupt).
(0387) //
(0388) // By passing the PS/2 Clock line into Input 1 of a DigBuf User Module (named PS2DigBuf here),
(0389) // and by setting the InvertInput1 parameter to Invert, the DigBuf User Module will call a
(0390) // unique ISR whenever the PS/2 clock falling-edge occurs. Inside the ISR, we use a simple
(0391) // port pin read operation to get the value of the data line when this occurs.
(0392) //
(0393) // A simple state machine can verify a valid frame is present, extract the data therein,
(0394) // confirm parity is matched, and finally set a global variable indicating a scan code
(0395) // was received.
(0396) //
(0397) // XXX - Update these comments to discuss how this ISR is also used to transmit data.
(0398) //
(0399) // Global variables used:
(0400) //   PS2FrameState - 
(0401) //   PS2DataIn      - where this ISR places a reassembled scan code
(0402) //   PS2GotFrame   - set to 1 in this ISR when a valid PS2 frame is found
(0403) //                   set to 0 by other functions in the program after PS2DataIn is processed
(0404) //----------------------------------------------------------------------------------------
(0405) void PS2DigBuf_ISR(void)
(0406) {
_PS2DigBuf_ISR:
    28A4: 71 C0    OR    F,0xC0
    28A6: 08       PUSH  A
    28A7: 5D D0    MOV   A,REG[0xD0]
    28A9: 08       PUSH  A
    28AA: 5D D3    MOV   A,REG[0xD3]
    28AC: 08       PUSH  A
    28AD: 5D D4    MOV   A,REG[0xD4]
    28AF: 08       PUSH  A
    28B0: 5D D5    MOV   A,REG[0xD5]
    28B2: 08       PUSH  A
    28B3: 62 D0 00 MOV   REG[0xD0],0x0
    28B6: 51 22    MOV   A,[__r0]
    28B8: 08       PUSH  A
    28B9: 51 21    MOV   A,[__r1]
    28BB: 08       PUSH  A
    28BC: 51 20    MOV   A,[__r2]
    28BE: 08       PUSH  A
    28BF: 51 1F    MOV   A,[__r3]
    28C1: 08       PUSH  A
    28C2: 51 1E    MOV   A,[__r4]
    28C4: 08       PUSH  A
    28C5: 51 1D    MOV   A,[__r5]
    28C7: 08       PUSH  A
    28C8: 51 1C    MOV   A,[__r6]
    28CA: 08       PUSH  A
    28CB: 51 1B    MOV   A,[__r7]
    28CD: 08       PUSH  A
    28CE: 51 1A    MOV   A,[__r8]
    28D0: 08       PUSH  A
    28D1: 51 19    MOV   A,[__r9]
    28D3: 08       PUSH  A
    28D4: 51 18    MOV   A,[__r10]
    28D6: 08       PUSH  A
    28D7: 51 17    MOV   A,[__r11]
    28D9: 08       PUSH  A
    28DA: 51 16    MOV   A,[__rX]
    28DC: 08       PUSH  A
    28DD: 51 15    MOV   A,[__rY]
    28DF: 08       PUSH  A
    28E0: 51 14    MOV   A,[__rZ]
    28E2: 08       PUSH  A
    28E3: 10       PUSH  X
    28E4: 4F       MOV   X,SP
    28E5: 38 02    ADD   SP,0x2
(0407) 	static BYTE data;	// Note: declaring a variable as static in a function causes the
(0408) 	static BYTE bit;	// compiler to keep it in RAM and not the stack. This means it
(0409) 	static BYTE parity;	// retains its value between calls to the function.
(0410) 
(0411) 	//// Read the PS/2 Data bit every time we enter this ISR
(0412) 	if (PS2DATA_Data_ADDR & PS2DATA_MASK)
    28E7: 5D 04    MOV   A,REG[0x4]
    28E9: 62 D0 00 MOV   REG[0xD0],0x0
    28EC: 53 22    MOV   [__r0],A
    28EE: 47 22 10 TST   [__r0],0x10
    28F1: A0 09    JZ    0x28FB
(0413) 		bit = 0x01;
    28F3: 62 D0 00 MOV   REG[0xD0],0x0
    28F6: 55 7D 01 MOV   [ps2.c:XXXForceBadTxParity+2],0x1
    28F9: 80 07    JMP   0x2901
(0414) 	else
(0415) 		bit = 0x00;
    28FB: 62 D0 00 MOV   REG[0xD0],0x0
    28FE: 55 7D 00 MOV   [ps2.c:XXXForceBadTxParity+2],0x0
(0416) 	//// Step through the state machine to decode the frame
(0417) 	switch (PS2FrameState) {
    2901: 62 D0 00 MOV   REG[0xD0],0x0
    2904: 51 77    MOV   A,[ps2.c:PS2FrameState]
    2906: 54 01    MOV   [X+1],A
    2908: 56 00 00 MOV   [X+0],0x0
    290B: 52 01    MOV   A,[X+1]
    290D: 11 00    SUB   A,0x0
    290F: 52 00    MOV   A,[X+0]
    2911: 31 80    XOR   A,0x80
    2913: 19 80    SBB   A,0x80
    2915: C4 0C    JC    0x2D22
    2917: 50 16    MOV   A,0x16
    2919: 13 01    SUB   A,[X+1]
    291B: 52 00    MOV   A,[X+0]
    291D: 31 80    XOR   A,0x80
    291F: 62 D0 00 MOV   REG[0xD0],0x0
    2922: 53 16    MOV   [__rX],A
    2924: 50 80    MOV   A,0x80
    2926: 1A 16    SBB   A,[__rX]
    2928: C3 F9    JC    0x2D22
    292A: 62 D0 00 MOV   REG[0xD0],0x0
    292D: 52 01    MOV   A,[X+1]
    292F: 53 21    MOV   [__r1],A
    2931: 52 00    MOV   A,[X+0]
    2933: 53 22    MOV   [__r0],A
    2935: 65 21    ASL   [__r1]
    2937: 6B 22    RLC   [__r0]
    2939: 06 21 1C ADD   [__r1],0x1C
    293C: 0E 22 06 ADC   [__r0],0x6
    293F: 51 22    MOV   A,[__r0]
    2941: 10       PUSH  X
    2942: 58 21    MOV   X,[__r1]
    2944: 08       PUSH  A
    2945: 28       ROMX  
    2946: 53 22    MOV   [__r0],A
    2948: 18       POP   A
    2949: 75       INC   X
    294A: 09 00    ADC   A,0x0
    294C: 28       ROMX  
    294D: 53 21    MOV   [__r1],A
    294F: 20       POP   X
    2950: 51 22    MOV   A,[__r0]
    2952: 08       PUSH  A
    2953: 51 21    MOV   A,[__r1]
    2955: 08       PUSH  A
    2956: 7F       RET   
(0418) 	case PS2_START_BIT_IN: // Start of PS/2 frame
(0419) 		// Reset the frame status
(0420) 		PS2FrameStatus = 0x00;
    2957: 62 D0 00 MOV   REG[0xD0],0x0
    295A: 55 62 00 MOV   [PS2FrameStatus],0x0
(0421) 		// Clear the frame data reassembly byte
(0422) 		data = 0;
    295D: 62 D0 00 MOV   REG[0xD0],0x0
    2960: 55 7C 00 MOV   [ps2.c:XXXForceBadTxParity+1],0x0
(0423) 		//// If this bit is 0, assume this is the Start bit of the frame and go to the state 1
(0424) 		if (bit == 0) {
    2963: 62 D0 00 MOV   REG[0xD0],0x0
    2966: 3C 7D 00 CMP   [ps2.c:XXXForceBadTxParity+2],0x0
    2969: B3 B8    JNZ   0x2D22
(0425) 			// Reset our computed parity to 1
(0426) 			parity = 1;
    296B: 62 D0 00 MOV   REG[0xD0],0x0
    296E: 55 63 01 MOV   [PS2FrameStatus+1],0x1
(0427) 			// Enable interrupts on the OneShot so that if we don't get enough
(0428) 			// clock transistions for a valid frame, the OneShot will reset
(0429) 			// this state machine and report a FRAME_INCOMPLETE error.
(0430) 			PS2OneShot_ClearInt();
    2971: 10       PUSH  X
    2972: 7C 0B 3E LCALL _PS2OneShot_ClearInt
(0431) 			PS2OneShot_EnableInt();
    2975: 7C 0B 36 LCALL _PS2OneShot_EnableInt
    2978: 20       POP   X
(0432) 			// Look for the D0 bit.
(0433) 			PS2FrameState = PS2_D0_BIT_IN;
    2979: 62 D0 00 MOV   REG[0xD0],0x0
    297C: 55 77 01 MOV   [ps2.c:PS2FrameState],0x1
(0434) 		}
(0435) 		// If this bit is 1, it cannot be the Start bit so remain in this state.
(0436) 		// Treat it as a glitch and ignore it (don't even bother reporting it).
(0437) 		break;
    297F: 83 A2    JMP   0x2D22
(0438) 	case PS2_D0_BIT_IN: // Get D0
(0439) 		data|=bit; parity^=bit; PS2FrameState=PS2_D1_BIT_IN; break;
    2981: 62 D0 00 MOV   REG[0xD0],0x0
    2984: 51 7D    MOV   A,[ps2.c:XXXForceBadTxParity+2]
    2986: 62 D0 00 MOV   REG[0xD0],0x0
    2989: 2C 7C    OR    [ps2.c:XXXForceBadTxParity+1],A
    298B: 62 D0 00 MOV   REG[0xD0],0x0
    298E: 51 63    MOV   A,[PS2FrameStatus+1]
    2990: 62 D0 00 MOV   REG[0xD0],0x0
    2993: 32 7D    XOR   A,[ps2.c:XXXForceBadTxParity+2]
    2995: 62 D0 00 MOV   REG[0xD0],0x0
    2998: 53 63    MOV   [PS2FrameStatus+1],A
    299A: 62 D0 00 MOV   REG[0xD0],0x0
    299D: 55 77 02 MOV   [ps2.c:PS2FrameState],0x2
    29A0: 83 81    JMP   0x2D22
(0440) 	case PS2_D1_BIT_IN: // Get D1
(0441) 		data|=bit<<1; parity^=bit; PS2FrameState=PS2_D2_BIT_IN; break;
    29A2: 62 D0 00 MOV   REG[0xD0],0x0
    29A5: 51 7D    MOV   A,[ps2.c:XXXForceBadTxParity+2]
    29A7: 62 D0 00 MOV   REG[0xD0],0x0
    29AA: 53 22    MOV   [__r0],A
    29AC: 65 22    ASL   [__r0]
    29AE: 51 22    MOV   A,[__r0]
    29B0: 62 D0 00 MOV   REG[0xD0],0x0
    29B3: 2C 7C    OR    [ps2.c:XXXForceBadTxParity+1],A
    29B5: 62 D0 00 MOV   REG[0xD0],0x0
    29B8: 51 63    MOV   A,[PS2FrameStatus+1]
    29BA: 62 D0 00 MOV   REG[0xD0],0x0
    29BD: 32 7D    XOR   A,[ps2.c:XXXForceBadTxParity+2]
    29BF: 62 D0 00 MOV   REG[0xD0],0x0
    29C2: 53 63    MOV   [PS2FrameStatus+1],A
    29C4: 62 D0 00 MOV   REG[0xD0],0x0
    29C7: 55 77 03 MOV   [ps2.c:PS2FrameState],0x3
    29CA: 83 57    JMP   0x2D22
(0442) 	case PS2_D2_BIT_IN: // Get D2
(0443) 		data|=bit<<2; parity^=bit; PS2FrameState=PS2_D3_BIT_IN; break;
    29CC: 62 D0 00 MOV   REG[0xD0],0x0
    29CF: 51 7D    MOV   A,[ps2.c:XXXForceBadTxParity+2]
    29D1: 62 D0 00 MOV   REG[0xD0],0x0
    29D4: 53 22    MOV   [__r0],A
    29D6: 65 22    ASL   [__r0]
    29D8: 65 22    ASL   [__r0]
    29DA: 51 22    MOV   A,[__r0]
    29DC: 62 D0 00 MOV   REG[0xD0],0x0
    29DF: 2C 7C    OR    [ps2.c:XXXForceBadTxParity+1],A
    29E1: 62 D0 00 MOV   REG[0xD0],0x0
    29E4: 51 63    MOV   A,[PS2FrameStatus+1]
    29E6: 62 D0 00 MOV   REG[0xD0],0x0
    29E9: 32 7D    XOR   A,[ps2.c:XXXForceBadTxParity+2]
    29EB: 62 D0 00 MOV   REG[0xD0],0x0
    29EE: 53 63    MOV   [PS2FrameStatus+1],A
    29F0: 62 D0 00 MOV   REG[0xD0],0x0
    29F3: 55 77 04 MOV   [ps2.c:PS2FrameState],0x4
    29F6: 83 2B    JMP   0x2D22
(0444) 	case PS2_D3_BIT_IN: // Get D3
(0445) 		data|=bit<<3; parity^=bit; PS2FrameState=PS2_D4_BIT_IN; break;
    29F8: 62 D0 00 MOV   REG[0xD0],0x0
    29FB: 51 7D    MOV   A,[ps2.c:XXXForceBadTxParity+2]
    29FD: 64       ASL   A
    29FE: 64       ASL   A
    29FF: 64       ASL   A
    2A00: 62 D0 00 MOV   REG[0xD0],0x0
    2A03: 2C 7C    OR    [ps2.c:XXXForceBadTxParity+1],A
    2A05: 62 D0 00 MOV   REG[0xD0],0x0
    2A08: 51 63    MOV   A,[PS2FrameStatus+1]
    2A0A: 62 D0 00 MOV   REG[0xD0],0x0
    2A0D: 32 7D    XOR   A,[ps2.c:XXXForceBadTxParity+2]
    2A0F: 62 D0 00 MOV   REG[0xD0],0x0
    2A12: 53 63    MOV   [PS2FrameStatus+1],A
    2A14: 62 D0 00 MOV   REG[0xD0],0x0
    2A17: 55 77 05 MOV   [ps2.c:PS2FrameState],0x5
    2A1A: 83 07    JMP   0x2D22
(0446) 	case PS2_D4_BIT_IN: // Get D4
(0447) 		data|=bit<<4; parity^=bit; PS2FrameState=PS2_D5_BIT_IN; break;
    2A1C: 62 D0 00 MOV   REG[0xD0],0x0
    2A1F: 51 7D    MOV   A,[ps2.c:XXXForceBadTxParity+2]
    2A21: 64       ASL   A
    2A22: 64       ASL   A
    2A23: 64       ASL   A
    2A24: 64       ASL   A
    2A25: 62 D0 00 MOV   REG[0xD0],0x0
    2A28: 2C 7C    OR    [ps2.c:XXXForceBadTxParity+1],A
    2A2A: 62 D0 00 MOV   REG[0xD0],0x0
    2A2D: 51 63    MOV   A,[PS2FrameStatus+1]
    2A2F: 62 D0 00 MOV   REG[0xD0],0x0
    2A32: 32 7D    XOR   A,[ps2.c:XXXForceBadTxParity+2]
    2A34: 62 D0 00 MOV   REG[0xD0],0x0
    2A37: 53 63    MOV   [PS2FrameStatus+1],A
    2A39: 62 D0 00 MOV   REG[0xD0],0x0
    2A3C: 55 77 06 MOV   [ps2.c:PS2FrameState],0x6
    2A3F: 82 E2    JMP   0x2D22
(0448) 	case PS2_D5_BIT_IN: // Get D5
(0449) 		data|=bit<<5; parity^=bit; PS2FrameState=PS2_D6_BIT_IN; break;
    2A41: 62 D0 00 MOV   REG[0xD0],0x0
    2A44: 51 7D    MOV   A,[ps2.c:XXXForceBadTxParity+2]
    2A46: 64       ASL   A
    2A47: 64       ASL   A
    2A48: 64       ASL   A
    2A49: 64       ASL   A
    2A4A: 64       ASL   A
    2A4B: 62 D0 00 MOV   REG[0xD0],0x0
    2A4E: 2C 7C    OR    [ps2.c:XXXForceBadTxParity+1],A
    2A50: 62 D0 00 MOV   REG[0xD0],0x0
    2A53: 51 63    MOV   A,[PS2FrameStatus+1]
    2A55: 62 D0 00 MOV   REG[0xD0],0x0
    2A58: 32 7D    XOR   A,[ps2.c:XXXForceBadTxParity+2]
    2A5A: 62 D0 00 MOV   REG[0xD0],0x0
    2A5D: 53 63    MOV   [PS2FrameStatus+1],A
    2A5F: 62 D0 00 MOV   REG[0xD0],0x0
    2A62: 55 77 07 MOV   [ps2.c:PS2FrameState],0x7
    2A65: 82 BC    JMP   0x2D22
(0450) 	case PS2_D6_BIT_IN: // Get D6
(0451) 		data|=bit<<6; parity^=bit; PS2FrameState=PS2_D7_BIT_IN; break;
    2A67: 62 D0 00 MOV   REG[0xD0],0x0
    2A6A: 51 7D    MOV   A,[ps2.c:XXXForceBadTxParity+2]
    2A6C: 64       ASL   A
    2A6D: 64       ASL   A
    2A6E: 64       ASL   A
    2A6F: 64       ASL   A
    2A70: 64       ASL   A
    2A71: 64       ASL   A
    2A72: 62 D0 00 MOV   REG[0xD0],0x0
    2A75: 2C 7C    OR    [ps2.c:XXXForceBadTxParity+1],A
    2A77: 62 D0 00 MOV   REG[0xD0],0x0
    2A7A: 51 63    MOV   A,[PS2FrameStatus+1]
    2A7C: 62 D0 00 MOV   REG[0xD0],0x0
    2A7F: 32 7D    XOR   A,[ps2.c:XXXForceBadTxParity+2]
    2A81: 62 D0 00 MOV   REG[0xD0],0x0
    2A84: 53 63    MOV   [PS2FrameStatus+1],A
    2A86: 62 D0 00 MOV   REG[0xD0],0x0
    2A89: 55 77 08 MOV   [ps2.c:PS2FrameState],0x8
    2A8C: 82 95    JMP   0x2D22
(0452) 	case PS2_D7_BIT_IN: // Get D7
(0453) 		data|=bit<<7; parity^=bit; PS2FrameState=PS2_PARITY_BIT_IN; break;
    2A8E: 62 D0 00 MOV   REG[0xD0],0x0
    2A91: 51 7D    MOV   A,[ps2.c:XXXForceBadTxParity+2]
    2A93: 64       ASL   A
    2A94: 64       ASL   A
    2A95: 64       ASL   A
    2A96: 64       ASL   A
    2A97: 64       ASL   A
    2A98: 64       ASL   A
    2A99: 64       ASL   A
    2A9A: 62 D0 00 MOV   REG[0xD0],0x0
    2A9D: 2C 7C    OR    [ps2.c:XXXForceBadTxParity+1],A
    2A9F: 62 D0 00 MOV   REG[0xD0],0x0
    2AA2: 51 63    MOV   A,[PS2FrameStatus+1]
    2AA4: 62 D0 00 MOV   REG[0xD0],0x0
    2AA7: 32 7D    XOR   A,[ps2.c:XXXForceBadTxParity+2]
    2AA9: 62 D0 00 MOV   REG[0xD0],0x0
    2AAC: 53 63    MOV   [PS2FrameStatus+1],A
    2AAE: 62 D0 00 MOV   REG[0xD0],0x0
    2AB1: 55 77 09 MOV   [ps2.c:PS2FrameState],0x9
    2AB4: 82 6D    JMP   0x2D22
(0454) 	case PS2_PARITY_BIT_IN: // Get parity. ODD:parity=0, EVEN:parity=1
(0455) 		parity^=bit; PS2FrameState=PS2_STOP_BIT_IN; break;
    2AB6: 62 D0 00 MOV   REG[0xD0],0x0
    2AB9: 51 63    MOV   A,[PS2FrameStatus+1]
    2ABB: 62 D0 00 MOV   REG[0xD0],0x0
    2ABE: 32 7D    XOR   A,[ps2.c:XXXForceBadTxParity+2]
    2AC0: 62 D0 00 MOV   REG[0xD0],0x0
    2AC3: 53 63    MOV   [PS2FrameStatus+1],A
    2AC5: 62 D0 00 MOV   REG[0xD0],0x0
    2AC8: 55 77 0A MOV   [ps2.c:PS2FrameState],0xA
    2ACB: 82 56    JMP   0x2D22
(0456) //		//// XXX - Force a bad receive parity bit periodically for testing.
(0457) //		if (XXXForceBadRxParity++ > 3) { // bad parity every N+1 transmissions
(0458) //			XXXForceBadRxParity = 0;
(0459) //			parity = 1;
(0460) //		}
(0461) //		PS2FrameState=PS2_STOP_BIT_IN;
(0462) //		break;
(0463) 	case PS2_STOP_BIT_IN: // Check the Stop bit
(0464) 		//// If Stop bit is 0, this is a framing error
(0465) 		//// Note: A frame error overrides a parity error
(0466) 		//// XXX - Unresolved issue: If the Stop bit is wrong, did we really
(0467) 		////       get a complete frame? Until I learn more, I'm going to
(0468) 		////       report we've had an RX framing error.
(0469) 		////       Should the application request a retransmission if it
(0470) 		////       get's a frame error? I don't know.
(0471) 		if (bit == 0) {
    2ACD: 62 D0 00 MOV   REG[0xD0],0x0
    2AD0: 3C 7D 00 CMP   [ps2.c:XXXForceBadTxParity+2],0x0
    2AD3: B0 09    JNZ   0x2ADD
(0472) 			PS2FrameStatus = FRAME_RX_FRAME_ERROR;
    2AD5: 62 D0 00 MOV   REG[0xD0],0x0
    2AD8: 55 62 08 MOV   [PS2FrameStatus],0x8
(0473) 		}
    2ADB: 80 4F    JMP   0x2B2B
(0474) 		else {
(0475) 			//// The Stop bit is 1, so the frame is valid. Check the parity.
(0476) 			if (parity) {
    2ADD: 62 D0 00 MOV   REG[0xD0],0x0
    2AE0: 3C 63 00 CMP   [PS2FrameStatus+1],0x0
    2AE3: A0 09    JZ    0x2AED
(0477) 				PS2FrameStatus = FRAME_RX_PARITY_ERROR;
    2AE5: 62 D0 00 MOV   REG[0xD0],0x0
    2AE8: 55 62 04 MOV   [PS2FrameStatus],0x4
(0478) 			}
    2AEB: 80 3F    JMP   0x2B2B
(0479) 			else {
(0480) 				PS2DataIn = data;
    2AED: 62 D0 00 MOV   REG[0xD0],0x0
    2AF0: 51 7C    MOV   A,[ps2.c:XXXForceBadTxParity+1]
    2AF2: 62 D0 00 MOV   REG[0xD0],0x0
    2AF5: 53 78    MOV   [ps2.c:PS2DataIn],A
(0481) 				PS2FrameStatus = FRAME_DATA_AVAILABLE;
    2AF7: 62 D0 00 MOV   REG[0xD0],0x0
    2AFA: 55 62 01 MOV   [PS2FrameStatus],0x1
(0482) 				PS2RxBuffer[PS2RxBufIn] = data;
    2AFD: 62 D0 00 MOV   REG[0xD0],0x0
    2B00: 51 72    MOV   A,[PS2RxBufIn]
    2B02: 62 D0 00 MOV   REG[0xD0],0x0
    2B05: 53 21    MOV   [__r1],A
    2B07: 55 22 00 MOV   [__r0],0x0
    2B0A: 06 21 04 ADD   [__r1],0x4
    2B0D: 0E 22 00 ADC   [__r0],0x0
    2B10: 51 22    MOV   A,[__r0]
    2B12: 60 D5    MOV   REG[0xD5],A
    2B14: 62 D0 00 MOV   REG[0xD0],0x0
    2B17: 51 7C    MOV   A,[ps2.c:XXXForceBadTxParity+1]
    2B19: 62 D0 00 MOV   REG[0xD0],0x0
    2B1C: 3F 21    MVI   [__r1],A
(0483) 				PS2RxBufIn++;
    2B1E: 62 D0 00 MOV   REG[0xD0],0x0
    2B21: 76 72    INC   [PS2RxBufIn]
(0484) 				// Wrap around the circular buffer pointer at 16
(0485) 				if (PS2RxBufIn & 0x10) PS2RxBufIn = 0;
    2B23: 47 72 10 TST   [PS2RxBufIn],0x10
    2B26: A0 04    JZ    0x2B2B
    2B28: 55 72 00 MOV   [PS2RxBufIn],0x0
(0486) 			}
(0487) 		}
(0488) 		//// We got a complete frame so reset the state and disable PS2OneShot.
(0489) 		PS2FrameState = PS2_START_BIT_IN;
    2B2B: 62 D0 00 MOV   REG[0xD0],0x0
    2B2E: 55 77 00 MOV   [ps2.c:PS2FrameState],0x0
(0490) 		PS2OneShot_DisableInt();
    2B31: 10       PUSH  X
    2B32: 7C 0B 3A LCALL _PS2OneShot_DisableInt
    2B35: 20       POP   X
(0491) 		break;
    2B36: 81 EB    JMP   0x2D22
(0492) 	///////////////////////////////////////////////////////////////////////////
(0493) 	//////// States used to send data to keyboard
(0494) 	///////////////////////////////////////////////////////////////////////////
(0495) 	case PS2_TRANSMIT_BEGIN:
(0496) 		// Reset the frame status
(0497) 		PS2FrameStatus = 0x00;
    2B38: 62 D0 00 MOV   REG[0xD0],0x0
    2B3B: 55 62 00 MOV   [PS2FrameStatus],0x0
(0498) 		PS2FrameState=PS2_D0_BIT_OUT;
    2B3E: 62 D0 00 MOV   REG[0xD0],0x0
    2B41: 55 77 0C MOV   [ps2.c:PS2FrameState],0xC
(0499) 		break;
    2B44: 81 DD    JMP   0x2D22
(0500) 	case PS2_D0_BIT_OUT:
(0501) 		// Send the D0 bit and initialize parity
(0502) 		if (PS2DataOut&0x01) { parity = 0; PS2DATA_HIGH; }
    2B46: 62 D0 00 MOV   REG[0xD0],0x0
    2B49: 47 79 01 TST   [ps2.c:PS2DataOut],0x1
    2B4C: A0 13    JZ    0x2B60
    2B4E: 62 D0 00 MOV   REG[0xD0],0x0
    2B51: 55 63 00 MOV   [PS2FrameStatus+1],0x0
    2B54: 62 D0 00 MOV   REG[0xD0],0x0
    2B57: 2E 00 10 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2B5A: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2B5C: 60 04    MOV   REG[0x4],A
    2B5E: 80 11    JMP   0x2B70
(0503) 		else { parity = 1; PS2DATA_LOW; }
    2B60: 62 D0 00 MOV   REG[0xD0],0x0
    2B63: 55 63 01 MOV   [PS2FrameStatus+1],0x1
    2B66: 62 D0 00 MOV   REG[0xD0],0x0
    2B69: 26 00 EF AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2B6C: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2B6E: 60 04    MOV   REG[0x4],A
(0504) 		// Enable interrupts on the OneShot so that if we don't get enough
(0505) 		// clock transistions for a valid frame, the OneShot will reset
(0506) 		// this state machine and report a FRAME_INCOMPLETE error.
(0507) 		PS2OneShot_ClearInt();
    2B70: 10       PUSH  X
    2B71: 7C 0B 3E LCALL _PS2OneShot_ClearInt
(0508) 		PS2OneShot_EnableInt();
    2B74: 7C 0B 36 LCALL _PS2OneShot_EnableInt
    2B77: 20       POP   X
(0509) 		PS2FrameState=PS2_D1_BIT_OUT;
    2B78: 62 D0 00 MOV   REG[0xD0],0x0
    2B7B: 55 77 0D MOV   [ps2.c:PS2FrameState],0xD
(0510) 		break;
    2B7E: 81 A3    JMP   0x2D22
(0511) 	case PS2_D1_BIT_OUT:
(0512) 		if (PS2DataOut&0x02) { parity ^= 0x01; PS2DATA_HIGH; }
    2B80: 62 D0 00 MOV   REG[0xD0],0x0
    2B83: 47 79 02 TST   [ps2.c:PS2DataOut],0x2
    2B86: A0 16    JZ    0x2B9D
    2B88: 62 D0 00 MOV   REG[0xD0],0x0
    2B8B: 51 63    MOV   A,[PS2FrameStatus+1]
    2B8D: 31 01    XOR   A,0x1
    2B8F: 53 63    MOV   [PS2FrameStatus+1],A
    2B91: 62 D0 00 MOV   REG[0xD0],0x0
    2B94: 2E 00 10 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2B97: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2B99: 60 04    MOV   REG[0x4],A
    2B9B: 80 0B    JMP   0x2BA7
(0513) 		else { PS2DATA_LOW; }
    2B9D: 62 D0 00 MOV   REG[0xD0],0x0
    2BA0: 26 00 EF AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2BA3: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2BA5: 60 04    MOV   REG[0x4],A
(0514) 		PS2FrameState=PS2_D2_BIT_OUT;
    2BA7: 62 D0 00 MOV   REG[0xD0],0x0
    2BAA: 55 77 0E MOV   [ps2.c:PS2FrameState],0xE
(0515) 		break;
    2BAD: 81 74    JMP   0x2D22
(0516) 	case PS2_D2_BIT_OUT:
(0517) 		if (PS2DataOut&0x04) { parity ^= 0x01; PS2DATA_HIGH; }
    2BAF: 62 D0 00 MOV   REG[0xD0],0x0
    2BB2: 47 79 04 TST   [ps2.c:PS2DataOut],0x4
    2BB5: A0 16    JZ    0x2BCC
    2BB7: 62 D0 00 MOV   REG[0xD0],0x0
    2BBA: 51 63    MOV   A,[PS2FrameStatus+1]
    2BBC: 31 01    XOR   A,0x1
    2BBE: 53 63    MOV   [PS2FrameStatus+1],A
    2BC0: 62 D0 00 MOV   REG[0xD0],0x0
    2BC3: 2E 00 10 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2BC6: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2BC8: 60 04    MOV   REG[0x4],A
    2BCA: 80 0B    JMP   0x2BD6
(0518) 		else { PS2DATA_LOW;	}
    2BCC: 62 D0 00 MOV   REG[0xD0],0x0
    2BCF: 26 00 EF AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2BD2: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2BD4: 60 04    MOV   REG[0x4],A
(0519) 		PS2FrameState=PS2_D3_BIT_OUT;
    2BD6: 62 D0 00 MOV   REG[0xD0],0x0
    2BD9: 55 77 0F MOV   [ps2.c:PS2FrameState],0xF
(0520) 		break;
    2BDC: 81 45    JMP   0x2D22
(0521) 	case PS2_D3_BIT_OUT:
(0522) 		if (PS2DataOut&0x08) { parity ^= 0x01; PS2DATA_HIGH; }
    2BDE: 62 D0 00 MOV   REG[0xD0],0x0
    2BE1: 47 79 08 TST   [ps2.c:PS2DataOut],0x8
    2BE4: A0 16    JZ    0x2BFB
    2BE6: 62 D0 00 MOV   REG[0xD0],0x0
    2BE9: 51 63    MOV   A,[PS2FrameStatus+1]
    2BEB: 31 01    XOR   A,0x1
    2BED: 53 63    MOV   [PS2FrameStatus+1],A
    2BEF: 62 D0 00 MOV   REG[0xD0],0x0
    2BF2: 2E 00 10 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2BF5: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2BF7: 60 04    MOV   REG[0x4],A
    2BF9: 80 0B    JMP   0x2C05
(0523) 		else { PS2DATA_LOW; }
    2BFB: 62 D0 00 MOV   REG[0xD0],0x0
    2BFE: 26 00 EF AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2C01: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2C03: 60 04    MOV   REG[0x4],A
(0524) 		PS2FrameState=PS2_D4_BIT_OUT;
    2C05: 62 D0 00 MOV   REG[0xD0],0x0
    2C08: 55 77 10 MOV   [ps2.c:PS2FrameState],0x10
(0525) 		break;
    2C0B: 81 16    JMP   0x2D22
(0526) 	case PS2_D4_BIT_OUT:
(0527) 		if (PS2DataOut&0x10) { parity ^= 0x01; PS2DATA_HIGH; }
    2C0D: 62 D0 00 MOV   REG[0xD0],0x0
    2C10: 47 79 10 TST   [ps2.c:PS2DataOut],0x10
    2C13: A0 16    JZ    0x2C2A
    2C15: 62 D0 00 MOV   REG[0xD0],0x0
    2C18: 51 63    MOV   A,[PS2FrameStatus+1]
    2C1A: 31 01    XOR   A,0x1
    2C1C: 53 63    MOV   [PS2FrameStatus+1],A
    2C1E: 62 D0 00 MOV   REG[0xD0],0x0
    2C21: 2E 00 10 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2C24: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2C26: 60 04    MOV   REG[0x4],A
    2C28: 80 0B    JMP   0x2C34
(0528) 		else { PS2DATA_LOW; }
    2C2A: 62 D0 00 MOV   REG[0xD0],0x0
    2C2D: 26 00 EF AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2C30: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2C32: 60 04    MOV   REG[0x4],A
(0529) 		PS2FrameState=PS2_D5_BIT_OUT;
    2C34: 62 D0 00 MOV   REG[0xD0],0x0
    2C37: 55 77 11 MOV   [ps2.c:PS2FrameState],0x11
(0530) 		break;
    2C3A: 80 E7    JMP   0x2D22
(0531) 	case PS2_D5_BIT_OUT:
(0532) 		if (PS2DataOut&0x20) { parity ^= 0x01; PS2DATA_HIGH; }
    2C3C: 62 D0 00 MOV   REG[0xD0],0x0
    2C3F: 47 79 20 TST   [ps2.c:PS2DataOut],0x20
    2C42: A0 16    JZ    0x2C59
    2C44: 62 D0 00 MOV   REG[0xD0],0x0
    2C47: 51 63    MOV   A,[PS2FrameStatus+1]
    2C49: 31 01    XOR   A,0x1
    2C4B: 53 63    MOV   [PS2FrameStatus+1],A
    2C4D: 62 D0 00 MOV   REG[0xD0],0x0
    2C50: 2E 00 10 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2C53: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2C55: 60 04    MOV   REG[0x4],A
    2C57: 80 0B    JMP   0x2C63
(0533) 		else { PS2DATA_LOW; }
    2C59: 62 D0 00 MOV   REG[0xD0],0x0
    2C5C: 26 00 EF AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2C5F: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2C61: 60 04    MOV   REG[0x4],A
(0534) 		PS2FrameState=PS2_D6_BIT_OUT;
    2C63: 62 D0 00 MOV   REG[0xD0],0x0
    2C66: 55 77 12 MOV   [ps2.c:PS2FrameState],0x12
(0535) 		break;
    2C69: 80 B8    JMP   0x2D22
(0536) 	case PS2_D6_BIT_OUT:
(0537) 		if (PS2DataOut&0x40) { parity ^= 0x01; PS2DATA_HIGH; }
    2C6B: 62 D0 00 MOV   REG[0xD0],0x0
    2C6E: 47 79 40 TST   [ps2.c:PS2DataOut],0x40
    2C71: A0 16    JZ    0x2C88
    2C73: 62 D0 00 MOV   REG[0xD0],0x0
    2C76: 51 63    MOV   A,[PS2FrameStatus+1]
    2C78: 31 01    XOR   A,0x1
    2C7A: 53 63    MOV   [PS2FrameStatus+1],A
    2C7C: 62 D0 00 MOV   REG[0xD0],0x0
    2C7F: 2E 00 10 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2C82: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2C84: 60 04    MOV   REG[0x4],A
    2C86: 80 0B    JMP   0x2C92
(0538) 		else { PS2DATA_LOW; }
    2C88: 62 D0 00 MOV   REG[0xD0],0x0
    2C8B: 26 00 EF AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2C8E: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2C90: 60 04    MOV   REG[0x4],A
(0539) 		PS2FrameState=PS2_D7_BIT_OUT;
    2C92: 62 D0 00 MOV   REG[0xD0],0x0
    2C95: 55 77 13 MOV   [ps2.c:PS2FrameState],0x13
(0540) 		break;
    2C98: 80 89    JMP   0x2D22
(0541) 	case PS2_D7_BIT_OUT:
(0542) 		if (PS2DataOut&0x80) { parity ^= 0x01; PS2DATA_HIGH; }
    2C9A: 62 D0 00 MOV   REG[0xD0],0x0
    2C9D: 47 79 80 TST   [ps2.c:PS2DataOut],0x80
    2CA0: A0 16    JZ    0x2CB7
    2CA2: 62 D0 00 MOV   REG[0xD0],0x0
    2CA5: 51 63    MOV   A,[PS2FrameStatus+1]
    2CA7: 31 01    XOR   A,0x1
    2CA9: 53 63    MOV   [PS2FrameStatus+1],A
    2CAB: 62 D0 00 MOV   REG[0xD0],0x0
    2CAE: 2E 00 10 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2CB1: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2CB3: 60 04    MOV   REG[0x4],A
    2CB5: 80 0B    JMP   0x2CC1
(0543) 		else { PS2DATA_LOW; }
    2CB7: 62 D0 00 MOV   REG[0xD0],0x0
    2CBA: 26 00 EF AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2CBD: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2CBF: 60 04    MOV   REG[0x4],A
(0544) 		PS2FrameState=PS2_PARITY_BIT_OUT;
    2CC1: 62 D0 00 MOV   REG[0xD0],0x0
    2CC4: 55 77 14 MOV   [ps2.c:PS2FrameState],0x14
(0545) 		break;
    2CC7: 80 5A    JMP   0x2D22
(0546) 	case PS2_PARITY_BIT_OUT:
(0547) 		if (parity) { PS2DATA_HIGH; }
    2CC9: 62 D0 00 MOV   REG[0xD0],0x0
    2CCC: 3C 63 00 CMP   [PS2FrameStatus+1],0x0
    2CCF: A0 0D    JZ    0x2CDD
    2CD1: 62 D0 00 MOV   REG[0xD0],0x0
    2CD4: 2E 00 10 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2CD7: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2CD9: 60 04    MOV   REG[0x4],A
    2CDB: 80 0B    JMP   0x2CE7
(0548) 		else { PS2DATA_LOW; }
    2CDD: 62 D0 00 MOV   REG[0xD0],0x0
    2CE0: 26 00 EF AND   [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0xEF
    2CE3: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2CE5: 60 04    MOV   REG[0x4],A
(0549) 		PS2FrameState=PS2_STOP_BIT_OUT;
    2CE7: 62 D0 00 MOV   REG[0xD0],0x0
    2CEA: 55 77 15 MOV   [ps2.c:PS2FrameState],0x15
(0550) 		break;
    2CED: 80 34    JMP   0x2D22
(0551) //		//// XXX - Force a bad transmit parity bit periodically for testing
(0552) //		if (XXXForceBadTxParity++ > 3) { // Bad parity every N+1 transmissions
(0553) //			XXXForceBadTxParity=0;
(0554) //			if (parity) {
(0555) //				PS2DATA_LOW;
(0556) //			}
(0557) //			else {
(0558) //				PS2DATA_HIGH;
(0559) //			}
(0560) //			PS2FrameState=PS2_STOP_BIT_OUT;
(0561) //			break;
(0562) //		}
(0563) 	case PS2_STOP_BIT_OUT:
(0564) 		//// Release the Data Line to make the Stop bit
(0565) 		PS2DATA_HIGH;
    2CEF: 62 D0 00 MOV   REG[0xD0],0x0
    2CF2: 2E 00 10 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2CF5: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2CF7: 60 04    MOV   REG[0x4],A
(0566) 		PS2FrameState=PS2_ACK_BIT_IN;
    2CF9: 62 D0 00 MOV   REG[0xD0],0x0
    2CFC: 55 77 16 MOV   [ps2.c:PS2FrameState],0x16
(0567) 		break;
    2CFF: 80 22    JMP   0x2D22
(0568) 	case PS2_ACK_BIT_IN:
(0569) 		if (bit == 0) {
    2D01: 62 D0 00 MOV   REG[0xD0],0x0
    2D04: 3C 7D 00 CMP   [ps2.c:XXXForceBadTxParity+2],0x0
    2D07: B0 09    JNZ   0x2D11
(0570) 			PS2FrameStatus = FRAME_BYTE_TRANSMITTED;
    2D09: 62 D0 00 MOV   REG[0xD0],0x0
    2D0C: 55 62 02 MOV   [PS2FrameStatus],0x2
(0571) 		}
    2D0F: 80 07    JMP   0x2D17
(0572) 		//// XXX - I can't find what we should do if we get a bad ACK bit so
(0573) 		////       I'm declaring a Frame Error.
(0574) 		else {
(0575) 			// If we don't get a valid ACK bit, this is a transmission frame error
(0576) 			PS2FrameStatus = FRAME_TX_FRAME_ERROR;
    2D11: 62 D0 00 MOV   REG[0xD0],0x0
    2D14: 55 62 10 MOV   [PS2FrameStatus],0x10
(0577) 		}
(0578) 		//// We sent a complete frame so reset the state and disable PS2OneShot.
(0579) 		PS2FrameState = PS2_START_BIT_IN;
    2D17: 62 D0 00 MOV   REG[0xD0],0x0
    2D1A: 55 77 00 MOV   [ps2.c:PS2FrameState],0x0
(0580) 		PS2OneShot_DisableInt();
    2D1D: 10       PUSH  X
    2D1E: 7C 0B 3A LCALL _PS2OneShot_DisableInt
    2D21: 20       POP   X
(0581) 		break;
(0582) 	default: // We should never, ever, get here.
(0583) 		// XXX - So should we delete it after we're done developing the code?
(0584) 		break;
(0585) 	}
(0586) 	return;
    2D22: 38 FE    ADD   SP,0xFE
    2D24: 20       POP   X
    2D25: 62 D0 00 MOV   REG[0xD0],0x0
    2D28: 18       POP   A
    2D29: 53 14    MOV   [__rZ],A
    2D2B: 18       POP   A
    2D2C: 53 15    MOV   [__rY],A
    2D2E: 18       POP   A
    2D2F: 53 16    MOV   [__rX],A
    2D31: 18       POP   A
    2D32: 53 17    MOV   [__r11],A
    2D34: 18       POP   A
    2D35: 53 18    MOV   [__r10],A
    2D37: 18       POP   A
    2D38: 53 19    MOV   [__r9],A
    2D3A: 18       POP   A
    2D3B: 53 1A    MOV   [__r8],A
    2D3D: 18       POP   A
    2D3E: 53 1B    MOV   [__r7],A
    2D40: 18       POP   A
    2D41: 53 1C    MOV   [__r6],A
    2D43: 18       POP   A
    2D44: 53 1D    MOV   [__r5],A
    2D46: 18       POP   A
    2D47: 53 1E    MOV   [__r4],A
    2D49: 18       POP   A
    2D4A: 53 1F    MOV   [__r3],A
    2D4C: 18       POP   A
    2D4D: 53 20    MOV   [__r2],A
    2D4F: 18       POP   A
    2D50: 53 21    MOV   [__r1],A
    2D52: 18       POP   A
    2D53: 53 22    MOV   [__r0],A
    2D55: 18       POP   A
    2D56: 60 D5    MOV   REG[0xD5],A
    2D58: 18       POP   A
    2D59: 60 D4    MOV   REG[0xD4],A
    2D5B: 18       POP   A
    2D5C: 60 D3    MOV   REG[0xD3],A
    2D5E: 18       POP   A
    2D5F: 60 D0    MOV   REG[0xD0],A
    2D61: 18       POP   A
    2D62: 7E       RETI  
(0587) }
(0588) 
(0589) //----------------------------------------------------------------------------------------
(0590) // PS/2 Bit-Banging State Machine Reset
(0591) //
(0592) // Since it is possible that a glitch can appear on the PS/2 Clock line to the PSoC
(0593) // and cause the state machine to believe it is receiving data from the PS/2 interface,
(0594) // a OneShot User Module (named PS2OneShot here) is used to reset the state machine
(0595) //
(0596) // PS/2 specifications say that acceptable clock frequencies range from 10kHz to 16kHz
(0597) // (i.e. clock periods range from 100us to 62.5us).
(0598) //
(0599) // In this design an 8-bit OneShot User Module is configured with a clock source of VC3
(0600) // with the VC3 source of SysClk/1 and divider of 240. This clocks the OneShot at a rate
(0601) // of 100kHz. Upon detecting the falling-edge of the PS/2 clock, the OneShot becomes
(0602) // active. The OneShot will not generate an interrupt until the PS/2 clock line remains
(0603) // high (i.e. PS/2 clock is idle) for 8/100kHz = 80us. This is sufficient time for the
(0604) // state machine to read the Stop bit from a valid PS/2 frame before this OneShot ISR
(0605) // resets the state machine. One the other hand, if the clock line glitched and the
(0606) // state machine was started, this ISR will reset the state machine instead of leaving
(0607) // it (incorrectly) in an intermediate state when a valid frame arrives.
(0608) //
(0609) // XXX - Update these comments to reflect the new behavior of only calling
(0610) //       this ISR if we don't get a complete frame.
(0611) //----------------------------------------------------------------------------------------
(0612) void PS2OneShot_ISR(void)
(0613) {
_PS2OneShot_ISR:
    2D63: 71 C0    OR    F,0xC0
    2D65: 08       PUSH  A
    2D66: 5D D0    MOV   A,REG[0xD0]
    2D68: 08       PUSH  A
(0614) 	// Make sure the PS/2 Data line is HIGH (undriven) by the PSoC in case the
(0615) 	// transmission of a frame was interrupted while it was held LOW.
(0616) 	// Note: We don't need to make the PS/2 Clock line HIGH since, it something else
(0617) 	// is driving it LOW, this ISR will never be called since the OneShot will be
(0618) 	// held in its active state.
(0619) 	PS2DATA_HIGH;
    2D69: 62 D0 00 MOV   REG[0xD0],0x0
    2D6C: 2E 00 10 OR    [state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data],0x10
    2D6F: 51 00    MOV   A,[state|pressed|types|keys|rst|print2|count|print1|o|n|m|highs|mids|lows|keycountlow|keycountmid|keycounthigh|delstatus|ctrlaltdelete|altstatus|ctrlstatus|shiftstatus|statusLEDs|pwm_on|brightindex|i|yopos|xopos|ypos|xpos|ycount|xcount|parity|bit|data]
    2D71: 60 04    MOV   REG[0x4],A
(0620) 	//// Reset the frame state machine
(0621) 	if (PS2FrameState != PS2_START_BIT_IN) {
    2D73: 62 D0 00 MOV   REG[0xD0],0x0
    2D76: 3C 77 00 CMP   [ps2.c:PS2FrameState],0x0
    2D79: A0 0D    JZ    0x2D87
(0622) 		PS2FrameStatus = FRAME_INCOMPLETE;
    2D7B: 62 D0 00 MOV   REG[0xD0],0x0
    2D7E: 55 62 20 MOV   [PS2FrameStatus],0x20
(0623) 		PS2FrameState = PS2_START_BIT_IN;
    2D81: 62 D0 00 MOV   REG[0xD0],0x0
    2D84: 55 77 00 MOV   [ps2.c:PS2FrameState],0x0
(0624) 	}
(0625) 	return;
    2D87: 18       POP   A
    2D88: 60 D0    MOV   REG[0xD0],A
    2D8A: 18       POP   A
    2D8B: 7E       RETI  
(0626) }
(0627) 
(0628) //----------------------------------------------------------------------------------------
(0629) // Ten Micro Second Timer Interrupt Service Routine
(0630) //----------------------------------------------------------------------------------------
(0631) void TenMicroSecTimer_ISR(void)
(0632) {
_TenMicroSecTimer_ISR:
    2D8C: 71 C0    OR    F,0xC0
    2D8E: 08       PUSH  A
    2D8F: 5D D0    MOV   A,REG[0xD0]
    2D91: 08       PUSH  A
(0633) 	TenMicroSecTimerReps--;
    2D92: 62 D0 00 MOV   REG[0xD0],0x0
    2D95: 7A 65    DEC   [TenMicroSecTimerReps]
(0634) 	return;
    2D97: 18       POP   A
    2D98: 60 D0    MOV   REG[0xD0],A
    2D9A: 18       POP   A
    2D9B: 7E       RETI  
--------------------------------------------------------------------------------


PSoC Designer Version: 5.0.1127.0

Copyright (C) 1994 - 2011 ImageCraft Creations Inc.
ImageCraft, 2625 Middlefield Rd #685, Palo Alto, CA 94306
info@imagecraft.com, phone (650) 493-9326 FAX (866) 889-4834
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission
Version 7.05.00.
